<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>College Physics 2</title>
    <link href="/2025/09/02/Review/College-Physics-2/"/>
    <url>/2025/09/02/Review/College-Physics-2/</url>
    
    <content type="html"><![CDATA[<p>理想气体的物态方程</p><p>$$PV=\frac{m}{M}RT$$</p><p>$\frac{m}{M}$ 叫做物质的量</p><p>$R $ 叫做普适气体常量</p><p>$$PV=nRT$$</p><p>道尔顿分压定律：混合气体的压强等于各个气体的压强之和<br>$$ P=P_{1}+P_{2}+P_{3}+…=(n_{1}+n_{2}+n_{3}+…)kT$$</p><p>$$ \begin{align*}<br>P &amp;= \frac{F}{S} = \frac{I}{l_2l_3\Delta t} = \frac{m_0}{l_1l_2l_3} \sum_{i=1}^{N} v_{ix}^2 = \frac{Nm_0}{l_1l_2l_3} \frac{\sum_{i=1}^{N} v_{ix}^2}{N} \<br>&amp;= \frac{N}{V}m_0\overline{v_x^2} = nm_0\overline{v_x^2} \<br>&amp;= \frac{1}{3}nm_0\overline{v^2} = \frac{2}{3}n\overline{\varepsilon}<br>\end{align*} $$</p><p>又因为：</p><p>$$\overline{\varepsilon} = \frac{1}{2} m_0 \overline{v^2} = \frac{3}{2} kT$$<br>所以，方均根速率：<br>$$\sqrt{\overline{v^2}} = \sqrt{\frac{3kT}{m_0}} = \sqrt{\frac{3RT}{M}}$$</p>]]></content>
    
    
    <categories>
      
      <category>Review</category>
      
    </categories>
    
    
    <tags>
      
      <tag>College Physics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Tutorial</title>
    <link href="/2025/09/01/Full-Stack/JavaScript/"/>
    <url>/2025/09/01/Full-Stack/JavaScript/</url>
    
    <content type="html"><![CDATA[<p>  相信各位读者已经掌握了2~3种编程语言，在此基础上再学习JavaScript并非难事，因此<strong>主要展示大致语法结构</strong>，及JavaScript相比其他语言的“特性”，skip 一些简单的执行流程原理！</p><h2 id="Usage">Usage</h2><p>与在HTML中引入CSS相同，提供两种方式进行引入：</p><ol><li>行内式</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 这是JavaScript代码</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>外部式</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/script.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <p>可以将脚本放置在<code>&lt;head&gt;</code>或<code>&lt;body&gt;</code>中（建议包含在<strong>后者</strong>中）</p>          </div><div class="note note-danger">            <p>外部脚本不能包含<code>&lt;script&gt;</code>标签</p>          </div><h2 id="Basic-Syntax">Basic Syntax</h2><ul><li>JavaScript 并不强求每个语句以<code>;</code>结束，浏览器中负责执行 JavaScript 代码的引擎会自动在每个语句的结尾补上<code>;</code>，但防止某些情况下会改变程序的语义，导致运行结果与期望不一致，我们建议都在结尾使用<code>;</code>！</li></ul><h3 id="注释">注释</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这是单行注释</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是多行注释</span><br><span class="hljs-comment">这是多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><h3 id="输出">输出</h3><h4 id="控制台">控制台</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"输出一条日志"</span>);<span class="hljs-comment">//最常用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">"输出一条信息"</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">"输出一条警告"</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">"输出一条错误"</span>);<br></code></pre></td></tr></tbody></table></figure><h4 id="窗口">窗口</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">"这是一条警告"</span>);<br></code></pre></td></tr></tbody></table></figure><h4 id="页面">页面</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">"这是一条警告"</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="比较运算符">比较运算符</h3><ul><li>第一种是<code>==</code>比较，它会<strong>自动转换数据类型再比较</strong>，很多时候，会得到非常诡异的结果；</li><li>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。</li></ul><p><strong>建议使用<code>===</code>比较</strong>，因为它的比较规则更严格，不会出现自动转换数据类型的情况。</p><div class="note note-danger">            <p>另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span>; <span class="hljs-comment">// false</span><br></code></pre></td></tr></tbody></table></figure><p>只有当<code>isNaN()</code>才相等，返回<code>true</code>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></tbody></table></figure>          </div><h3 id="基本数据类型">基本数据类型</h3><ul><li>数值（Number）</li><li>字符串（String）</li><li>布尔值（Boolean）</li><li><code>null</code></li><li><code>undefined</code>：使用<code>var</code>声明变量但未对其加以初始化</li><li>对象（Object）</li></ul><p>与C++等语言不同，JavaScript的数值类型<strong>不区分整数和浮点数</strong>，统一用Number表示，以下都是合法的Number类型：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">123</span>; <span class="hljs-comment">// 整数123</span><br><span class="hljs-number">0.456</span>; <span class="hljs-comment">// 浮点数0.456</span><br><span class="hljs-number">1.2345e3</span>; <span class="hljs-comment">// 科学计数法表示1.2345x1000，等同于1234.5</span><br>-<span class="hljs-number">99</span>; <span class="hljs-comment">// 负数</span><br><span class="hljs-title class_">NaN</span>; <span class="hljs-comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span><br><span class="hljs-title class_">Infinity</span>; <span class="hljs-comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span><br></code></pre></td></tr></tbody></table></figure><h3 id="声明变量">声明变量</h3><p>因为 JavaScript 是<strong>弱类型</strong>语言，因此<strong>变量的类型可以动态改变</strong>。在 JavaScript 中，可以使用<code>var</code>、<code>let</code>、<code>const</code>声明变量，它们的区别是：</p><ul><li><p><strong>作用域</strong>不同</p><ul><li><code>var</code> 声明的变量具有<strong>函数作用域</strong>，即只在声明它的函数内部有效，在函数外部无法访问。如果在函数外部使用 <code>var</code> 声明变量，则该变量会成为全局变量</li><li><code>let</code> 和 <code>const</code> 声明的变量具有<strong>块级作用域</strong>，即只在声明它的代码块（如 <code>if</code>、<code>for</code>、<code>while</code> 等语句的花括号内）中有效，在代码块外部无法访问</li></ul></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">testVar</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {<br>    <span class="hljs-keyword">var</span> message = <span class="hljs-string">"Hello"</span>; <span class="hljs-comment">// var声明的变量具有函数作用域</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message); <span class="hljs-comment">// 输出: Hello</span><br>  }<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message); <span class="hljs-comment">// 仍能访问，输出: Hello（因为在同一函数内）</span><br>}<br><span class="hljs-title function_">testVar</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message); <span class="hljs-comment">// 报错: message is not defined（函数外部无法访问）</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">testLet</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {<br>    <span class="hljs-keyword">let</span> message = <span class="hljs-string">"Hello"</span>; <span class="hljs-comment">// let声明的变量具有块级作用域(const同理)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message); <span class="hljs-comment">// 输出: Hello</span><br>  }<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message); <span class="hljs-comment">// 报错: message is not defined（块外部无法访问）</span><br>}<br><span class="hljs-title function_">testLet</span>();<br></code></pre></td></tr></tbody></table></figure><ul><li><p><strong>可修改性</strong>不同</p><ul><li><code>var</code> 和 <code>let</code> 声明的变量<strong>可以被重新赋值</strong></li><li><code>const</code> 声明的变量是<strong>常量</strong>，一旦声明就<strong>不能被重新赋值</strong>。但需要注意的是，如果 <code>const</code> 声明的是对象或数组，对象的属性或数组的元素是可以被修改的，因为 <code>const</code> 只保证变量<strong>指向的内存地址不变</strong>，而<strong>不保证内存地址中的内容不变</strong></li></ul></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>a = <span class="hljs-string">"hello"</span>; <span class="hljs-comment">// 允许重新赋值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 输出: hello</span><br></code></pre></td></tr></tbody></table></figure><ul><li><p><strong>重复声明</strong>不同</p><ul><li><code>var</code> <strong>允许在同一作用域内重复声明同一个变量</strong></li><li><code>let</code> 和 <code>const</code> 不允许在同一作用域内重复声明同一个变量，否则会抛出 SyntaxError 错误</li></ul></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">20</span>; <span class="hljs-comment">// 允许重复声明，会覆盖之前的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 输出: 20</span><br></code></pre></td></tr></tbody></table></figure><h3 id="循环、控制语句">循环、控制语句</h3><p>与 CPP 基本相同，不再赘述</p><h3 id="Function">Function</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">x</span>) {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Input x value is <span class="hljs-subst">${x}</span>`</span>)<br>    x++;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">100</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Now the x value in this function is <span class="hljs-subst">${x}</span>`</span>)<br>}<br><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span><br><span class="hljs-title function_">test1</span>(x)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Now the x outside the function is <span class="hljs-subst">${x}</span>`</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">Input x value is 10<br>Now the x value in this function is 11<br>Now the x outside the function is 10<br></code></pre></td></tr></tbody></table></figure><ul><li>基本类型的传递为<strong>值传递</strong></li><li>对象、数组、函数等类型的传递为<strong>引用传递</strong></li></ul><h3 id="OOP-in-JavaScript">OOP in JavaScript</h3><h2 id="Reference">Reference</h2><p><a href="https://blog.csdn.net/weixin_55846296/article/details/126604513?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=126604513&amp;sharerefer=PC&amp;sharesource=m0_53058983&amp;sharefrom=from_link">【 javascript】用一篇文章让你搞清楚var、let、const声明变量和不用var声明变量的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>Full-Stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Double Pointer</title>
    <link href="/2025/08/29/Algorithm/Double-Pointer/"/>
    <url>/2025/08/29/Algorithm/Double-Pointer/</url>
    
    <content type="html"><![CDATA[<h2 id="Double-Pointer">Double Pointer</h2><p><strong>双指针</strong>是算法设计中一种<strong>高效且灵活</strong>的技巧，通过两个指针在数据结构中<strong>协同移动</strong>，能够将原本需要<strong>嵌套循环</strong> $ O(n^2) $ 的问题优化为线性时间复杂度 $O(n) $，同时减少空间消耗。</p><h3 id="左右指针">左右指针</h3><ul><li><p><strong>核心思想</strong>：两个指针分别从<strong>序列的两端</strong>出发，<strong>向中间移动</strong>，通过判断条件调整指针位置，<strong>直至相遇或满足特定条件</strong>。</p></li><li><p><strong>适用场景</strong>：</p><ul><li>有序数组问题（如两数之和、三数之和）</li><li>对称结构判断（如回文串、回文链表）</li><li>二分查找变种（如寻找旋转数组的最小值）</li><li>需要从两端向中间收缩的场景（如盛最多水的容器）</li></ul></li><li><p><strong>方法</strong>：</p><ul><li>双指针分别<strong>指向数组两端</strong>：左指针<code>left = 0</code>（<strong>起点</strong>），右指针<code>right = n-1</code>（<strong>终点</strong>）</li><li>循环条件：<code>left &lt; right</code>（指针<strong>未相遇</strong>）</li><li>根据要求<strong>动态移动指针</strong></li></ul></li></ul><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted">Leetcode 167. 两数之和 II - 输入有序数组</a></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>{<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=numbers.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(right&gt;left){<br>            <span class="hljs-keyword">if</span>(numbers[right]+numbers[left]&gt;target){<br>                right--;<br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(numbers[right]+numbers[left]&lt;target){<br>                left++;<br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        }<br>        <span class="hljs-keyword">return</span> {left<span class="hljs-number">+1</span>,right<span class="hljs-number">+1</span>};<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><hr><p><a href="https://leetcode.cn/problems/container-with-most-water">Leetcode 11. 盛最多水的容器</a></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>{<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=height.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> max_vol=INT_MIN;<br>        <span class="hljs-type">int</span> vol;<br>        <span class="hljs-keyword">while</span>(right!=left){<br>            vol=(right-left)*<span class="hljs-built_in">min</span>(height[left],height[right]);<br>            max_vol=<span class="hljs-built_in">max</span>(max_vol,vol);<br>            <span class="hljs-keyword">if</span>(height[left]&gt;height[right]){<br>                right--;<br>            }<br>            <span class="hljs-keyword">else</span> left++;<br>        }<br>        <span class="hljs-keyword">return</span> max_vol;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><hr><p><a href="https://leetcode.cn/problems/remove-element">Leetcode 27. 移除元素</a></p><h4 id="方法一：类快慢指针">方法一：类快慢指针</h4><p>让我们<strong>模拟</strong>一下程序运行的过程：</p><ul><li>当前几个均<code>!=val</code>时：<code>left</code>和<code>right</code>都<strong>指向同一个索引</strong>，<strong>同时向后移动</strong></li><li>当同时指向<code>val</code>时，<code>right</code>向后继续移动寻找<code>!=val</code>，<code>left</code>保持不变，标记<code>val</code>的位置</li><li>当<code>right</code>再次指向<code>!=val</code>时，这时<code>left</code>的<strong>标记起作用</strong>了，与<code>nums[right]</code>进行交换并向后移动</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>{<br>        <span class="hljs-type">int</span> right,left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(right=<span class="hljs-number">0</span>;right&lt;n;right++){<br>            <span class="hljs-keyword">if</span>(nums[right]!=val){<br>                nums[left]=nums[right];<br>                left++;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> left;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h4 id="方法二：对撞指针">方法二：对撞指针</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>{<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> right=n<span class="hljs-number">-1</span>,left=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right){<br>            <span class="hljs-keyword">if</span>(nums[left]==val){<br>                <span class="hljs-built_in">swap</span>(nums[right],nums[left]);<br>                right--;<br>            }<span class="hljs-keyword">else</span> {<br>                left++;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> left;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><hr><h3 id="快慢指针">快慢指针</h3><ul><li><p><strong>核心思想</strong>：两个指针从<strong>同一起点出发</strong>，以<strong>不同速度同向移动</strong>，利用<strong>速度差</strong>解决问题。</p></li><li><p><strong>适用场景</strong>：</p><ul><li>链表问题（如检测环、寻找环入口、链表中点）</li><li>数组去重（如删除有序数组中的重复项）</li><li>追及问题（如找到链表中倒数第 k 个节点）</li></ul></li><li><p><strong>方法</strong>：</p><ul><li>快指针<code>fast</code>和慢指针<code>slow</code>均<strong>指向起点</strong>（如链表头节点、数组下标 0）</li><li><strong>快指针每次移动 2 步</strong>（<code>fast = fast-&gt;next-&gt;next</code>）</li><li><strong>慢指针每次移动 1 步</strong>（<code>slow = slow-&gt;next</code>）</li><li>直至<strong>快指针到达终点</strong>（<code>fast == nullptr</code>或<code>fast-&gt;next == nullptr</code>）或<strong>两指针相遇</strong></li></ul></li></ul>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-2cbc2e5f" role="button" aria-expanded="false" aria-controls="collapse-2cbc2e5f">        <div class="fold-arrow">▶</div> 有环必相遇      </div>      <div class="fold-collapse collapse" id="collapse-2cbc2e5f">        <div class="fold-content">          <p>若链表存在环，那么环是<strong>闭合的循环结构</strong>。一旦指针进入环，就会在环内<strong>永不停歇地循环移动</strong>（因为环的末尾节点指向环内某个节点，而非<code>nullptr</code>）。</p>        </div>      </div>    </div><hr><p><a href="https://leetcode.cn/problems/linked-list-cycle">Leetcode 141.环形链表</a></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode {</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) {}</span><br><span class="hljs-comment"> * };</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode *head)</span> </span>{<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span> || head-&gt;next==<span class="hljs-literal">nullptr</span>){<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//空链表或单节点无环</span><br>        }<br>        ListNode* fast=head-&gt;next;<br>        <span class="hljs-comment">//初始化，防止误判（直接跳过循环）</span><br>        ListNode* slow=head;<br>        <span class="hljs-keyword">while</span>(slow!=fast){<br>            <span class="hljs-keyword">if</span>(fast == <span class="hljs-literal">nullptr</span> || fast-&gt;next == <span class="hljs-literal">nullptr</span>){<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            }<br>            fast=fast-&gt;next-&gt;next;<br>            slow=slow-&gt;next;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><hr><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array">Leetcode 26. 删除有序数组中的重复项</a></p><ul><li>使用<code>fast</code>遍历数组，<code>slow</code>前段是<strong>已处理序列</strong>，指向的是下一个替换元素的位置（<code>tag</code>）<ul><li>若<code>fast</code>标记重复元素，<code>slow</code>不动</li><li>若<code>fast</code>标记非重复元素，<code>slow</code>交换位置</li></ul></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class="hljs-type">int</span> fast=<span class="hljs-number">1</span>,slow=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(fast&lt;n){<br>            <span class="hljs-keyword">if</span>(nums[fast]!=nums[fast<span class="hljs-number">-1</span>]){<br>                nums[slow]=nums[fast];<br>                slow++;<br>            }<br>            fast++;<br>        }<br>        <span class="hljs-keyword">return</span> slow;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><hr><h3 id="滑动窗口">滑动窗口</h3><ul><li><p><strong>核心思想</strong>：维护一个由<strong>左右指针界定的「窗口」</strong>（<strong>连续区间</strong>），通过移动左右指针<strong>动态调整窗口范围</strong>，以寻找满足条件的最优子序列。</p></li><li><p><strong>适用场景</strong>：</p><ul><li>子串 / 子数组问题（如最小覆盖子串、最长无重复子串）</li><li>区间求和问题（如长度最小的子数组）</li><li>固定长度区间问题（如滑动窗口最大值）</li></ul></li><li><p><strong>方法</strong>：</p><ul><li>使用两个指针<code>left=0,right=0</code>定义一个窗口，<strong>初始时窗口为空</strong>。</li><li>移动右指针<code>right++</code><strong>扩展窗口</strong>，移动左指针<code>left++</code><strong>缩小窗口</strong>，直到满足条件。</li><li>在收缩过程中<strong>更新满足条件的最优解</strong></li></ul></li></ul><hr><p><a href="https://leetcode.cn/problems/minimum-window-substring">Leetcode 76. 最小覆盖子串</a></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    unordered_map &lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; ori, cnt;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;p: ori) {<br>            <span class="hljs-keyword">if</span> (cnt[p.first] &lt; p.second) {<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br><br>    <span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;c: t) {<br>            ++ori[c];<br>        }<br><br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> len = INT_MAX, ansL = <span class="hljs-number">-1</span>, ansR = <span class="hljs-number">-1</span>;<br><br>        <span class="hljs-keyword">while</span> (r &lt; <span class="hljs-built_in">int</span>(s.<span class="hljs-built_in">size</span>())) {<br>            <span class="hljs-keyword">if</span> (ori.<span class="hljs-built_in">find</span>(s[++r]) != ori.<span class="hljs-built_in">end</span>()) {<br>                ++cnt[s[r]];<br>            }<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">check</span>() &amp;&amp; l &lt;= r) {<br>                <span class="hljs-keyword">if</span> (r - l + <span class="hljs-number">1</span> &lt; len) {<br>                    len = r - l + <span class="hljs-number">1</span>;<br>                    ansL = l;<br>                }<br>                <span class="hljs-keyword">if</span> (ori.<span class="hljs-built_in">find</span>(s[l]) != ori.<span class="hljs-built_in">end</span>()) {<br>                    --cnt[s[l]];<br>                }<br>                ++l;<br>            }<br>        }<br><br>        <span class="hljs-keyword">return</span> ansL == <span class="hljs-number">-1</span> ? <span class="hljs-built_in">string</span>() : s.<span class="hljs-built_in">substr</span>(ansL, len);<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Double Pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Connection Deep Dive</title>
    <link href="/2025/08/27/Tutorial/GitHub-Connection-Deep-Dive/"/>
    <url>/2025/08/27/Tutorial/GitHub-Connection-Deep-Dive/</url>
    
    <content type="html"><![CDATA[<p>今天在将hexo博客进行部署的时候突然发生以下报错：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh: connect to host github.com port 22: Connection timed out<br>fatal: Could not <span class="hljs-built_in">read</span> from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something<span class="hljs-string">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-string">Error: Spawn failed</span><br><span class="hljs-string">    at ChildProcess.&lt;anonymous&gt; (E:\Hexo-backup\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="hljs-string">    at ChildProcess.emit (node:events:518:28)</span><br><span class="hljs-string">    at cp.emit (E:\Hexo-backup\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="hljs-string">    at ChildProcess._handle.onexit (node:internal/child_process:293:12)</span><br></code></pre></td></tr></tbody></table></figure><p>在CSDN找到相应问题文档，才成功解决！<a href="https://blog.csdn.net/nightwishh/article/details/99647545?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=99647545&amp;sharerefer=PC&amp;sharesource=m0_53058983&amp;sharefrom=from_link">git报错ssh: connect to host github.com port 22: Connection timed out</a></p><h2 id="HTTPS">HTTPS</h2><h2 id="SSH">SSH</h2>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>updating</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hashtable</title>
    <link href="/2025/08/26/Data%20structure/Hashtable/"/>
    <url>/2025/08/26/Data%20structure/Hashtable/</url>
    
    <content type="html"><![CDATA[<h2 id="Hashtable">Hashtable</h2><p>  <strong>哈希表</strong>（hash table），又称<strong>散列表</strong>，它通过建立<strong>键key</strong>与<strong>值value</strong>之间的<strong>映射</strong>，实现高效的<strong>元素查询</strong>。具体而言，我们向哈希表中输入一个键 key,则可以在 $O(1)$ 时间内获取对应的值value 。</p><p>同时数组和链表也可以实现查询功能，元素查询效率对比如图表所示：</p><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">数组</th><th style="text-align:center">链表</th><th style="text-align:center">哈希表</th></tr></thead><tbody><tr><td style="text-align:center">查找元素</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">添加元素</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">删除元素</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr></tbody></table><p>可以发现，在哈希表中进行<strong>增删查改</strong>的时间复杂度都是 $O(1)$ ，非常高效。</p><h3 id="Hashtable-in-STL">Hashtable in STL</h3><p><a href="https://richard110206.github.io/2025/06/27/Data%20structure/CUMT-Datastructure-Practice-4/">详情请看这篇博客Problem A的注释</a></p><h3 id="哈希表的实现">哈希表的实现</h3><p>  我们先考虑最简单的情况，仅用一个数组来实现哈希表。在哈希表中，我们将<strong>数组中的每个空位</strong>称为<strong>桶</strong>（bucket），每个桶可<strong>存储一个键值对</strong>。因此，查询操作就是找到key对应的桶，并在桶中获取value。</p><p>  这是通过<strong>哈希函数</strong>（hash function）实现的，它能将一个较大的输入空间<strong>映射</strong>到一个较小的输出空间。在哈希表中，输入空间是所有key，输出空间是所有桶（<strong>数组索引</strong>）。换句话说，输入一个key，我们可以通过哈希函数得到该key对应的键值对<strong>在数组中的存储位置</strong>。</p><p>输入一个key，哈希函数的计算过程分为以下两步。</p><ol><li>通过某种<strong>哈希算法</strong>hash()计算得到<strong>哈希值</strong>。</li><li>将<strong>哈希值对桶数量（数组长度）capacity 取模</strong>，从而获取该key对应的数组索引index。</li></ol><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">index</span> <span class="hljs-operator">=</span> hash(key) % capacity<br></code></pre></td></tr></tbody></table></figure><p>随后，我们就可以利用index在哈希表中访问对应的桶，从而获取value。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 键值对 */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span> {<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> key;<br>    string val;<br>    <span class="hljs-built_in">Pair</span>(<span class="hljs-type">int</span> key, string val) {<br>        <span class="hljs-keyword">this</span>-&gt;key = key;<br>        <span class="hljs-keyword">this</span>-&gt;val = val;<br>    }<br>};<br><br><span class="hljs-comment">/* 基于数组实现的哈希表 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayHashMap</span> {<br>  <span class="hljs-keyword">private</span>:<br>    vector&lt;Pair *&gt; buckets;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ArrayHashMap</span>() {<br>        <span class="hljs-comment">// 初始化数组，包含 100 个桶</span><br>        buckets = <span class="hljs-built_in">vector</span>&lt;Pair *&gt;(<span class="hljs-number">100</span>);<br>    }<br><br>    ~<span class="hljs-built_in">ArrayHashMap</span>() {<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;bucket : buckets) {<br>            <span class="hljs-keyword">delete</span> bucket;<br>        }<br>        buckets.<span class="hljs-built_in">clear</span>();<br>    }<br><br>    <span class="hljs-comment">/* 哈希函数 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hashFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>{<br>        <span class="hljs-type">int</span> index = key % <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">return</span> index;<br>    }<br><br>    <span class="hljs-comment">/* 查询操作 */</span><br>    <span class="hljs-function">string <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>{<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        Pair *pair = buckets[index];<br>        <span class="hljs-keyword">if</span> (pair == <span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>        <span class="hljs-keyword">return</span> pair-&gt;val;<br>    }<br><br>    <span class="hljs-comment">/* 添加操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, string val)</span> </span>{<br>        Pair *pair = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Pair</span>(key, val);<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        buckets[index] = pair;<br>    }<br><br>    <span class="hljs-comment">/* 删除操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>{<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        <span class="hljs-comment">// 释放内存并置为 nullptr</span><br>        <span class="hljs-keyword">delete</span> buckets[index];<br>        buckets[index] = <span class="hljs-literal">nullptr</span>;<br>    }<br><br>    <span class="hljs-comment">/* 获取所有键值对 */</span><br>    <span class="hljs-function">vector&lt;Pair *&gt; <span class="hljs-title">pairSet</span><span class="hljs-params">()</span> </span>{<br>        vector&lt;Pair *&gt; pairSet;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) {<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span>) {<br>                pairSet.<span class="hljs-built_in">push_back</span>(pair);<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> pairSet;<br>    }<br><br>    <span class="hljs-comment">/* 获取所有键 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">keySet</span><span class="hljs-params">()</span> </span>{<br>        vector&lt;<span class="hljs-type">int</span>&gt; keySet;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) {<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span>) {<br>                keySet.<span class="hljs-built_in">push_back</span>(pair-&gt;key);<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> keySet;<br>    }<br><br>    <span class="hljs-comment">/* 获取所有值 */</span><br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">valueSet</span><span class="hljs-params">()</span> </span>{<br>        vector&lt;string&gt; valueSet;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) {<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span>) {<br>                valueSet.<span class="hljs-built_in">push_back</span>(pair-&gt;val);<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> valueSet;<br>    }<br><br>    <span class="hljs-comment">/* 打印哈希表 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">for</span> (Pair *kv : <span class="hljs-built_in">pairSet</span>()) {<br>            cout &lt;&lt; kv-&gt;key &lt;&lt; <span class="hljs-string">" -&gt; "</span> &lt;&lt; kv-&gt;val &lt;&lt; endl;<br>        }<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="哈希冲突">哈希冲突</h3><p>  从本质上看，哈希函数的作用是将所有 key 构成的<strong>输入空间映射到数组所有索引构成的输出空间</strong>，而输入空间往往远大于输出空间。因此，理论上一定存在“<strong>多个输入对应相同输出</strong>”的情况,我们将这种多个输入对应同一输出的情况称为<strong>哈希冲突</strong>（hash collision）。<br>  哈希冲突会导致查询结果错误，严重影响哈希表的可用性。为了解决该问题，每当遇到哈希冲突时，我们就进行哈希表扩容，直至冲突消失为止。此方法简单粗暴且有效，但效率太低。为了提升效率，我们可以采用以下策略：</p><ol><li><strong>改良哈希表数据结构</strong>，使得哈希表可以在出现哈希冲突时正常工作。</li></ol><ul><li><strong>“链式地址”</strong></li><li><strong>“开放寻址”</strong></li></ul><ol start="2"><li>仅在必要时，即当哈希冲突比较严重时，才执行扩容操作。</li></ol><h4 id="链式地址">链式地址</h4><p>  在原始哈希表中，每个桶仅能存储一个键值对。<strong>链式地址</strong>（separate chaining）将<strong>单个元素转换为链表</strong>，将键值对作为链表节点，将所有<strong>发生冲突的键值对都存储在同一链表中</strong>。</p><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/DataStructure/linkedlisthash.png?raw=true" alt="链式地址哈希表"></p><p>  基于链式地址实现的哈希表，需要通过哈希函数<strong>访问链表头节点</strong>，<strong>遍历链表到目标节点</strong>在进行增删改查的操作。</p><div class="note note-info">            <p><strong>Limitations</strong></p><ul><li><strong>占用空间增大</strong>：链表包含节点指针，它相比数组更加<strong>耗费内存空间</strong>。</li><li><strong>查询效率降低</strong>：因为需要<strong>线性遍历链表</strong>来查找对应元素。</li></ul>          </div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 链式地址哈希表 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapChaining</span> {<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> size;                       <span class="hljs-comment">// 键值对数量</span><br>    <span class="hljs-type">int</span> capacity;                   <span class="hljs-comment">// 哈希表容量</span><br>    <span class="hljs-type">double</span> loadThres;               <span class="hljs-comment">// 触发扩容的负载因子阈值</span><br>    <span class="hljs-type">int</span> extendRatio;                <span class="hljs-comment">// 扩容倍数</span><br>    vector&lt;vector&lt;Pair *&gt;&gt; buckets; <span class="hljs-comment">// 桶数组</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/* 构造方法 */</span><br>    <span class="hljs-built_in">HashMapChaining</span>() : <span class="hljs-built_in">size</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">capacity</span>(<span class="hljs-number">4</span>), <span class="hljs-built_in">loadThres</span>(<span class="hljs-number">2.0</span> / <span class="hljs-number">3.0</span>), <span class="hljs-built_in">extendRatio</span>(<span class="hljs-number">2</span>) {<br>        buckets.<span class="hljs-built_in">resize</span>(capacity);<br>    }<br><br>    <span class="hljs-comment">/* 析构方法 */</span><br>    ~<span class="hljs-built_in">HashMapChaining</span>() {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;bucket : buckets) {<br>            <span class="hljs-keyword">for</span> (Pair *pair : bucket) {<br>                <span class="hljs-comment">// 释放内存</span><br>                <span class="hljs-keyword">delete</span> pair;<br>            }<br>        }<br>    }<br><br>    <span class="hljs-comment">/* 哈希函数 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hashFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>{<br>        <span class="hljs-keyword">return</span> key % capacity;<br>    }<br><br>    <span class="hljs-comment">/* 负载因子 */</span><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">loadFactor</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)size / (<span class="hljs-type">double</span>)capacity;<br>    }<br><br>    <span class="hljs-comment">/* 查询操作 */</span><br>    <span class="hljs-function">string <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>{<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        <span class="hljs-comment">// 遍历桶，若找到 key ，则返回对应 val</span><br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets[index]) {<br>            <span class="hljs-keyword">if</span> (pair-&gt;key == key) {<br>                <span class="hljs-keyword">return</span> pair-&gt;val;<br>            }<br>        }<br>        <span class="hljs-comment">// 若未找到 key ，则返回空字符串</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>    }<br><br>    <span class="hljs-comment">/* 添加操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, string val)</span> </span>{<br>        <span class="hljs-comment">// 当负载因子超过阈值时，执行扩容</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">loadFactor</span>() &gt; loadThres) {<br>            <span class="hljs-built_in">extend</span>();<br>        }<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        <span class="hljs-comment">// 遍历桶，若遇到指定 key ，则更新对应 val 并返回</span><br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets[index]) {<br>            <span class="hljs-keyword">if</span> (pair-&gt;key == key) {<br>                pair-&gt;val = val;<br>                <span class="hljs-keyword">return</span>;<br>            }<br>        }<br>        <span class="hljs-comment">// 若无该 key ，则将键值对添加至尾部</span><br>        buckets[index].<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Pair</span>(key, val));<br>        size++;<br>    }<br><br>    <span class="hljs-comment">/* 删除操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>{<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        <span class="hljs-keyword">auto</span> &amp;bucket = buckets[index];<br>        <span class="hljs-comment">// 遍历桶，从中删除键值对</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; bucket.<span class="hljs-built_in">size</span>(); i++) {<br>            <span class="hljs-keyword">if</span> (bucket[i]-&gt;key == key) {<br>                Pair *tmp = bucket[i];<br>                bucket.<span class="hljs-built_in">erase</span>(bucket.<span class="hljs-built_in">begin</span>() + i); <span class="hljs-comment">// 从中删除键值对</span><br>                <span class="hljs-keyword">delete</span> tmp;                       <span class="hljs-comment">// 释放内存</span><br>                size--;<br>                <span class="hljs-keyword">return</span>;<br>            }<br>        }<br>    }<br><br>    <span class="hljs-comment">/* 扩容哈希表 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">extend</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-comment">// 暂存原哈希表</span><br>        vector&lt;vector&lt;Pair *&gt;&gt; bucketsTmp = buckets;<br>        <span class="hljs-comment">// 初始化扩容后的新哈希表</span><br>        capacity *= extendRatio;<br>        buckets.<span class="hljs-built_in">clear</span>();<br>        buckets.<span class="hljs-built_in">resize</span>(capacity);<br>        size = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 将键值对从原哈希表搬运至新哈希表</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;bucket : bucketsTmp) {<br>            <span class="hljs-keyword">for</span> (Pair *pair : bucket) {<br>                <span class="hljs-built_in">put</span>(pair-&gt;key, pair-&gt;val);<br>                <span class="hljs-comment">// 释放内存</span><br>                <span class="hljs-keyword">delete</span> pair;<br>            }<br>        }<br>    }<br><br>    <span class="hljs-comment">/* 打印哈希表 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;bucket : buckets) {<br>            cout &lt;&lt; <span class="hljs-string">"["</span>;<br>            <span class="hljs-keyword">for</span> (Pair *pair : bucket) {<br>                cout &lt;&lt; pair-&gt;key &lt;&lt; <span class="hljs-string">" -&gt; "</span> &lt;&lt; pair-&gt;val &lt;&lt; <span class="hljs-string">", "</span>;<br>            }<br>            cout &lt;&lt; <span class="hljs-string">"]\n"</span>;<br>        }<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h4 id="开放寻址">开放寻址</h4><p>开放寻址（open addressing）不引入额外的数据结构，而是通过“多次探测”来处理哈希冲突，探测方式主要包括<strong>线性探测</strong>、<strong>平方探测</strong>和<strong>多次哈希</strong>等。</p><ol><li><strong>线性探测</strong></li></ol><p>  通过哈希函数计算桶索引，若发现桶内已有元素，则<strong>从冲突位置向后线性遍历</strong>（步长通常为1，<strong>固定步长索引</strong>），直至找到空桶（none）/目标元素。</p><p>  然而，线性探测容易产生“<strong>聚集现象</strong>”。具体来说，<strong>数组中连续被占用的位置越长</strong>，这些连续位置<strong>发生哈希冲突的可能性越大</strong>，从而进一步促使该位置的聚堆生长，形成恶性循环，最终导致增删查改操作<strong>效率劣化</strong>。</p><hr><ol start="2"><li><strong>平方探测</strong><br>  平方探测与线性探测类似，都是开放寻址的常见策略之一。当发生冲突时，平方探测<strong>不是简单地跳过一个固定的步数</strong>，而是跳过“<strong>探测次数的平方</strong>”的步数，即1、4、9…步。</li></ol><div class="note note-info">            <p><strong>Advantages</strong></p><ul><li>平方探测通过跳过探测次数平方的距离，试图<strong>缓解线性探测的聚集效应</strong>。</li><li>平方探测会跳过更大的距离来寻找空位置，有助于<strong>数据分布得更加均匀</strong>。</li></ul>          </div><div class="note note-info">            <p><strong>Limitations</strong></p><ul><li><strong>仍然存在聚集现象</strong>，即某些位置比其他位置更容易被占用。</li><li>由于平方的增长，平方探测可能不会探测整个哈希表，这意味着即使哈希表中有空桶，平方探测也可能<strong>无法访问</strong>到它。</li></ul>          </div><hr><ol start="3"><li><strong>多次哈希</strong><br>顾名思义，多次哈希方法<strong>使用多个哈希函数</strong> $f(x),g(x),k(x)$ 进行探测。</li></ol><hr><div class="note note-danger">            <p>⚠️注意：<strong>开放寻址</strong>哈希表都存在“<strong>不能直接删除元素</strong>”的问题。</p><p>  这是因为删除元素会在数组内产生一个空桶<code>None</code>，而当查询元素时，线性探测到该空桶就会返回，因此在<strong>该空桶之下的元素都无法再被访问到</strong>，程序可能<strong>误判这些元素不存在</strong>。</p><p>  为了解决该问题，我们可以采用<strong>懒删除机制</strong>：它不直接从哈希表中移除元素，而是利用一个常量<code>TOMBSTONE</code>来标记这个桶。在该机制下，<code>None</code>和<code>TOMBSTONE</code>都代表空桶，都可以放置键值对。但不同的是，线性探测到<code>TOMBSTONE</code>时应该<strong>继续遍历</strong>，因为其之下可能还存在键值对。</p><p>  然而，懒删除可能会加速哈希表的性能退化。这是因为每次删除操作都会产生一个删除标记，随着<code>TOMBSTONE</code>的增加，搜索时间也会增加，因为线性探测可能需要跳过多个<code>TOMBSTONE</code>才能找到目标元素。</p><p>  为此，考虑在线性探测中记录遇到的首个<code>TOMBSTONE</code>的索引，并将搜索到的目标元素与该<code>TOMBSTONE</code>交换位置。这样做的好处是当每次查询或添加元素时，元素会被移动至距离理想位置（探测起始点）更近的桶，从而<strong>优化查询效率</strong>。</p>          </div><hr><h3 id="哈希扩容">哈希扩容</h3><p>  哈希表容量越大，多个 key 被分配到同一个桶中的概率就越低，冲突就越少。因此，我们可以通过扩容哈希表来减少哈希冲突。</p><ul><li><strong>类似于数组扩容</strong>，哈希表扩容需将所有键值对从原哈希表迁移至新哈希表，非常耗时</li><li>哈希表容量 capacity 改变，我们需要通过哈希函数来<strong>重新计算所有键值对的存储位置</strong>，这进一步增加了扩容过程的计算开销</li></ul><p>为此，编程语言通常会预留足够大的哈希表容量，防止频繁扩容。</p><p>  <strong>负载因子</strong>（load factor）是哈希表的一个重要概念，其定义为<strong>哈希表的元素数量除以桶数量</strong>，用于<strong>衡量哈希冲突的严重程度</strong>，也常作为哈希表扩容的触发条件。例如，当负载因子超过 0.75 时，我们可以考虑扩容哈希表。</p><h3 id="哈希算法">哈希算法</h3><p>  前面的方法只能处理哈希冲突，并不能从<strong>本质上</strong>减少哈希冲突。如果哈希冲突<strong>过于频繁</strong>，哈希表的性能则会急剧劣化。对于链式地址哈希表，理想情况下<strong>键值对均匀分布</strong>在各个桶中，达到最佳查询效率；最差情况下所有键值对<strong>都存储到同一个桶中</strong>，时间复杂度退化至$O(n)$。</p><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/DataStructure/condition.png?raw=true" alt="链式存储最好最坏情况"></p><p>我们制定出的哈希算法应达到以下目标：</p><ul><li><strong>确定性</strong>：对于相同的输入，哈希算法应<strong>始终产生相同的输出</strong>。这样才能确保哈希表是可靠的。</li><li><strong>效率高</strong>：计算哈希值的过程应该<strong>足够快</strong>。<strong>计算开销越小</strong>，哈希表的<strong>实用性越高</strong>。</li><li><strong>均匀分布</strong>：哈希算法应使得<strong>键值对均匀分布在哈希表</strong>中。分布越均匀，哈希冲突的概率就越低。</li></ul>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-dfa96ec5" role="button" aria-expanded="false" aria-controls="collapse-dfa96ec5">        <div class="fold-arrow">▶</div>为什么不使用哈希函数$f(x)=x$呢？这样就不会有冲突了！      </div>      <div class="fold-collapse collapse" id="collapse-dfa96ec5">        <div class="fold-content">          <p>在 $f(x)=x$ 哈希函数下，每个元素对应唯一的桶索引，这与数组等价。然而给定的数据空间是未知的，如果数据范围较为稀疏如学号12592、16754，那么数组的绝大部分空间都将被闲置，导致空间复杂度急剧上升。并且我们的目标是在有限的数组范围内存储较大数量的键值，也就是将一个较大的状态空间映射到一个较小的空间。</p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode Mistake Collection 1</title>
    <link href="/2025/08/26/Leetcode-Collection/Leetcode-Mistake-Collection-1/"/>
    <url>/2025/08/26/Leetcode-Collection/Leetcode-Mistake-Collection-1/</url>
    
    <content type="html"><![CDATA[<p>由于cpp基础并不扎实，因而打算分类刷题，在此过程中对基本语法与STL修修补补!</p><h2 id="Reference">Reference:</h2><p><a href="https://github.com/CyC2018/CS-Notes">CS-Notes</a></p><p><a href="https://blog.csdn.net/fengyuyeguirenenen/article/details/125099023?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=125099023&amp;sharerefer=PC&amp;sharesource=m0_53058983&amp;sharefrom=from_link">LeetCode 刷题顺序，按标签分类，科学刷题！</a></p><p><a href="https://books.halfrost.com/leetcode/">LeetCode Cookbook</a></p><h2 id="Leetcode-628-三个数的最大乘积">Leetcode 628.三个数的最大乘积</h2><p><a href="https://leetcode.cn/problems/maximum-product-of-three-numbers/solutions/567309/san-ge-shu-de-zui-da-cheng-ji-by-leetcod-t9sb/">原题链接</a></p>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-c2f87d95" role="button" aria-expanded="false" aria-controls="collapse-c2f87d95">        <div class="fold-arrow">▶</div> Time Error Version <span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>      </div>      <div class="fold-collapse collapse" id="collapse-c2f87d95">        <div class="fold-content">          <p>一开始无脑遍历所有组合，显然时间复杂度是$O(n^3)$，会超时！</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumProduct</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> max=INT_MIN;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;n;j++){<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=j<span class="hljs-number">+1</span>;k&lt;n;k++){<br>                    <span class="hljs-type">int</span> mul=nums[i]*nums[j]*nums[k];<br>                    <span class="hljs-keyword">if</span>(mul&gt;max){<br>                        max=mul;<br>                    }<br>                }<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> max;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><p>我们这里考虑使用数学方法：</p><ul><li>数组<strong>均为正数</strong>，乘积最大即为<strong>最大三个正数相乘</strong></li><li>数组<strong>均为负数</strong>，乘积最大即为<strong>最大三个负数相乘</strong></li><li>数组<strong>有正有负</strong><ul><li><strong>两个负数与一个正数相乘</strong></li><li><strong>三个最大正数相乘</strong></li></ul></li></ul><p>我们可以先将数组<strong>排序</strong>，然后分情况讨论：</p><ul><li>1、2、4都取最大的三个数</li><li>3取最小的两个负数（数组首端）与最大的一个正数（数组尾端）</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumProduct</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>]*nums[<span class="hljs-number">1</span>]*nums[n<span class="hljs-number">-1</span>],nums[n<span class="hljs-number">-3</span>]*nums[n<span class="hljs-number">-2</span>]*nums[n<span class="hljs-number">-1</span>]);<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="Leetcode-645-错误的集合">Leetcode 645.错误的集合</h2><p><a href="https://leetcode.cn/problems/set-mismatch">原题链接</a></p>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-af06c644" role="button" aria-expanded="false" aria-controls="collapse-af06c644">        <div class="fold-arrow">▶</div> Error Version <span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>      </div>      <div class="fold-collapse collapse" id="collapse-af06c644">        <div class="fold-content">          <p>需要注意题目要求的数组中数字的<strong>顺序</strong>，若是使用<code>if</code>，则先找到谁会先输出谁！</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findErrorNums</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        vector &lt;<span class="hljs-type">int</span>&gt; vec;<br>        unordered_map &lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; error;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it:nums){<br>            error[it]++;<br>        }<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br>            <span class="hljs-type">int</span> count=error[i];<br>            <span class="hljs-keyword">if</span>(count==<span class="hljs-number">2</span>){<br>                vec.<span class="hljs-built_in">push_back</span>(i);<br>            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>){<br>                vec.<span class="hljs-built_in">push_back</span>(i);<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> vec;<br>    }<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><p>这里采用<strong>哈希表法</strong></p><ul><li><strong>重复的数字</strong>在数组中出现<strong>2次</strong></li><li><strong>丢失的数字</strong>在数组中出现<strong>0次</strong></li><li>其余的每个数字在数组中出现<strong>1次</strong></li></ul><p>因此可以使用<strong>哈希表</strong>记录每个元素在数组中出现的次数，然后遍历从1到n的每个数字，分别找到出现2次和出现0次的数字，即为重复的数字和丢失的数字。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findErrorNums</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">vec</span>(<span class="hljs-number">2</span>);<br>        unordered_map &lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; error;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it:nums){<br>            error[it]++;<br>        }<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br>            <span class="hljs-type">int</span> count=error[i];<br>            <span class="hljs-keyword">if</span>(count==<span class="hljs-number">2</span>){<br>                vec[<span class="hljs-number">0</span>]=i;<br>            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>){<br>                 vec[<span class="hljs-number">1</span>]=i;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> vec;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><p>访问一个尚未在 map 中的键：</p><ol><li>在 map 中<strong>创建</strong>一个键为 it 的新元素。</li><li>对这个新元素的值进行<strong>值初始化</strong>。对于 int 类型，值初始化就是将其初始化为 0。</li><li>然后对这个<strong>新初始化的值</strong>执行操作。</li></ol><h2 id="Leetcode-448-找到数组中消失的数字">Leetcode 448.找到数组中消失的数字</h2><p><a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array">原题链接</a></p>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-cbd6109f" role="button" aria-expanded="false" aria-controls="collapse-cbd6109f">        <div class="fold-arrow">▶</div> Error Version <span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>      </div>      <div class="fold-collapse collapse" id="collapse-cbd6109f">        <div class="fold-content">          <p>企图使用键key和值val相配对的方式<strong>找到缺失数字</strong>，但是又包含<strong>重复数字</strong>，意图使用键值大小比较，另设<code>extra</code>进行<strong>偏移量调整</strong>，但是使用<code>auto</code>迭代器，<strong>索引无法完成补偿</strong>，且代码过于冗余，遂放弃！</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findDisappearedNumbers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        unordered_map &lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; arr;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br>            arr[i]=nums[i<span class="hljs-number">-1</span>];<br>        }<br>        vector &lt;<span class="hljs-type">int</span>&gt; vec;<br>        <span class="hljs-type">int</span> extra=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it:arr){<br>            <span class="hljs-keyword">if</span>((it+extra).first&gt;it.second){<br>                extra--;<br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((it+extra).first&lt;it.second){<br>                extra++;<br>                vec.<span class="hljs-built_in">push_back</span>((--it.second)<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> vec;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findDisappearedNumbers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        unordered_map &lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt; arr;<br>        vector &lt;<span class="hljs-type">int</span>&gt; vec;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it:nums){<br>            arr[it]=<span class="hljs-literal">true</span>;<br>        }<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br>            <span class="hljs-keyword">if</span>(arr.<span class="hljs-built_in">find</span>(i)==arr.<span class="hljs-built_in">end</span>()){<br>                vec.<span class="hljs-built_in">push_back</span>(i);<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> vec;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><p>采用哈希表<code>&lt;int,bool&gt;</code>，对<strong>数组进行遍历</strong></p><ul><li><strong>整型记录数字</strong>（索引）</li><li><strong>布尔型记录数字是否出现</strong></li></ul><h2 id="Leetcode-274-H指数">Leetcode 274.H指数</h2><p><a href="https://leetcode.cn/problems/h-index">原题链接</a></p>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-0927e85d" role="button" aria-expanded="false" aria-controls="collapse-0927e85d">        <div class="fold-arrow">▶</div> Error Version <span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>      </div>      <div class="fold-collapse collapse" id="collapse-0927e85d">        <div class="fold-content">          <p>想先排序，再按照<code>citations[i]</code>的值与<code>index</code><strong>数组索引值</strong>（计算&gt;的至少有多少篇），但未考虑到若是<code>4、4、4</code>这样分布，H指数未必是数组中的数字。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hIndex</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; citations)</span> </span>{<br>        <span class="hljs-type">int</span> n=citations.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">sort</span>(citations.<span class="hljs-built_in">begin</span>(),citations.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> index;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++){<br>            <span class="hljs-keyword">if</span>(n-i&gt;=citations[i]){<br>                index=citations[i];<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> index;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><p>考虑到H指数的指标是固定不变的，因而排序后我们采用<strong>从大到小的遍历方式</strong>。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hIndex</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; citations)</span> </span>{<br>        <span class="hljs-type">int</span> n=citations.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">sort</span>(citations.<span class="hljs-built_in">begin</span>(),citations.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> h=<span class="hljs-number">0</span>,i=citations.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; citations[i]&gt;h){<br>            i--;<br>            h++;<br>        }<br>        <span class="hljs-keyword">return</span> h;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="Leetcode-283-移动零">Leetcode 283.移动零</h2><p><a href="https://leetcode.cn/problems/move-zeroes">原题链接</a></p>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-b977da26" role="button" aria-expanded="false" aria-controls="collapse-b977da26">        <div class="fold-arrow">▶</div> Error Version <span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>      </div>      <div class="fold-collapse collapse" id="collapse-b977da26">        <div class="fold-content">          <p>未考虑<strong>连续0</strong>的情况</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++){<br>            <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>){<br>                count++;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;n<span class="hljs-number">-1</span>;j++){<br>                    nums[j]=nums[j<span class="hljs-number">+1</span>];<br>                }<br>            }<br>        }<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n-count;i&lt;n;i++){<br>            nums[i]=<span class="hljs-number">0</span>;<br>        }<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="双指针">双指针</h3><ul><li><strong>左指针</strong>：指向<strong>已处理好的序列的末端</strong></li><li><strong>右指针</strong>：指向<strong>未处理的序列的起始位置</strong></li></ul><ol><li>右指针左边到左指针之间均为0</li><li>左指针<strong>左侧均为非零数</strong></li></ol><p>左右指针均从<code>index</code>索引<strong>0位置出发</strong>：</p><ul><li>若为0，右指针右移，左指针不动（相当于标记0位置）</li><li>若不为0，<strong>交换</strong>左右指针指向的元素，均向右移动</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class="hljs-type">int</span> right=<span class="hljs-number">0</span>,left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(right&lt;n){<br>            <span class="hljs-keyword">if</span>(nums[right]){<br>                <span class="hljs-built_in">swap</span>(nums[left],nums[right]);<br>                left++;<br>            }<br>            right++;<br>        }<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="Leetcode-118-杨辉三角-119-杨辉三角ii">Leetcode 118.杨辉三角 + 119.杨辉三角ii</h2><p><a href="https://leetcode.cn/problems/pascals-triangle">原题链接</a><br><a href="https://leetcode.cn/problems/pascals-triangle-ii">原题链接</a></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generate</span>(<span class="hljs-type">int</span> numRows) {<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">vec</span>(numRows);<span class="hljs-comment">//初始化杨辉三角行数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numRows;i++){<br>            vec[i].<span class="hljs-built_in">resize</span>(i<span class="hljs-number">+1</span>);<span class="hljs-comment">//初始化杨辉三角每列元素个数 第i行有i+1个元素</span><br>            vec[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化杨辉三角每列第一个元素为1</span><br>            vec[i][i]=<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化杨辉三角每列最后一个元素为1</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++){<br>                vec[i][j]=vec[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+vec[i<span class="hljs-number">-1</span>][j];<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> vec;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="优化一：滚动数组">优化一：滚动数组</h3><p>当我们只需要求杨辉三角的<code>rowIndex</code>行时，发现对第<code>i+1</code>行的计算仅用到了第<code>i</code>行的数据,因而可以通过<strong>滚动数组只保留当前行和上一行</strong>的元素，而不需要<strong>更早的元素</strong>。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-type">int</span> rowIndex)</span> </span>{<br>        vector &lt;<span class="hljs-type">int</span>&gt; pre,cur;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=rowIndex;i++){<br>            cur.<span class="hljs-built_in">resize</span>(i<span class="hljs-number">+1</span>);<br>            cur[<span class="hljs-number">0</span>]=cur[i]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++){<br>                cur[j]=pre[j<span class="hljs-number">-1</span>]+pre[j];<br>            }<br>            pre=cur;<br>        }<br>        <span class="hljs-keyword">return</span> pre;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="优化二：单一数组逆序更新">优化二：单一数组逆序更新</h3><p>滚动数组的优化，将<strong>当前行</strong>的元素<strong>逆序更新</strong>到<strong>上一行</strong>，从而<strong>不需要保存当前行</strong>，原本的<strong>两数相加</strong>在<strong>同一数组</strong>中每次仅需要加一次即可！。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-type">int</span> rowIndex)</span> </span>{<br>        vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">row</span>(rowIndex<span class="hljs-number">+1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=rowIndex;i++){<br>            row[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&gt;<span class="hljs-number">0</span>;j--){<br>                row[j]+=row[j<span class="hljs-number">-1</span>];<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> row;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="Leetcode-14-最长公共前缀">Leetcode 14.最长公共前缀</h2><p><a href="https://leetcode.cn/problems/longest-common-prefix">原题链接</a></p><h3 id="方法一：横向扫描">方法一：横向扫描</h3><ol><li>获取数组中第一个字符串作为<strong>最长公共前缀</strong></li><li><strong>遍历数组</strong>中的每个字符串，与<strong>最长公共前缀</strong>进行<strong>公共前缀</strong>的比较，更新<strong>最长公共前缀</strong></li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>{<br>        <span class="hljs-type">int</span> n=strs.<span class="hljs-built_in">size</span>();<br>        string prefix=strs[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++){<br>            prefix=<span class="hljs-built_in">CommonPrefix</span>(prefix,strs[i]);<br>        }<br>        <span class="hljs-keyword">return</span> prefix;<br>    }<br>    <span class="hljs-function">string <span class="hljs-title">CommonPrefix</span><span class="hljs-params">(string s1,string s2)</span></span>{<br>        <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">min</span>(s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(),s<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>());i++){<br>            <span class="hljs-keyword">if</span>(s1[i]!=s2[i]){<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            index++;<br>        }<br>        <span class="hljs-keyword">return</span> s<span class="hljs-number">1.</span><span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,index);<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="方法二：纵向扫描">方法二：纵向扫描</h3><ol><li><strong>遍历数组</strong>，<strong>依次比较</strong>每个字符串第1、2、3…个字符</li><li>返回最长前缀：</li></ol><ul><li>若有字符串的第<code>i</code>个字符不同，则<strong>最长公共前缀</strong>的长度为<code>i-1</code></li><li>若字符串的长度小于<code>i</code>，则<strong>最长公共前缀</strong>的长度为<code>i</code></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>{<br>        <span class="hljs-type">int</span> n=strs.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> count=strs[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;count;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;n;j++){<br>                <span class="hljs-keyword">if</span>( i==strs[j].<span class="hljs-built_in">size</span>() || strs[j][i]!=strs[<span class="hljs-number">0</span>][i]){<br>                    <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>].<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,i);<br>                }<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="方法三：分治">方法三：分治</h3><h3 id="方法四：二分查找">方法四：二分查找</h3><h2 id="Leetcode-470-用-Rand7-实现-Rand10">Leetcode 470.用 Rand7() 实现 Rand10()</h2><p><a href="https://leetcode.cn/problems/implement-rand10-using-rand7">原题链接</a></p>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-e2498296" role="button" aria-expanded="false" aria-controls="collapse-e2498296">        <div class="fold-arrow">▶</div> Error Version <span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>      </div>      <div class="fold-collapse collapse" id="collapse-e2498296">        <div class="fold-content">          <figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rand10</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> first,second;<br>        <span class="hljs-keyword">while</span>(first=<span class="hljs-built_in">rand7</span>()&gt;<span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">while</span>(second=<span class="hljs-built_in">rand7</span>()&gt;<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> (first&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>? second:<span class="hljs-number">5</span>+second;<br>}<br></code></pre></td></tr></tbody></table></figure><p>该答案第5、6行缺失括号而导致错误！</p><h4 id="第一种错误版本">第一种错误版本</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(first=<span class="hljs-built_in">rand7</span>()&gt;<span class="hljs-number">6</span>);<br><span class="hljs-keyword">while</span>(second=<span class="hljs-built_in">rand7</span>()&gt;<span class="hljs-number">5</span>);<br></code></pre></td></tr></tbody></table></figure><p>这里由于运算符优先级（比较运算符 &gt; 高于赋值运算符 =），实际执行顺序是：</p><ul><li>先计算<code>rand7()&gt;6</code>的布尔结果（<code>true</code> 或 <code>false</code>，即 1 或 0）</li><li>将这个布尔结果赋值给 <code>first</code> 变量</li><li>循环条件永远是 1 或 0，导致逻辑错误</li></ul><h4 id="第二种正确版本">第二种正确版本</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>((first=<span class="hljs-built_in">rand7</span>())&gt;<span class="hljs-number">6</span>);<br><span class="hljs-keyword">while</span>((second=<span class="hljs-built_in">rand7</span>())&gt;<span class="hljs-number">5</span>);<br></code></pre></td></tr></tbody></table></figure><ul><li>调用 <code>rand7 ()</code> 生成随机数</li><li>将结果赋值给 <code>first</code> 变量</li><li>检查该值是否大于 6</li></ul>        </div>      </div>    </div><p>这道题的目的是使用<code>rand7()</code>产生10个不同但<strong>概率相等</strong>的数</p><h3 id="方法一：拒绝采样">方法一：拒绝采样</h3><ol><li>首先<strong>生成1-49的均匀随机数</strong>：❗<code>(rand7()-1)*7 + rand7()</code>❗</li><li>拒绝41-49的样本（保持1-40的<strong>均匀分布</strong>）</li><li>对结果取模+1，得到1-10的<strong>均匀随机数</strong></li></ol>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-e761341d" role="button" aria-expanded="false" aria-controls="collapse-e761341d">        <div class="fold-arrow">▶</div> 为什么这样生成采样样本？      </div>      <div class="fold-collapse collapse" id="collapse-e761341d">        <div class="fold-content">          <p>1.<code>rand7()-1</code>生成 0~6<br>2.<code>(rand7()-1)*7</code>生成 0、7、14、21、28、35、42<br>3.<code>(rand7()-1)*7 + rand7()</code>生成 1~49<br><strong>无重复数字</strong>，每个数字出现的<strong>概率均相同</strong>是1/49</p>        </div>      </div>    </div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rand10</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> num;<br>        <span class="hljs-keyword">while</span>((num=(<span class="hljs-built_in">rand7</span>()<span class="hljs-number">-1</span>)*<span class="hljs-number">7</span>+<span class="hljs-built_in">rand7</span>())&gt;<span class="hljs-number">40</span>);<br>        <span class="hljs-keyword">return</span> num%<span class="hljs-number">10</span><span class="hljs-number">+1</span>;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="方法二：古典概型">方法二：古典概型</h3><ol><li>第一次<code>rand7</code>限定[1,6]，<strong>判断奇偶性</strong>，概率是1/2</li><li>第二次<code>rand7</code>限定[1,5]，概率是1/5</li><li>二者结合可以得出10种概率相同的结果</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rand10</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> first,second;<br>        <span class="hljs-keyword">while</span>((first=<span class="hljs-built_in">rand7</span>())&gt;<span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">while</span>((second=<span class="hljs-built_in">rand7</span>())&gt;<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> (first&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>? second:<span class="hljs-number">5</span>+second;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="位运算符">位运算符</h4><ul><li><strong>按位与（&amp;）</strong>：对两个操作数的每一位进行比较，只有当两位都为 1 时结果对应位才为 1，否则为 0。<br>示例：3 &amp; 5（二进制 011 &amp; 101）结果为 1（二进制 001）。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">return</span> x &amp; <span class="hljs-number">1</span>; <span class="hljs-comment">// 结果为1则奇数，0则偶数</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><strong>按位或（|）</strong>：对两个操作数的每一位进行比较，只要其中一位为 1，结果对应位就为 1，否则为 0。<br>示例：3 | 5（二进制 011 | 101）结果为 7（二进制 111）。</li><li><strong>按位异或（^）</strong>：对两个操作数的每一位进行比较，当两位不同时结果为 1，相同时为 0。<br>示例：3 ^ 5（二进制 011 ^ 101）结果为 6（二进制 110）。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>{<br>    <span class="hljs-keyword">if</span> (a != b) { <span class="hljs-comment">// 避免a和b同地址时出错</span><br>        a = a ^ b; <span class="hljs-comment">// a现在是a^b</span><br>        b = a ^ b; <span class="hljs-comment">// b = (a^b)^b = a</span><br>        a = a ^ b; <span class="hljs-comment">// a = (a^b)^a = b</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><strong>按位非（~）</strong>：对单个操作数的<strong>每一位取反</strong>（0 变 1，1 变 0），是一元运算符。<br>示例：~3（二进制 ~011）在 32 位系统中结果为 -4（二进制补码表示）。</li><li><strong>左移（&lt;&lt;）</strong>：将左操作数的<strong>二进制位向左移动指定的位数</strong>，右侧空位补 0。<br>示例：3 &lt;&lt; 1（二进制 011 &lt;&lt; 1）结果为 6（二进制 110），相当于<strong>乘以 2 的 n 次方</strong>（n 为移动位数）。</li><li><strong>右移（&gt;&gt;）</strong>：将左操作数的<strong>二进制位向右移动指定的位数</strong>，左侧空位补符号位（正数补 0，负数补 1）。<br>示例：6 &gt;&gt; 1（二进制 110 &gt;&gt; 1）结果为 3（二进制 011），相当于<strong>除以 2 的 n 次方</strong>（向下取整）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode Mistake Collection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>updating</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda Expression in CPP</title>
    <link href="/2025/08/25/CPP/Lambda-Expression-in-CPP/"/>
    <url>/2025/08/25/CPP/Lambda-Expression-in-CPP/</url>
    
    <content type="html"><![CDATA[<h2 id="What’s-Lambda-Expression">What’s Lambda Expression?</h2><p><code>Lambda</code> 表达式是 C++11 标准引入的一种用于<strong>创建匿名函数对象</strong>的强大特性。它允许你在需要函数的地方内联地定义函数，而无需单独命名和定义函数或函数对象，这使得代码<strong>更简洁</strong>、<strong>更易读</strong>，尤其在使用 STL 算法时。</p><h2 id="Basic-Syntax">Basic Syntax</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[ 捕获列表 ] ( 参数列表 ) -&gt; 返回类型 {<br>    <span class="hljs-comment">// 函数体</span><br>}<br></code></pre></td></tr></tbody></table></figure><ol><li>捕获列表 (Capture Clause) [ ]<br>这是 <code>Lambda</code> 表达式的开端，也是它最独特和强大的部分。它定义了<code>Lambda</code>函数体中可以访问的外部作用域中的变量及其访问方式。</li></ol><div class="note note-info">            <ul><li>[] ：<strong>空捕获列表</strong>，表示不捕获任何外部变量。</li><li>[=] ：以<strong>值捕获</strong>的方式捕获<strong>所有外部变量</strong>。<code>Lambda</code> 体内使用的是这些变量的副本，修改副本不会影响外部变量。</li><li>[&amp;] ：以<strong>引用捕获</strong>的方式捕获<strong>所有外部变量</strong>。<code>Lambda</code> 体内使用的是这些变量本身，修改它们会影响外部变量。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>,y =<span class="hljs-number">5</span>;<br><span class="hljs-keyword">auto</span> f = [=]() { <span class="hljs-keyword">return</span> x + y; };  <span class="hljs-comment">// 按值捕获所有变量</span><br><span class="hljs-keyword">auto</span> g = [&amp;]() { x += y; };        <span class="hljs-comment">// 按引用捕获所有变量</span><br></code></pre></td></tr></tbody></table></figure><ul><li>[var] ：仅以<strong>值捕获</strong>的方式捕获<strong>特定变量</strong> var。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> f=[x]() -&gt; <span class="hljs-type">int</span>{ <span class="hljs-comment">//按值捕获x</span><br>    <span class="hljs-keyword">return</span> x<span class="hljs-number">+1</span>;<br>};<br>std::cout&lt;&lt;<span class="hljs-built_in">f</span>(); <span class="hljs-comment">//输出11，x的值为10未改变</span><br></code></pre></td></tr></tbody></table></figure><ul><li>[&amp;var] ：仅以<strong>引用捕获</strong>的方式捕获<strong>特定变量</strong> var。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> f = [&amp;x]() { x += <span class="hljs-number">1</span>; };<br><span class="hljs-built_in">f</span>();<br>std::cout &lt;&lt; x;  <span class="hljs-comment">// 输出11，x被修改</span><br></code></pre></td></tr></tbody></table></figure><ul><li>混合捕获：可以<strong>组合使用</strong>，例如 [=, &amp;x] 表示以值捕获所有外部变量，但变量 x 除外，它以引用方式捕获。[&amp;, x] 则表示以引用捕获所有外部变量，但变量 x 以值方式捕获。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>, y = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">auto</span> f = [x, &amp;y]() { <br>    y+=x;<br>    <span class="hljs-keyword">return</span> x + y; <br>};  <span class="hljs-comment">// x按值，y按引用</span><br>    std::cout &lt;&lt; <span class="hljs-built_in">f</span>();<br></code></pre></td></tr></tbody></table></figure>          </div><ol start="2"><li>参数列表 (Parameter List) ( )</li><li>返回类型 (Return Type) -&gt; return_type</li></ol><div class="note note-info">            <p>可以显式地使用 <code>-&gt;</code> 后缀语法来指定 <code>Lambda</code> 的返回类型。在大多数情况下，编译器可以<strong>自动推导出返回类型</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 自动推导返回类型为 int</span><br><span class="hljs-keyword">auto</span> simple = [](<span class="hljs-type">int</span> x) { <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>; };<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 显式指定返回类型为 double（即使 x 是 int）</span><br><span class="hljs-keyword">auto</span> explicit_return = [](<span class="hljs-type">int</span> x) -&gt; <span class="hljs-type">double</span> { <span class="hljs-keyword">return</span> x * <span class="hljs-number">2.5</span>; };<br></code></pre></td></tr></tbody></table></figure><p>当函数体包含<strong>多个返回语句且类型不同</strong>，或者返回语句过于复杂编译器无法推导时，需要<strong>显式指定</strong>。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 需要显式指定返回类型的例子：多个返回语句</span><br><span class="hljs-comment">// auto ambiguous = [](bool test) {</span><br><span class="hljs-comment">//     if (test) return 10; // 返回 int</span><br><span class="hljs-comment">//     else return 20.0;    // 返回 double -&gt; 错误！编译器无法推导</span><br><span class="hljs-comment">// };</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> fixed = [](<span class="hljs-type">bool</span> test) -&gt; <span class="hljs-type">double</span> { <span class="hljs-comment">// 显式指定为 double</span><br>    <span class="hljs-keyword">if</span> (test) <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// int 可隐式转换为 double</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">20.0</span>;<br>};<br></code></pre></td></tr></tbody></table></figure>          </div><ol start="4"><li>函数体 (Body) { }<br>和普通函数一样，包含了 <code>Lambda</code> 被调用时要执行的代码。</li></ol><h2 id="Application">Application</h2><ol><li>与 STL 算法配合使用<br>简单的说就是STL算法用来<strong>遍历容器</strong>，使用<code>Lambda</code>表达式设定<strong>特定的程序</strong>，来处理不同的任务！</li></ol><div class="note note-info">            <h3 id="std-sort-自定义排序规则"><code>std::sort</code> 自定义排序规则</h3><h4 id="方法1：使用默认排序（升序）">方法1：使用默认排序（升序）</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; numbers = {<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>};<br>std::<span class="hljs-built_in">sort</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">// numbers 变为 {1, 2, 4, 5, 8}</span><br></code></pre></td></tr></tbody></table></figure><h4 id="方法2：使用函数指针（传统方式，不推荐）">方法2：使用函数指针（传统方式，不推荐）</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 传统方式：定义一个独立的比较函数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compareDescending</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>{<br>    <span class="hljs-keyword">return</span> a &gt; b; <span class="hljs-comment">// 如果a大于b，返回true，这样a就会排在b前面</span><br>}<br>    std::<span class="hljs-built_in">sort</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(), compareDescending);<br><span class="hljs-comment">// numbers 变为 {8, 5, 4, 2, 1}</span><br></code></pre></td></tr></tbody></table></figure><h4 id="方法3：使用Lambda表达式（现代方式，推荐！）">方法3：使用Lambda表达式（现代方式，推荐！）</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 语法：std::sort(开始迭代器, 结束迭代器, [](参数){ 比较逻辑 });</span><br>    std::<span class="hljs-built_in">sort</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(),<br>              [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) {<br>                  <span class="hljs-keyword">return</span> a &lt; b; <span class="hljs-comment">// 升序排序</span><br>              });<br><br>    std::<span class="hljs-built_in">sort</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(),<br>              [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) {<br>                  <span class="hljs-keyword">return</span> a &gt; b; <span class="hljs-comment">// 降序排序</span><br>              });<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 更复杂的排序规则：按奇偶性排，偶数在前，奇数在后，各自内部从小到大</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; mixed = {<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>};<br>std::<span class="hljs-built_in">sort</span>(mixed.<span class="hljs-built_in">begin</span>(), mixed.<span class="hljs-built_in">end</span>(),<br>          [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) {<br>              <span class="hljs-keyword">if</span> (a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; b % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">// a是偶数，b是奇数 -&gt; a在前</span><br>              <span class="hljs-keyword">if</span> (a % <span class="hljs-number">2</span> != <span class="hljs-number">0</span> &amp;&amp; b % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// a是奇数，b是偶数 -&gt; b在前</span><br>              <span class="hljs-keyword">return</span> a &lt; b; <span class="hljs-comment">// 同为奇数或同为偶数，数值小的在前</span><br>          });<br><span class="hljs-comment">// mixed 变为 {2, 6, 8, 1, 3, 7}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="std-for-each-对每个元素执行操作"><code>std::for_each</code> 对每个元素执行操作</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;std::string&gt; words = {<span class="hljs-string">"apple"</span>, <span class="hljs-string">"banana"</span>, <span class="hljs-string">"cherry"</span>, <span class="hljs-string">"date"</span>};<br><span class="hljs-comment">// 传统for循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; word : words) {<br>    std::cout &lt;&lt; word &lt;&lt; <span class="hljs-string">" "</span>;<br>}<br>std::cout &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 使用 std::for_each + Lambda</span><br><span class="hljs-comment">// 语法：std::for_each(开始迭代器, 结束迭代器, [](元素){ 操作 });</span><br>std::for_each(words.<span class="hljs-built_in">begin</span>(), words.<span class="hljs-built_in">end</span>(),<br>              [](<span class="hljs-type">const</span> std::string&amp; w) {<br>                  std::cout &lt;&lt; w &lt;&lt; <span class="hljs-string">" "</span>;<br>              });<br>std::cout &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 更实用的例子：修改元素（注意这里用引用捕获&amp;，或者直接传引用）</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; nums = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};<br>std::for_each(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(),<br>              [](<span class="hljs-type">int</span>&amp; n) { <span class="hljs-comment">// 注意参数是 int&amp;，这样才能修改原值</span><br>                  n *= <span class="hljs-number">2</span>; <span class="hljs-comment">// 每个元素乘以2</span><br>              });<br><span class="hljs-comment">// nums 变为 {2, 4, 6, 8, 10}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="std-find-if-按条件查找元素"><code>std::find_if</code> 按条件查找元素</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> {<br>    std::string name;<br>    <span class="hljs-type">int</span> age;<br>};<br>    std::vector&lt;Person&gt; people = {<br>        {<span class="hljs-string">"Alice"</span>, <span class="hljs-number">25</span>},<br>        {<span class="hljs-string">"Bob"</span>, <span class="hljs-number">17</span>},<br>        {<span class="hljs-string">"Charlie"</span>, <span class="hljs-number">30</span>},<br>        {<span class="hljs-string">"David"</span>, <span class="hljs-number">16</span>}<br>    };<br><br>    <span class="hljs-comment">// 查找第一个年龄大于18岁的人</span><br>    <span class="hljs-comment">// 语法：auto result = std::find_if(开始, 结束, [](元素){ 判断条件 });</span><br>    <span class="hljs-keyword">auto</span> adultIt = std::<span class="hljs-built_in">find_if</span>(people.<span class="hljs-built_in">begin</span>(), people.<span class="hljs-built_in">end</span>(),<br>                                [](<span class="hljs-type">const</span> Person&amp; p) {<br>                                    <span class="hljs-keyword">return</span> p.age &gt;= <span class="hljs-number">18</span>;<br>                                });<br><br>    <span class="hljs-keyword">if</span> (adultIt != people.<span class="hljs-built_in">end</span>()) {<br>        std::cout &lt;&lt; <span class="hljs-string">"First adult: "</span> &lt;&lt; adultIt-&gt;name &lt;&lt; std::endl;<br>    }<br><br>    <span class="hljs-comment">// 查找名字以'C'开头的人</span><br>    <span class="hljs-keyword">auto</span> nameIt = std::<span class="hljs-built_in">find_if</span>(people.<span class="hljs-built_in">begin</span>(), people.<span class="hljs-built_in">end</span>(),<br>                               [](<span class="hljs-type">const</span> Person&amp; p) {<br>                                   <span class="hljs-keyword">return</span> !p.name.<span class="hljs-built_in">empty</span>() &amp;&amp; p.name[<span class="hljs-number">0</span>] == <span class="hljs-string">'C'</span>;<br>                               });<br></code></pre></td></tr></tbody></table></figure><h3 id="std-count-if-统计满足条件的元素个数"><code>std::count_if</code> 统计满足条件的元素个数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; scores = {<span class="hljs-number">85</span>, <span class="hljs-number">92</span>, <span class="hljs-number">78</span>, <span class="hljs-number">90</span>, <span class="hljs-number">65</span>, <span class="hljs-number">88</span>, <span class="hljs-number">72</span>, <span class="hljs-number">95</span>, <span class="hljs-number">60</span>, <span class="hljs-number">81</span>};<br><br><span class="hljs-comment">// 统计及格（&gt;=60）的人数</span><br><span class="hljs-type">int</span> passCount = std::<span class="hljs-built_in">count_if</span>(scores.<span class="hljs-built_in">begin</span>(), scores.<span class="hljs-built_in">end</span>(),<br>                              [](<span class="hljs-type">int</span> score) {<br>                                  <span class="hljs-keyword">return</span> score &gt;= <span class="hljs-number">60</span>;<br>                              });<br><br><span class="hljs-comment">// 统计优秀（&gt;=90）的人数</span><br><span class="hljs-type">int</span> excellentCount = std::<span class="hljs-built_in">count_if</span>(scores.<span class="hljs-built_in">begin</span>(), scores.<span class="hljs-built_in">end</span>(),<br>                                   [](<span class="hljs-type">int</span> score) {<br>                                       <span class="hljs-keyword">return</span> score &gt;= <span class="hljs-number">90</span>;<br>                                   });<br><br>std::cout &lt;&lt; <span class="hljs-string">"Pass: "</span> &lt;&lt; passCount &lt;&lt; <span class="hljs-string">", Excellent: "</span> &lt;&lt; excellentCount &lt;&lt; std::endl;<br></code></pre></td></tr></tbody></table></figure><h3 id="std-transform-转换容器中的元素"><code>std::transform</code> 转换容器中的元素</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; numbers = {<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>};<br><br><span class="hljs-comment">// 计算每个数的平方根</span><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">roots</span><span class="hljs-params">(numbers.size())</span></span>;<br>std::<span class="hljs-built_in">transform</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(), roots.<span class="hljs-built_in">begin</span>(),<br>               [](<span class="hljs-type">int</span> n) {<br>                   <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">sqrt</span>(n);<br>               });<br><span class="hljs-comment">// roots = {1, 2, 3, 4, 5}</span><br><br><span class="hljs-comment">// 将所有数字转为字符串</span><br><span class="hljs-function">std::vector&lt;std::string&gt; <span class="hljs-title">strNumbers</span><span class="hljs-params">(numbers.size())</span></span>;<br>std::<span class="hljs-built_in">transform</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(), strNumbers.<span class="hljs-built_in">begin</span>(),<br>               [](<span class="hljs-type">int</span> n) {<br>                   <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">to_string</span>(n);<br>               });<br></code></pre></td></tr></tbody></table></figure>          </div><ol start="2"><li>简化代码，增强可读性</li></ol>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>syntax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP Syntax Bits and Bobs</title>
    <link href="/2025/08/25/CPP/CPP-Syntax-Bits-and-Bobs/"/>
    <url>/2025/08/25/CPP/CPP-Syntax-Bits-and-Bobs/</url>
    
    <content type="html"><![CDATA[<p>对在Leetcode刷题过程中遗漏的CPP语法进行补充，内容较为零碎，就先委屈一点挤挤吧😀，可能较多的是C++14/17<strong>新特性</strong>，如若后期深入学习Modern CPP，可能就会删减单拉出去为一章节了，敬请期待！</p><h2 id="auto">auto</h2><p><code>auto</code>是一个<strong>类型占位符</strong>，它指示编译器<strong>自动推导变量的类型</strong>。编译器会根据<strong>初始化表达式</strong>（等号右边的值）来确定<code>auto</code>变量的实际类型。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;<br><span class="hljs-comment">//等效于</span><br><span class="hljs-keyword">auto</span> x=<span class="hljs-number">10</span>;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> y=<span class="hljs-number">10.0</span>;<br><span class="hljs-comment">//等效于</span><br><span class="hljs-keyword">auto</span> y=<span class="hljs-number">10.0</span>;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> f = <span class="hljs-number">3.14</span>;  <span class="hljs-comment">//double</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">"hello"</span>)</span></span>;  <span class="hljs-comment">//const char*</span><br><span class="hljs-keyword">auto</span> z = <span class="hljs-keyword">new</span> <span class="hljs-built_in">auto</span>(<span class="hljs-number">9</span>);  <span class="hljs-comment">//int *</span><br><span class="hljs-keyword">auto</span> x1 = <span class="hljs-number">5</span>, x2 = <span class="hljs-number">5.0</span>, x3 = <span class="hljs-string">'r'</span>;   <span class="hljs-comment">//错误，必须是初始化为同一类型</span><br></code></pre></td></tr></tbody></table></figure><p>但是显然，这么简单的类型推导，<code>auto</code>的作用并不大。</p><h3 id="auto常用场景">auto常用场景</h3><p><code>auto</code>的真正作用是在<strong>复杂的类型推导</strong>中，例如<strong>迭代器</strong>、<strong>lambda表达式</strong>等，使程序更清晰易读。</p><h4 id="简化复杂类型声明">简化复杂类型声明</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; v = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};<br><span class="hljs-comment">// for (std::vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); ++it) {</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); ++it) {<br>    std::cout &lt;&lt; *it &lt;&lt; std::endl;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="范围-for-循环">范围 for 循环</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> element : container) {<br>    <span class="hljs-comment">// 使用 element</span><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="Lambda-表达式">Lambda 表达式</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> lambda = [](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) { <span class="hljs-keyword">return</span> x + y; };<br></code></pre></td></tr></tbody></table></figure><h3 id="Limitations">Limitations</h3><div class="note note-info">            <ul><li>必须<strong>初始化</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> x;  <span class="hljs-comment">// 错误：无法推导类型</span><br></code></pre></td></tr></tbody></table></figure><ul><li>不能用于<strong>函数参数</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">auto</span> x)</span> </span>{  <span class="hljs-comment">// 错误：不能用于函数参数</span><br>    <span class="hljs-comment">// ...</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>多变量声明需<strong>类型一致</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> x = <span class="hljs-number">10</span>, y = <span class="hljs-number">20.0</span>;  <span class="hljs-comment">// 错误：类型不一致</span><br></code></pre></td></tr></tbody></table></figure>          </div><h2 id="结构化绑定">结构化绑定</h2><p><strong>结构化绑定</strong>（Structured Bindings）是C++17这是一个非常实用的<strong>语法特性</strong>，它允许我们<strong>同时声明多个变量并从一个聚合类型</strong>（如struct、pair 等）中<strong>提取其成员</strong>，使代码更加简洁易读。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> [var1, var2, ...] = 聚合类型;<br></code></pre></td></tr></tbody></table></figure><h3 id="解构函数">解构函数</h3><p>结构化绑定可以非常方便地处理<strong>多个返回值</strong>的函数，例如返回<code>tuple</code>或<code>pair</code>的函数。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tuple&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">tuple&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>{<br>    <span class="hljs-keyword">return</span> {a+b,a-b};<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">auto</span> [add,sub]=<span class="hljs-built_in">calculate</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>    cout&lt;&lt;add&lt;&lt;endl;<br>    cout&lt;&lt;sub&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="解构结构体（类）">解构结构体（类）</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Product</span> {<br>    string name;<br>    <span class="hljs-type">double</span> price;<br>    <span class="hljs-type">int</span> stock;<br>};<br>Product apple={<span class="hljs-string">"apple"</span>,<span class="hljs-number">4.1</span>,<span class="hljs-number">50</span>};<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">auto</span> [name,val,stock]=apple;<br>    cout&lt;&lt;name&lt;&lt;val&lt;&lt;stock;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="解构数组（静态）">解构数组（静态）</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> numbers[<span class="hljs-number">5</span>] = {<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>};<br>    <span class="hljs-keyword">auto</span> [a, b, c, d, e] = numbers;<br>    cout &lt;&lt; <span class="hljs-string">"Array elements: "</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">", "</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">", "</span> &lt;&lt; c &lt;&lt; <span class="hljs-string">", "</span> &lt;&lt; d &lt;&lt; <span class="hljs-string">", "</span> &lt;&lt; e &lt;&lt; std::endl;<br>    <br>    <span class="hljs-comment">// 二维数组解构</span><br>    <span class="hljs-type">int</span> matrix[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = {{<span class="hljs-number">1</span>, <span class="hljs-number">2</span>}, {<span class="hljs-number">3</span>, <span class="hljs-number">4</span>}};<br>    <span class="hljs-keyword">auto</span> [row1, row2] = matrix;<br>    <span class="hljs-keyword">auto</span> [r1c1, r1c2] = row1;<br>    <span class="hljs-keyword">auto</span> [r2c1, r2c2] = row2;<br>    cout &lt;&lt; <span class="hljs-string">"Matrix: "</span> &lt;&lt; r1c1 &lt;&lt; <span class="hljs-string">","</span> &lt;&lt; r1c2 &lt;&lt; <span class="hljs-string">" | "</span> &lt;&lt; r2c1 &lt;&lt; <span class="hljs-string">","</span> &lt;&lt; r2c2 &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="遍历容器-范围for循环">遍历容器+范围for循环</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    unordered_map&lt;<span class="hljs-type">int</span>, string&gt; myMap = {{<span class="hljs-number">1</span>, <span class="hljs-string">"one"</span>}, {<span class="hljs-number">2</span>, <span class="hljs-string">"two"</span>}, {<span class="hljs-number">3</span>, <span class="hljs-string">"three"</span>}};<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [key, value] : myMap) {<br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">": "</span> &lt;&lt; value &lt;&lt; endl;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="容器函数">容器函数</h2><h3 id="查找最大值、最小值">查找最大值、最小值</h3><ul><li><code>max_element</code>返回指向容器中最大元素的<strong>迭代器</strong></li><li><code>min_element</code>返回指向容器中最小元素的<strong>迭代器</strong></li><li><code>minmax_element</code>：返回一个<strong>pair容器</strong>，其中 first 是最小元素的<strong>迭代器</strong>，second 是最大元素的<strong>迭代器</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    vector&lt;<span class="hljs-type">int</span>&gt; v={<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>};<br>    <span class="hljs-keyword">auto</span> [min_it,max_it]=<span class="hljs-built_in">minmax_element</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;*min_it&lt;&lt;endl;<br>    cout&lt;&lt;*max_it&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><div class="note note-danger">            <p>⚠️ 使用<code>*</code><strong>解引用迭代器</strong><br><code>*max_element</code>和<code>*min_element</code>返回是<strong>元素值</strong></p>          </div><h3 id="判断排序">判断排序</h3><ul><li><code>is_sorted</code>判断容器是否已排序(默认<strong>升序</strong>)：若满足<code>*(i+1)&gt;=*i</code>时，判断<strong>已排序</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1={<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>};<br>    vector&lt;<span class="hljs-type">int</span>&gt; v2={<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>};<br>    cout&lt;&lt;<span class="hljs-string">"v1排序情况："</span>&lt;&lt;<span class="hljs-built_in">is_sorted</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(),v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>())&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">"v2排序情况："</span>&lt;&lt;<span class="hljs-built_in">is_sorted</span>(v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(),v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>())&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="重载比较函数">重载比较函数</h4><ul><li><code>is_sorted</code>提供<strong>重载版本</strong>，可以接受<strong>自定义比较函数</strong>（<strong>使用lambda expression</strong>）</li></ul><p><a href="https://leetcode.cn/problems/non-decreasing-array">Leetcode 665.非递减数列</a></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    vector&lt;<span class="hljs-type">int</span>&gt; v={<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>};<br>    <span class="hljs-type">bool</span> is_descending=<span class="hljs-built_in">is_sorted</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),[](<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b){<span class="hljs-keyword">return</span> a&gt;b;});<br>    cout&lt;&lt;<span class="hljs-string">"v是否降序排序："</span>&lt;&lt;is_descending&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>syntax</tag>
      
      <tag>updating</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stack and Queue</title>
    <link href="/2025/08/23/Data%20structure/Stack-and-Queue/"/>
    <url>/2025/08/23/Data%20structure/Stack-and-Queue/</url>
    
    <content type="html"><![CDATA[<h2 id="Stack">Stack</h2><p>栈（stack）是一种遵循<strong>先入后出</strong>(<strong>LIFO</strong>)逻辑的线性数据结构:我们把堆叠元素的顶部称为“<strong>栈顶</strong>”，底部称为“<strong>栈底</strong>”。将把<strong>元素添加到栈顶</strong>的操作叫作“<strong>入栈</strong>”，<strong>删除栈顶元素</strong>的操作叫作“<strong>出栈</strong>”。</p><h3 id="Stack-in-STL">Stack in STL</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-comment">/* 初始化栈 */</span><br>stack&lt;<span class="hljs-type">int</span>&gt; stack;<br><br><span class="hljs-comment">/* 元素入栈 */</span><br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/* 访问栈顶元素 */</span><br><span class="hljs-type">int</span> top = stack.<span class="hljs-built_in">top</span>();<br><br><span class="hljs-comment">/* 元素出栈 */</span><br>stack.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 无返回值</span><br><br><span class="hljs-comment">/* 获取栈的长度 */</span><br><span class="hljs-type">int</span> size = stack.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">/* 判断是否为空 */</span><br><span class="hljs-type">bool</span> empty = stack.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></tbody></table></figure><h2 id="栈的实现">栈的实现</h2><p>  由于<strong>数组</strong>和<strong>链表</strong>都可以在任意位置添加和删除元素，因此栈可以视为一种<strong>受限制的</strong>数组或链表。换句话说，我们可以“屏蔽”数组或链表的部分无关操作，使其对外表现的逻辑符合栈的特性，下面我们分别<strong>用数组和链表实现栈的功能</strong>！</p><h3 id="基于数组的实现">基于数组的实现</h3><p>使用数组实现栈时，我们可以将<strong>数组的尾部作为栈顶</strong>。由于入栈的元素可能会源源不断地增加，因此我们可以使用<strong>动态数组</strong>，这样就无须自行处理<strong>数组扩容问题</strong>。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector &lt;<span class="hljs-type">int</span>&gt; stack;<br><span class="hljs-comment">/* 获取栈的长度 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">size</span>();<br>}<br><span class="hljs-comment">/* 判断栈是否为空 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>}<br><span class="hljs-comment">/* 入栈 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>{<br>    stack.<span class="hljs-built_in">push_back</span>(num);<br>}<br><span class="hljs-comment">/* 出栈 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{<br>    stack.<span class="hljs-built_in">pop_back</span>();<br>}<br><span class="hljs-comment">/* 访问栈顶元素 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isempty</span>()) {<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"栈为空"</span>);<br>    }<br>    <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">back</span>();<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="基于链表的实现">基于链表的实现</h3><p>使用链表实现栈时，我们可以将链表的<strong>头节点视为栈顶</strong>，<strong>尾节点视为栈底</strong>。</p><ul><li>对于入栈操作，我们只需将<strong>元素插入链表头部</strong>，这种节点插入方法被称为“<strong>头插法</strong>”。</li><li>对于出栈操作，只需<strong>将头节点从链表中删除</strong>即可。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 基于链表实现的栈 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListStack</span> {<br>  <span class="hljs-keyword">private</span>:<br>    ListNode *stackTop; <span class="hljs-comment">// 将头节点作为栈顶</span><br>    <span class="hljs-type">int</span> stkSize;        <span class="hljs-comment">// 栈的长度</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkedListStack</span>() {<br>        stackTop = <span class="hljs-literal">nullptr</span>;<br>        stkSize = <span class="hljs-number">0</span>;<br>    }<br><br>    ~<span class="hljs-built_in">LinkedListStack</span>() {<br>        <span class="hljs-comment">// 遍历链表删除节点，释放内存</span><br>        <span class="hljs-built_in">freeMemoryLinkedList</span>(stackTop);<br>    }<br><br>    <span class="hljs-comment">/* 获取栈的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> stkSize;<br>    }<br><br>    <span class="hljs-comment">/* 判断栈是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">/* 入栈 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        ListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(num);<br>        node-&gt;next = stackTop;<br>        stackTop = node;<br>        stkSize++;<br>    }<br><br>    <span class="hljs-comment">/* 出栈 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">top</span>();<br>        ListNode *tmp = stackTop;<br>        stackTop = stackTop-&gt;next;<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">delete</span> tmp;<br>        stkSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    }<br><br>    <span class="hljs-comment">/* 访问栈顶元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"栈为空"</span>);<br>        <span class="hljs-keyword">return</span> stackTop-&gt;val;<br>    }<br><br>    <span class="hljs-comment">/* 将 List 转化为 Array 并返回 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>{<br>        ListNode *node = stackTop;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(size())</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = res.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {<br>            res[i] = node-&gt;val;<br>            node = node-&gt;next;<br>        }<br>        <span class="hljs-keyword">return</span> res;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="Queue">Queue</h2><p>队列（queue）是一种遵循<strong>先入先出</strong>（<strong>FIFO</strong>)规则的线性数据结构。队列模拟了排队现象，即新来的人不断加入队列尾部，而位于队列头部的人逐个离开。我们将队列头部称为“<strong>队首</strong>”，尾部称为“<strong>队尾</strong>”，将把<strong>元素加入队尾</strong>的操作称为“<strong>入队</strong>”，<strong>删除队首元素</strong>的操作称为“<strong>出队</strong>”。</p><h3 id="Queue-in-STL">Queue in STL</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-comment">/* 初始化队列 */</span><br>queue&lt;<span class="hljs-type">int</span>&gt; queue;<br><br><span class="hljs-comment">/* 元素入队 */</span><br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/* 访问队首元素 */</span><br><span class="hljs-type">int</span> front = queue.<span class="hljs-built_in">front</span>();<br><br><span class="hljs-comment">/* 元素出队 */</span><br>queue.<span class="hljs-built_in">pop</span>();<br><br><span class="hljs-comment">/* 获取队列的长度 */</span><br><span class="hljs-type">int</span> size = queue.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">/* 判断队列是否为空 */</span><br><span class="hljs-type">bool</span> empty = queue.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></tbody></table></figure><h2 id="队列的实现">队列的实现</h2><h3 id="基于数组的实现-v2">基于数组的实现</h3><p>在数组中删除首元素的时间复杂度为 O(n) ，这会导致出队操作效率较低。然而我们可以使用一个变量 <code>front</code> 指向<strong>队首元素的索引</strong>，并维护一个变量 <code>size</code> 用于<strong>记录队列长度</strong>。定义 <code>rear = front + size</code> ，这个公式计算出的 <code>rear</code> 指向<strong>队尾元素之后的下一个位置</strong>。</p><p>基于此设计，数组中包含元素的<strong>有效区间</strong>为 [<code>front</code>, <code>rear</code> - 1]。</p><ul><li><strong>入队</strong>操作：将输入元素赋值给 <code>rear</code> 索引处，并将 <code>size</code> 增加 1 。</li><li><strong>出队</strong>操作：只需将 <code>front</code> 增加 1 ，并将 <code>size</code> 减少 1 。</li></ul><p>可以看到，入队和出队操作都只需进行一次操作，时间复杂度均为 O(1)</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 基于环形数组实现的队列 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span> {<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> *nums;       <span class="hljs-comment">// 用于存储队列元素的数组</span><br>    <span class="hljs-type">int</span> front;       <span class="hljs-comment">// 队首指针，指向队首元素</span><br>    <span class="hljs-type">int</span> queSize;     <span class="hljs-comment">// 队列长度</span><br>    <span class="hljs-type">int</span> queCapacity; <span class="hljs-comment">// 队列容量</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ArrayQueue</span>(<span class="hljs-type">int</span> capacity) {<br>        <span class="hljs-comment">// 初始化数组</span><br>        nums = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[capacity];<br>        queCapacity = capacity;<br>        front = queSize = <span class="hljs-number">0</span>;<br>    }<br><br>    ~<span class="hljs-built_in">ArrayQueue</span>() {<br>        <span class="hljs-keyword">delete</span>[] nums;<br>    }<br><br>    <span class="hljs-comment">/* 获取队列的容量 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queCapacity;<br>    }<br><br>    <span class="hljs-comment">/* 获取队列的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queSize;<br>    }<br><br>    <span class="hljs-comment">/* 判断队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">/* 入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        <span class="hljs-keyword">if</span> (queSize == queCapacity) {<br>            cout &lt;&lt; <span class="hljs-string">"队列已满"</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-comment">// 计算队尾指针，指向队尾索引 + 1</span><br>        <span class="hljs-comment">// 通过取余操作实现 rear 越过数组尾部后回到头部</span><br>        <span class="hljs-type">int</span> rear = (front + queSize) % queCapacity;<br>        <span class="hljs-comment">// 将 num 添加至队尾</span><br>        nums[rear] = num;<br>        queSize++;<br>    }<br><br>    <span class="hljs-comment">/* 出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">peek</span>();<br>        <span class="hljs-comment">// 队首指针向后移动一位，若越过尾部，则返回到数组头部</span><br>        front = (front + <span class="hljs-number">1</span>) % queCapacity;<br>        queSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    }<br><br>    <span class="hljs-comment">/* 访问队首元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"队列为空"</span>);<br>        <span class="hljs-keyword">return</span> nums[front];<br>    }<br><br>    <span class="hljs-comment">/* 将数组转化为 Vector 并返回 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-comment">// 仅转换有效长度范围内的列表元素</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(queSize)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = front; i &lt; queSize; i++, j++) {<br>            arr[i] = nums[j % queCapacity];<br>        }<br>        <span class="hljs-keyword">return</span> arr;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="基于链表的实现-v2">基于链表的实现</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 基于链表实现的队列 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListQueue</span> {<br>  <span class="hljs-keyword">private</span>:<br>    ListNode *front, *rear; <span class="hljs-comment">// 头节点 front ，尾节点 rear</span><br>    <span class="hljs-type">int</span> queSize;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkedListQueue</span>() {<br>        front = <span class="hljs-literal">nullptr</span>;<br>        rear = <span class="hljs-literal">nullptr</span>;<br>        queSize = <span class="hljs-number">0</span>;<br>    }<br><br>    ~<span class="hljs-built_in">LinkedListQueue</span>() {<br>        <span class="hljs-comment">// 遍历链表删除节点，释放内存</span><br>        <span class="hljs-built_in">freeMemoryLinkedList</span>(front);<br>    }<br><br>    <span class="hljs-comment">/* 获取队列的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queSize;<br>    }<br><br>    <span class="hljs-comment">/* 判断队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queSize == <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">/* 入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        <span class="hljs-comment">// 在尾节点后添加 num</span><br>        ListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(num);<br>        <span class="hljs-comment">// 如果队列为空，则令头、尾节点都指向该节点</span><br>        <span class="hljs-keyword">if</span> (front == <span class="hljs-literal">nullptr</span>) {<br>            front = node;<br>            rear = node;<br>        }<br>        <span class="hljs-comment">// 如果队列不为空，则将该节点添加到尾节点后</span><br>        <span class="hljs-keyword">else</span> {<br>            rear-&gt;next = node;<br>            rear = node;<br>        }<br>        queSize++;<br>    }<br><br>    <span class="hljs-comment">/* 出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">peek</span>();<br>        <span class="hljs-comment">// 删除头节点</span><br>        ListNode *tmp = front;<br>        front = front-&gt;next;<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">delete</span> tmp;<br>        queSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    }<br><br>    <span class="hljs-comment">/* 访问队首元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"队列为空"</span>);<br>        <span class="hljs-keyword">return</span> front-&gt;val;<br>    }<br><br>    <span class="hljs-comment">/* 将链表转化为 Vector 并返回 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>{<br>        ListNode *node = front;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(size())</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-built_in">size</span>(); i++) {<br>            res[i] = node-&gt;val;<br>            node = node-&gt;next;<br>        }<br>        <span class="hljs-keyword">return</span> res;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-8c97f03b" role="button" aria-expanded="false" aria-controls="collapse-8c97f03b">        <div class="fold-arrow">▶</div> 在不断进行入队和出队的过程中，front 和 rear 都在向右移动，当它们到达数组尾部时就无法继续移动了，这时应该怎么办呢？      </div>      <div class="fold-collapse collapse" id="collapse-8c97f03b">        <div class="fold-content">          <p>我们可以将数组视为首尾相接的“环形数组”。对于环形数组，我们需要让 <code>front</code> 或 <code>rear</code> 在越过数组尾部时，直接<strong>回到数组头部继续遍历</strong>。这种周期性规律可以通过“<strong>取余操作</strong>”来实现！</p>        </div>      </div>    </div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 基于环形数组实现的队列 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span> {<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> *nums;       <span class="hljs-comment">// 用于存储队列元素的数组</span><br>    <span class="hljs-type">int</span> front;       <span class="hljs-comment">// 队首指针，指向队首元素</span><br>    <span class="hljs-type">int</span> queSize;     <span class="hljs-comment">// 队列长度</span><br>    <span class="hljs-type">int</span> queCapacity; <span class="hljs-comment">// 队列容量</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ArrayQueue</span>(<span class="hljs-type">int</span> capacity) {<br>        <span class="hljs-comment">// 初始化数组</span><br>        nums = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[capacity];<br>        queCapacity = capacity;<br>        front = queSize = <span class="hljs-number">0</span>;<br>    }<br><br>    ~<span class="hljs-built_in">ArrayQueue</span>() {<br>        <span class="hljs-keyword">delete</span>[] nums;<br>    }<br><br>    <span class="hljs-comment">/* 获取队列的容量 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queCapacity;<br>    }<br><br>    <span class="hljs-comment">/* 获取队列的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queSize;<br>    }<br><br>    <span class="hljs-comment">/* 判断队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">/* 入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        <span class="hljs-keyword">if</span> (queSize == queCapacity) {<br>            cout &lt;&lt; <span class="hljs-string">"队列已满"</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-comment">// 计算队尾指针，指向队尾索引 + 1</span><br>        <span class="hljs-comment">// 通过取余操作实现 rear 越过数组尾部后回到头部</span><br>        <span class="hljs-type">int</span> rear = (front + queSize) % queCapacity;<br>        <span class="hljs-comment">// 将 num 添加至队尾</span><br>        nums[rear] = num;<br>        queSize++;<br>    }<br><br>    <span class="hljs-comment">/* 出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">peek</span>();<br>        <span class="hljs-comment">// 队首指针向后移动一位，若越过尾部，则返回到数组头部</span><br>        front = (front + <span class="hljs-number">1</span>) % queCapacity;<br>        queSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    }<br><br>    <span class="hljs-comment">/* 访问队首元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"队列为空"</span>);<br>        <span class="hljs-keyword">return</span> nums[front];<br>    }<br><br>    <span class="hljs-comment">/* 将数组转化为 Vector 并返回 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-comment">// 仅转换有效长度范围内的列表元素</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(queSize)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = front; i &lt; queSize; i++, j++) {<br>            arr[i] = nums[j % queCapacity];<br>        }<br>        <span class="hljs-keyword">return</span> arr;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h1>双向队列</h1><p>在队列中，我们仅能删除头部元素或在尾部添加元素。双向队列（double-ended queue）提供了<strong>更高的灵活性</strong>，允许在<strong>头部和尾部</strong>执行元素的添加或删除操作。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-comment">/* 初始化双向队列 */</span><br>deque&lt;<span class="hljs-type">int</span>&gt; deque;<br><br><span class="hljs-comment">/* 元素入队 */</span><br>deque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);   <span class="hljs-comment">// 添加至队尾</span><br>deque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>deque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br><br>deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">3</span>);  <span class="hljs-comment">// 添加至队首</span><br>deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* 访问元素 */</span><br><span class="hljs-type">int</span> front = deque.<span class="hljs-built_in">front</span>(); <span class="hljs-comment">// 队首元素</span><br><span class="hljs-type">int</span> back = deque.<span class="hljs-built_in">back</span>();   <span class="hljs-comment">// 队尾元素</span><br><br><span class="hljs-comment">/* 元素出队 */</span><br>deque.<span class="hljs-built_in">pop_front</span>();  <span class="hljs-comment">// 队首元素出队</span><br>deque.<span class="hljs-built_in">pop_back</span>();   <span class="hljs-comment">// 队尾元素出队</span><br><br><span class="hljs-comment">/* 获取双向队列的长度 */</span><br><span class="hljs-type">int</span> size = deque.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">/* 判断双向队列是否为空 */</span><br><span class="hljs-type">bool</span> empty = deque.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></tbody></table></figure><h2 id="双向队列的实现">双向队列的实现</h2><h3 id="基于数组的实现-v3">基于数组的实现</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 基于环形数组实现的双向队列 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDeque</span> {<br>  <span class="hljs-keyword">private</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums; <span class="hljs-comment">// 用于存储双向队列元素的数组</span><br>    <span class="hljs-type">int</span> front;        <span class="hljs-comment">// 队首指针，指向队首元素</span><br>    <span class="hljs-type">int</span> queSize;      <span class="hljs-comment">// 双向队列长度</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/* 构造方法 */</span><br>    <span class="hljs-built_in">ArrayDeque</span>(<span class="hljs-type">int</span> capacity) {<br>        nums.<span class="hljs-built_in">resize</span>(capacity);<br>        front = queSize = <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">/* 获取双向队列的容量 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();<br>    }<br><br>    <span class="hljs-comment">/* 获取双向队列的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queSize;<br>    }<br><br>    <span class="hljs-comment">/* 判断双向队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queSize == <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">/* 计算环形数组索引 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>{<br>        <span class="hljs-comment">// 通过取余操作实现数组首尾相连</span><br>        <span class="hljs-comment">// 当 i 越过数组尾部后，回到头部</span><br>        <span class="hljs-comment">// 当 i 越过数组头部后，回到尾部</span><br>        <span class="hljs-keyword">return</span> (i + <span class="hljs-built_in">capacity</span>()) % <span class="hljs-built_in">capacity</span>();<br>    }<br><br>    <span class="hljs-comment">/* 队首入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        <span class="hljs-keyword">if</span> (queSize == <span class="hljs-built_in">capacity</span>()) {<br>            cout &lt;&lt; <span class="hljs-string">"双向队列已满"</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-comment">// 队首指针向左移动一位</span><br>        <span class="hljs-comment">// 通过取余操作实现 front 越过数组头部后回到尾部</span><br>        front = <span class="hljs-built_in">index</span>(front - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 将 num 添加至队首</span><br>        nums[front] = num;<br>        queSize++;<br>    }<br><br>    <span class="hljs-comment">/* 队尾入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushLast</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        <span class="hljs-keyword">if</span> (queSize == <span class="hljs-built_in">capacity</span>()) {<br>            cout &lt;&lt; <span class="hljs-string">"双向队列已满"</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-comment">// 计算队尾指针，指向队尾索引 + 1</span><br>        <span class="hljs-type">int</span> rear = <span class="hljs-built_in">index</span>(front + queSize);<br>        <span class="hljs-comment">// 将 num 添加至队尾</span><br>        nums[rear] = num;<br>        queSize++;<br>    }<br><br>    <span class="hljs-comment">/* 队首出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">popFirst</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">peekFirst</span>();<br>        <span class="hljs-comment">// 队首指针向后移动一位</span><br>        front = <span class="hljs-built_in">index</span>(front + <span class="hljs-number">1</span>);<br>        queSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    }<br><br>    <span class="hljs-comment">/* 队尾出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">popLast</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">peekLast</span>();<br>        queSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    }<br><br>    <span class="hljs-comment">/* 访问队首元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peekFirst</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"双向队列为空"</span>);<br>        <span class="hljs-keyword">return</span> nums[front];<br>    }<br><br>    <span class="hljs-comment">/* 访问队尾元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peekLast</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"双向队列为空"</span>);<br>        <span class="hljs-comment">// 计算尾元素索引</span><br>        <span class="hljs-type">int</span> last = <span class="hljs-built_in">index</span>(front + queSize - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> nums[last];<br>    }<br><br>    <span class="hljs-comment">/* 返回数组用于打印 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-comment">// 仅转换有效长度范围内的列表元素</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(queSize)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = front; i &lt; queSize; i++, j++) {<br>            res[i] = nums[<span class="hljs-built_in">index</span>(j)];<br>        }<br>        <span class="hljs-keyword">return</span> res;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="基于链表的实现-v3">基于链表的实现</h3><p>对于双向队列而言，头部和尾部都可以执行入队和出队操作。换句话说，双向队列需要实现另一个<strong>对称方向</strong>的操作。为此，我们采用“<strong>双向链表</strong>”作为双向队列的底层数据结构。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 双向链表节点 */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DoublyListNode</span> {<br>    <span class="hljs-type">int</span> val;              <span class="hljs-comment">// 节点值</span><br>    DoublyListNode *next; <span class="hljs-comment">// 后继节点指针</span><br>    DoublyListNode *prev; <span class="hljs-comment">// 前驱节点指针</span><br>    <span class="hljs-built_in">DoublyListNode</span>(<span class="hljs-type">int</span> val) : <span class="hljs-built_in">val</span>(val), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) {<br>    }<br>};<br><br><span class="hljs-comment">/* 基于双向链表实现的双向队列 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListDeque</span> {<br>  <span class="hljs-keyword">private</span>:<br>    DoublyListNode *front, *rear; <span class="hljs-comment">// 头节点 front ，尾节点 rear</span><br>    <span class="hljs-type">int</span> queSize = <span class="hljs-number">0</span>;              <span class="hljs-comment">// 双向队列的长度</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/* 构造方法 */</span><br>    <span class="hljs-built_in">LinkedListDeque</span>() : <span class="hljs-built_in">front</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">rear</span>(<span class="hljs-literal">nullptr</span>) {<br>    }<br><br>    <span class="hljs-comment">/* 析构方法 */</span><br>    ~<span class="hljs-built_in">LinkedListDeque</span>() {<br>        <span class="hljs-comment">// 遍历链表删除节点，释放内存</span><br>        DoublyListNode *pre, *cur = front;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span>) {<br>            pre = cur;<br>            cur = cur-&gt;next;<br>            <span class="hljs-keyword">delete</span> pre;<br>        }<br>    }<br><br>    <span class="hljs-comment">/* 获取双向队列的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> queSize;<br>    }<br><br>    <span class="hljs-comment">/* 判断双向队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">/* 入队操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">bool</span> isFront)</span> </span>{<br>        DoublyListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DoublyListNode</span>(num);<br>        <span class="hljs-comment">// 若链表为空，则令 front 和 rear 都指向 node</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            front = rear = node;<br>        <span class="hljs-comment">// 队首入队操作</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isFront) {<br>            <span class="hljs-comment">// 将 node 添加至链表头部</span><br>            front-&gt;prev = node;<br>            node-&gt;next = front;<br>            front = node; <span class="hljs-comment">// 更新头节点</span><br>        <span class="hljs-comment">// 队尾入队操作</span><br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">// 将 node 添加至链表尾部</span><br>            rear-&gt;next = node;<br>            node-&gt;prev = rear;<br>            rear = node; <span class="hljs-comment">// 更新尾节点</span><br>        }<br>        queSize++; <span class="hljs-comment">// 更新队列长度</span><br>    }<br><br>    <span class="hljs-comment">/* 队首入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        <span class="hljs-built_in">push</span>(num, <span class="hljs-literal">true</span>);<br>    }<br><br>    <span class="hljs-comment">/* 队尾入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushLast</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>{<br>        <span class="hljs-built_in">push</span>(num, <span class="hljs-literal">false</span>);<br>    }<br><br>    <span class="hljs-comment">/* 出队操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-type">bool</span> isFront)</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"队列为空"</span>);<br>        <span class="hljs-type">int</span> val;<br>        <span class="hljs-comment">// 队首出队操作</span><br>        <span class="hljs-keyword">if</span> (isFront) {<br>            val = front-&gt;val; <span class="hljs-comment">// 暂存头节点值</span><br>            <span class="hljs-comment">// 删除头节点</span><br>            DoublyListNode *fNext = front-&gt;next;<br>            <span class="hljs-keyword">if</span> (fNext != <span class="hljs-literal">nullptr</span>) {<br>                fNext-&gt;prev = <span class="hljs-literal">nullptr</span>;<br>                front-&gt;next = <span class="hljs-literal">nullptr</span>;<br>            }<br>            <span class="hljs-keyword">delete</span> front;<br>            front = fNext; <span class="hljs-comment">// 更新头节点</span><br>        <span class="hljs-comment">// 队尾出队操作</span><br>        } <span class="hljs-keyword">else</span> {<br>            val = rear-&gt;val; <span class="hljs-comment">// 暂存尾节点值</span><br>            <span class="hljs-comment">// 删除尾节点</span><br>            DoublyListNode *rPrev = rear-&gt;prev;<br>            <span class="hljs-keyword">if</span> (rPrev != <span class="hljs-literal">nullptr</span>) {<br>                rPrev-&gt;next = <span class="hljs-literal">nullptr</span>;<br>                rear-&gt;prev = <span class="hljs-literal">nullptr</span>;<br>            }<br>            <span class="hljs-keyword">delete</span> rear;<br>            rear = rPrev; <span class="hljs-comment">// 更新尾节点</span><br>        }<br>        queSize--; <span class="hljs-comment">// 更新队列长度</span><br>        <span class="hljs-keyword">return</span> val;<br>    }<br><br>    <span class="hljs-comment">/* 队首出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">popFirst</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pop</span>(<span class="hljs-literal">true</span>);<br>    }<br><br>    <span class="hljs-comment">/* 队尾出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">popLast</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pop</span>(<span class="hljs-literal">false</span>);<br>    }<br><br>    <span class="hljs-comment">/* 访问队首元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peekFirst</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"双向队列为空"</span>);<br>        <span class="hljs-keyword">return</span> front-&gt;val;<br>    }<br><br>    <span class="hljs-comment">/* 访问队尾元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peekLast</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">"双向队列为空"</span>);<br>        <span class="hljs-keyword">return</span> rear-&gt;val;<br>    }<br><br>    <span class="hljs-comment">/* 返回数组用于打印 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>{<br>        DoublyListNode *node = front;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(size())</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-built_in">size</span>(); i++) {<br>            res[i] = node-&gt;val;<br>            node = node-&gt;next;<br>        }<br>        <span class="hljs-keyword">return</span> res;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-8f61356f" role="button" aria-expanded="false" aria-controls="collapse-8f61356f">        <div class="fold-arrow">▶</div> 撤销（undo）和反撤销（redo）具体是如何实现的？      </div>      <div class="fold-collapse collapse" id="collapse-8f61356f">        <div class="fold-content">          <p>使用两个栈，栈 A 用于<strong>撤销</strong>，栈 B 用于<strong>反撤销</strong>。</p><p>每当用户执行一个操作，将这个操作压入栈 A ，并清空栈 B 。<br>当用户执行“撤销”时，从栈 A 中弹出最近的操作，并将其压入栈 B 。<br>当用户执行“反撤销”时，从栈 B 中弹出最近的操作，并将其压入栈 A 。</p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>updating</tag>
      
      <tag>stack</tag>
      
      <tag>queue</tag>
      
      <tag>datastructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Huashu Cup Conclusion</title>
    <link href="/2025/08/22/Mathematical%20Modeling%20Tutorial/Huashu%20Cup%20Conclusion/"/>
    <url>/2025/08/22/Mathematical%20Modeling%20Tutorial/Huashu%20Cup%20Conclusion/</url>
    
    <content type="html"><![CDATA[<p>  在“华数杯”数学建模竞赛中，我们的队伍仅仅获得“<strong>优秀奖</strong>”，草草收场，于我，上次的一等奖让我有些心高气傲，很多<strong>细节方面</strong>没有关注到位，间接导致了失败，现根据官方提供的评价进行<strong>自我剖析</strong>，为即将到来的国赛摩拳擦掌！</p><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/Huashu-Cup-Conclusion/assessment.jpg?raw=true" alt="华数杯官方评语"></p><p>比赛论文如下：</p><iframe src="https://cdn.jsdelivr.net/gh/Richard110206/Blog-image@main/article/Huashu-Cup-Conclusion/CCM2501873.pdf" width="100%" height="800px"></iframe><p>⚠️⚠️⚠️</p>]]></content>
    
    
    <categories>
      
      <category>Mathematical Modeling Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Array and Linkedlist</title>
    <link href="/2025/08/22/Data%20structure/Linkedlist/"/>
    <url>/2025/08/22/Data%20structure/Linkedlist/</url>
    
    <content type="html"><![CDATA[<h1>Introduction</h1><p>  博主上学期结束了数据结构的学习，但是由于高数、线代、离散等课程积压，课程进度过快，数据结构学的粗枝大叶，很多地方蜻蜓点水般一笔带过，甚至是理论课学思想，实践课STL直接上，很多地方没有仔细钻研，考虑到下学期<strong>程序综合实践有“CCF-CSP认证”</strong>，以及数据结构 &amp;&amp; 算法的重要性，遂打算再次进行学习相关内容，但相对的会有详略取舍！</p><p>参考教材：<a href="https://github.com/krahets/hello-algo">Hello,算法！</a></p><h2 id="Physical-Structure">Physical Structure</h2><p>  内存是<strong>所有程序的共享资源</strong>，当某块内存被某个程序占用时，则无法被其他程序同时使用。就正如我们平时买电子产品时，讨论的8G、16G、32G的内存，当你同时打开开多个程序时就可能发生卡顿的现象。因此在数据结构和算法设计中，<strong>内存资源</strong>是一个很重要的考虑因素。</p><div class="note note-info">            <p>比如，算法所占用的内存峰值不应超过系统剩余空闲内存；如果<strong>缺少连续大块的内存空间</strong>，那么所选用的数据结构必须能够<strong>存储在分散的内存空间</strong>里！</p>          </div><p>所有的数据结构都是基于<strong>数组</strong>（<strong>连续空间存储</strong>）、<strong>链表</strong>（<strong>分散空间存储</strong>）或二者的组合实现的！</p><ul><li>基于<strong>数组</strong>可实现：栈、队列、哈希表、树、堆、图、矩阵、张量等</li><li>基于<strong>链表</strong>可实现：栈、队列、哈希表、树、堆、图、等</li></ul><h2 id="Array">Array</h2><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/DataStructure/Address-Caculate.png?raw=true" alt="数组地址计算"></p><ul><li>数组的索引本质上是<strong>内存地址的偏移量</strong></li></ul><h3 id="Array-in-STL">Array in STL</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-comment">/*动态数组的初始化*/</span><br><br><span class="hljs-comment">/*初始化int数组*/</span><br>vector&lt;<span class="hljs-type">int</span>&gt; vec;<span class="hljs-comment">//定义一个int型向量</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//vec有10个值为0的元素</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)</span></span>;<span class="hljs-comment">//vec初始有10个值为1的元素</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; vec;<span class="hljs-comment">//定义一个int型二维向量</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;<span class="hljs-comment">//定义一个int型迭代器</span><br><br><span class="hljs-comment">/*初始化string数组*/</span><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">vec</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">"string"</span>)</span>    <span class="hljs-comment">//vec初始有10个值为"string"的元素</span></span><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">vec</span><span class="hljs-params">(a.begin(), a.end())</span></span>;<span class="hljs-comment">//vec是a的复制</span><br><br><span class="hljs-comment">/*vector基本用法*/</span><br>vec.<span class="hljs-built_in">push_back</span>();<span class="hljs-comment">//在数组的尾部添加一个元素</span><br>vec.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//去掉数组的最后一个元素</span><br>vec.<span class="hljs-built_in">begin</span>();<span class="hljs-comment">//得到数组头的指针，用迭代器接受</span><br>vec.<span class="hljs-built_in">end</span>();<span class="hljs-comment">//得到数组的最后一个元素+1的指针</span><br>vec.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空容器中所有元素</span><br>vec.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//判断容器是否为空</span><br>vec.<span class="hljs-built_in">erase</span>(vec.<span class="hljs-built_in">begin</span>() + i, vec.<span class="hljs-built_in">end</span>() + j);<span class="hljs-comment">//删除[i,j)区间的元素</span><br>vec.<span class="hljs-built_in">erase</span>(vec.<span class="hljs-built_in">begin</span>() + i);<span class="hljs-comment">//删除第i+1个元素</span><br>vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">begin</span>() + i, a);<span class="hljs-comment">//在第i+1个元素前面插入a</span><br>vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">10</span>, a);<span class="hljs-comment">//尾部插入10个值为a的元素</span><br>vec.<span class="hljs-built_in">insert</span>(pos, data);<span class="hljs-comment">//在pos处插入数据</span><br>vec.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回容器中实际元素的个数</span><br>vec.<span class="hljs-built_in">back</span>();<span class="hljs-comment">//返回尾部元素</span><br>vec.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//返回头部元素</span><br>vec.<span class="hljs-built_in">resize</span>(n);<span class="hljs-comment">//数组大小变为n</span><br><span class="hljs-built_in">reverse</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>())<span class="hljs-comment">//用函数reverse()翻转数组</span><br><span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>())<span class="hljs-comment">//用函数排序，默认从小排到大</span><br></code></pre></td></tr></tbody></table></figure><h3 id="Pros-and-Cons">Pros and Cons</h3><div class="note note-info">            <ul><li>空间效率高：为数据分配连续内存块，无需额外结构开销</li><li>支持随机访问：循序在O(1) 时间内访问任意元素</li><li>缓存局部性：当访问数组元素时，计算机还会缓存器周围的其他数据，从而借助高速缓存来提升后续操作的执行速度</li></ul>          </div><div class="note note-info">            <ul><li>插入与删除效率低：元素较多时，需要移动大量元素</li><li>长度不可变：在初始化后长度就固定了。扩容数组需要将所有数据复制到新数组，开销很大</li><li>空间浪费：如果分配的大小超过实际所需，那么多余的空间就被浪费了</li></ul>          </div><h2 id="Linkedlist">Linkedlist</h2><p>由前面的内存空间可知，在一个复杂的系统运行环境下，空闲的内存空间可能<strong>散落在内存各处</strong>，而存储数组的内存空间必须是<strong>连续的</strong>，当数组非常大时，内存可能无法提供如此大的连续空间，那么此时<strong>链表的灵活性</strong>就体现出来了！</p><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/DataStructure/Physical-Storage-Address.png?raw=true" alt="链表定义与存储方式"></p><p>链表的组成单位是<strong>节点</strong>（node）对象。每个节点都包含两项数据：</p><ul><li><strong>节点值</strong></li><li><strong>指向下一节点的指针</strong></li></ul><p>链表的首个节点被称为“<strong>头节点</strong>”，最后一个节点被称为“<strong>尾节点</strong>”。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> {<br>    <span class="hljs-type">int</span> val;         <span class="hljs-comment">// 节点值</span><br>    Node* next;  <span class="hljs-comment">// 指向下一节点的指针</span><br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) {}  <span class="hljs-comment">// 构造函数</span><br>};<br></code></pre></td></tr></tbody></table></figure><p>链表节点 <code>Node</code> 除了包含值，还需额外保存<strong>一个指针</strong>。因此在相同数据量下，<strong>链表比数组占用更多的内存空间</strong>。</p><h3 id="链表操作">链表操作</h3><h4 id="初始化链表">初始化链表</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 实现1-&gt;3-&gt;2-&gt;5-&gt;4的链表</span><br>Node* n0=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">1</span>);<br>Node* n1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">3</span>);<br>Node* n2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">2</span>);<br>Node* n3=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">5</span>);<br>Node* n4=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">4</span>);<br></code></pre></td></tr></tbody></table></figure><p>先创建各节点，并赋值</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">n0-&gt;next=n1;<br>n1-&gt;next=n2;<br>n2-&gt;next=n3;<br>n3-&gt;next=n4;<br></code></pre></td></tr></tbody></table></figure><p>再将各节点按顺序连接起来，即可初始化链表！</p><h4 id="插入节点">插入节点</h4><p>在链表中插入节点非常容易。假设我们想在相邻的两个节点 n0 和 n1 之间插入一个新节点 P ，则只需<strong>改变两个节点指针</strong>即可，时间复杂度为 O(1)。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Node* n0,Node* p)</span></span>{<br>    Node* n1=n0-&gt;next;<br>    p-&gt;next=n1;<br>    n0-&gt;next=p;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Node* n0,Node* p)</span></span>{<br>   p-&gt;next=n0-&gt;next;<br>   n0-&gt;next=p;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="删除节点">删除节点</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 删除链表的节点 n0 之后的首个节点 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Node* n0)</span></span>{<br>    <span class="hljs-keyword">if</span>(n0-&gt;next==<span class="hljs-literal">nullptr</span>){<br>        <span class="hljs-keyword">return</span> ;<br>    }<br>    Node* p=n0-&gt;next;<br>    Node* n1=p-&gt;next;<br>    n0-&gt;next=n1;<br>    <span class="hljs-comment">//释放内存</span><br>    <span class="hljs-keyword">delete</span> p;<br>}<br></code></pre></td></tr></tbody></table></figure><div class="note note-danger">            <p>尽管在删除操作完成后节点 P 仍然指向 n1 ，但实际上遍历此链表已经无法访问到 P ，这意味着 P 已经不再属于该链表了。</p>          </div><h4 id="访问节点">访问节点</h4><p>在链表中<strong>访问节点的效率较低</strong>。我们可以在 O(1)时间下访问数组中的任意元素。链表则不然，程序需要<strong>从头节点出发</strong>，逐个向后遍历，直至找到目标节点，时间复杂度为 O(n)。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 访问链表中索引为 index 的节点 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">access</span><span class="hljs-params">(Node* head,<span class="hljs-type">int</span> index)</span></span>{<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;index;i++){<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span>){<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        }<br>        head=head-&gt;next;<br>        <span class="hljs-comment">//通过索引值i进行遍历计数</span><br>        <span class="hljs-comment">//head指针不断后移，进行迭代，直至索引值</span><br>    }<br>    <span class="hljs-keyword">return</span> head;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="查找节点">查找节点</h4>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-bc5bc4b6" role="button" aria-expanded="false" aria-controls="collapse-bc5bc4b6">        <div class="fold-arrow">▶</div> Wrong Version      </div>      <div class="fold-collapse collapse" id="collapse-bc5bc4b6">        <div class="fold-content">          <p>❌❌❌</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//遍历链表，查找其中值为 target 的节点，输出该节点在链表中的索引</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(Node* head,<span class="hljs-type">int</span> target)</span></span>{<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">nullptr</span>&amp;&amp;head-&gt;val!=target){<br>        head=head-&gt;next;<br>        i++;<br>    }<br>    <span class="hljs-keyword">return</span> i;<br>}<br></code></pre></td></tr></tbody></table></figure><p>❌❌❌<br>未检验是否找到目标节点</p>        </div>      </div>    </div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//遍历链表，查找其中值为 target 的节点，输出该节点在链表中的索引</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span> <span class="hljs-params">(Node* head,<span class="hljs-type">int</span> target)</span></span>{<br>    <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">nullptr</span>){<br>        <span class="hljs-keyword">if</span>(head-&gt;val==target){<br>            <span class="hljs-keyword">return</span> index;<br>        }<br>        head=head-&gt;next;<br>        index++;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Array-VS-Linkedlist">Array  VS.  Linkedlist</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">数组</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:center">存储方式</td><td style="text-align:center">连续内存空间</td><td style="text-align:center">分散内存空间</td></tr><tr><td style="text-align:center">容量扩展</td><td style="text-align:center">长度不可变</td><td style="text-align:center">可灵活扩展</td></tr><tr><td style="text-align:center">内存效率</td><td style="text-align:center">元素占用内存少、但可能浪费空间</td><td style="text-align:center">元素占用内存多</td></tr><tr><td style="text-align:center">访问元素</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">添加元素</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">删除元素</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr></tbody></table><h2 id="常见链表类型">常见链表类型</h2><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/DataStructure/kindoflinkedlist.png?raw=true" alt="常见链表种类"></p><ul><li><p><strong>单向链表</strong>：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 None 。</p></li><li><p><strong>环形链表</strong>：如果我们令<strong>单向链表的尾节点指向头节点</strong>（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。</p></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>{<br>    <span class="hljs-type">int</span> val;<br>    Node* next;<br>    <span class="hljs-built_in">Node</span>(x):<span class="hljs-built_in">val</span>(x),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>){}<br>};<br>Node* head=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">1</span>);<br><br>   ...<br>   ...<br>   ...<br><br>   Node* tail=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">5</span>);<br>   tail-&gt;next=head;<br></code></pre></td></tr></tbody></table></figure><ul><li><strong>双向链表</strong>：与单向链表相比，双向链表<strong>记录了两个方向的引用</strong>。双向链表的节点定义同时包含指向<strong>后继节点</strong>和<strong>前驱节点</strong>指针。相较于单向链表，双向链表更具<strong>灵活性</strong>，可以<strong>朝两个方向遍历链表</strong>，但相应地也需要占用更多的内存空间。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>{<br>    <span class="hljs-type">int</span> val;<br>    Node* next;<br>    Node* prev;<br>    <span class="hljs-built_in">Node</span>(x): <span class="hljs-built_in">val</span>(x),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>){}<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="计算机存储设备">计算机存储设备</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">硬盘</th><th style="text-align:center">内存</th><th style="text-align:center">缓存</th></tr></thead><tbody><tr><td style="text-align:center">用途</td><td style="text-align:center">长期存储数据，包括操作系统、程序、文件等</td><td style="text-align:center">临时存储当前运行的程序和正在处理的数据</td><td style="text-align:center">存储经常访问的数据和指令，减少 CPU 访问内存的次数</td></tr><tr><td style="text-align:center">易失性</td><td style="text-align:center">断电后数据不会丢失</td><td style="text-align:center">断电后数据会丢失</td><td style="text-align:center">断电后数据会丢失</td></tr><tr><td style="text-align:center">容量</td><td style="text-align:center">较大，TB 级别</td><td style="text-align:center">较小，GB 级别</td><td style="text-align:center">非常小，MB 级别</td></tr><tr><td style="text-align:center">速度</td><td style="text-align:center">较慢，几百到几千 MB/s</td><td style="text-align:center">较快，几十 GB/s</td><td style="text-align:center">非常快，几十到几百 GB/s</td></tr><tr><td style="text-align:center">价格（人民币）</td><td style="text-align:center">较便宜，几毛到几元 / GB</td><td style="text-align:center">较贵，几十到几百元 / GB</td><td style="text-align:center">非常贵，随 CPU 打包计价</td></tr></tbody></table><ul><li><strong>硬盘</strong>用于<strong>长期存储大量数据</strong></li><li><strong>内存</strong>用于<strong>临时存储程序运行中正在处理的数据</strong></li><li><strong>缓存</strong>用于<strong>存储经常访问的数据和指令</strong></li></ul><h2 id="Conclusion">Conclusion</h2><ol><li><strong>数组要求相同类型的元素，而在链表中不强调相同类型！</strong></li></ol><ul><li>链表由节点组成，节点之间通过指针连接，各个节点可以<strong>存储不同类型的数据</strong>，例如 int、double、string、object 等。</li><li>相对地，数组元素则必须是相同类型的，这样才能<strong>通过计算偏移量来获取对应元素位置</strong>。例如，数组同时包含 int 和 long 两种类型，单个元素分别占用 4 字节和 8 字节 。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>datastructure</tag>
      
      <tag>linkedlist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Offload Your Hexo Images</title>
    <link href="/2025/08/21/Tutorial/Offload-Your-Hexo-Images/"/>
    <url>/2025/08/21/Tutorial/Offload-Your-Hexo-Images/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>之前刚开始进行<code>Hexo</code>博客撰写，图片都保存在本地<code>Hexo</code>源文件目录（<code>source/images/</code>）文件夹，随着图片增多，管理起来压力增大，于是产生了使用图床，引入外链进行图片存储的想法！</p>          </div><h2 id="Pros-and-Cons"><code>Pros and Cons</code></h2><div class="note note-info">            <ul><li><strong>提升部署速度</strong>：当你执行 <code>hexo g -d </code>部署时，<code>Hexo</code> 需要将你博客的所有源文件，包括文章、主题、以及几十上百张图片，全部处理并拷贝到<code>public</code>文件夹，然后再将这个巨大的文件夹推送到<code>GitHub</code>，这个过程会非常缓慢。</li><li><strong>跨设备写作与协作更方便</strong>：本地存储时，如果你想在另一台电脑上写文章，必须把整个包含所有图片的庞大仓库克隆下来。而使用图床，你只需要克隆<strong>轻量级的博客源码仓库</strong>。文章里的图片都是绝对路径（<code>URL</code>），在任何设备上打开都能正常显示。</li><li><strong>版本控制体验极佳</strong>：使用图床后，你的博客源码仓库非常干净，<code>Git</code> 可以高效地管理文本差异。图片仓库独立出去，两者互不干扰，管理起来清晰明了。</li></ul>          </div><p>  正因为有以上优势，因而我强烈建议将图片放在图床中进行存储，常见的的<strong>图床服务</strong>有<a href="https://oss.console.aliyun.com">阿里云OSS</a>、<a href="https://console.cloud.tencent.com/cos5">腾讯云 COS</a>、<a href="https://portal.qiniu.com/kodo">七牛云</a>、<a href="https://sm.ms/">SM.MS</a>、<a href="https://github.com/">Github</a>等。<br>  考虑到前几者涉及到注册、实名认证、存储收费等问题，再加上认为<code>Github</code>大概率不会倒闭，图片存储较为稳定，且已有账号注册等原因，最终选择使用<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here">PicGo插件</a>和<code>Github</code>实现<strong>图床</strong>功能！</p><div class="note note-info">            <ul><li><p>更简单的图床功能网站：<a href="https://img.tg/richard_11_02_06">IMG.TG</a>（但是感觉像<code>start up company</code>界面有点简陋，担心有<strong>存储不稳定</strong>的问题）（后来发现有国内百度云 CDN 节点加速，口碑还不错，那大抵是我手拙无福消受了😢）</p></li><li><p>不想折腾的可以看看这篇骚操作😀：<a href="https://blog.csdn.net/hotdog233/article/details/119380498?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%8F%AF%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E5%9B%BE%E7%89%87%E7%9B%B4%E9%93%BE&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-119380498.142%5Ev102%5Epc_search_result_base2&amp;spm=1018.2226.3001.4187">图片外链方法大全： 免费的图床！ 告别新浪图床 和 CDN</a></p></li></ul>          </div><p>下面分别介绍 <code>PicGo</code> <strong>图形化桌面版</strong>（适合新手，操作直观）和 <code>PicGo-Core</code> <strong>命令行版</strong>（适合终端用户，轻量化）的完整配置流程，实现<code>GitHub</code>图床功能。</p><h3 id="一、准备工作">一、准备工作</h3><p>以 <code>GitHub</code> 图床 为例，配置步骤如下：</p><ol><li>创建 <code>GitHub</code> 仓库</li><li>新建一个公开仓库（如 <code>blog-images</code>），用于存储图片</li><li>记住仓库路径：用户名/仓库名（如 <code>username/blog-images</code>）</li><li>生成 <code>GitHub</code> 访问令牌</li></ol><ul><li>打开 <code>GitHub</code> → 点击头像 → <code>Settings</code> → <code>Developer settings</code> → <code>Personal access tokens</code> → <code>Generate new token</code></li><li><strong>勾选 <code>repo</code> 权限</strong>（<strong>必须</strong>），生成后复制令牌（仅显示一次，需在记事本中保存）<br>选择并安装<strong>图床插件</strong><br>根据需求安装对应图床的插件，以常用的<code>GitHub</code>图床 为例：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">picgo install github-plus  <span class="hljs-comment"># GitHub 增强插件，支持自定义路径等</span><br></code></pre></td></tr></tbody></table></figure><p>其他常用插件：</p><ul><li>阿里云 OSS：<code>picgo install aliyun-oss</code></li><li>腾讯云 COS：<code>picgo install tencent-cos</code></li><li>七牛云：<code>picgo install qiniu</code></li></ul><h3 id="二、配置图床参数">二、配置图床参数</h3><p>安装 <code>Node.js</code>（命令行版必装，图形化版可选）<br>下载地址：<a href="https://nodejs.org/zh-cn">Node.js 官网</a>（推荐 LTS 版本）。<br>验证安装：终端输入 <code>node -v</code> 和 <code>npm -v</code>，能显示版本号即成功。</p><h3 id="三、PicGo-图形化桌面版配置（新手推荐）">三、<code>PicGo</code> 图形化桌面版配置（新手推荐）</h3><p>图形化界面<strong>操作直观</strong>，无需记忆命令，适合首次配置图床的用户。</p><ol><li>安装<code>PicGo</code>桌面版<br>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo GitHub Releases</a>。<br>选择对应系统版本（<code>Windows</code> 选 <code>exe</code>，<code>Mac</code> 选 <code>dmg</code>），安装后打开。</li><li>配置 GitHub 图床参数<br>左侧菜单栏点击 「<code>图床设置</code>」 → 选择 「<code>GitHub图床</code>」）。<br>依次填写参数：</li></ol><ul><li><code>repo</code>：用户名/仓库名（如 <code>username/blog-images</code>）</li><li><code>branch</code>：分支名（默认 <code>main</code>）</li><li><code>token</code>：刚才生成的 <code>GitHub</code> 令牌</li><li><code>path</code>：图片在<code>github</code>的存储路径（可选，如 <code>images/2024/</code>）</li><li><code>customUrl</code>：自定义 CDN 域名（可选，如 <code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code>）<br>填写完成后，点击 「<code>设为默认图床</code>」，配置生效。</li></ul><ol start="3"><li>验证配置（上传测试）<br>点击 <code>PicGo</code> 主界面的 「<code>上传区</code>」，<strong>直接拖入本地图片</strong>，或<strong>粘贴剪贴板截图</strong>（如微信截图后直接粘贴或电脑快捷键截图）。上传成功后，进入<code>Github</code>，进入图片右键<code>复制图片链接</code>即可！</li></ol><h3 id="三、PicGo-Core-命令行版配置（终端用户推荐）">三、<code>PicGo-Core</code> 命令行版配置（终端用户推荐）</h3><p><strong>轻量化</strong>、<strong>无界面</strong>，适合习惯用终端操作的用户，<strong>可集成到脚本或编辑器</strong>中。</p><ol><li>安装 <code>PicGo-Core</code><br>打开终端（<code>Windows</code> 用 <code>CMD/PowerShell</code>，<code>Mac/Linux</code> 用 <code>Terminal</code>），执行以下命令全局安装：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install picgo -g<br></code></pre></td></tr></tbody></table></figure><ul><li>验证安装：输入 <code>picgo -v</code>，显示版本号即成功。</li></ul><ol start="2"><li>安装 <code>GitHub</code> 图床插件</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">picgo install github-plus<br></code></pre></td></tr></tbody></table></figure><p>其他常用图床插件（按需安装）：</p><ul><li>阿里云 OSS：<code>picgo install aliyun-oss</code></li><li>腾讯云 COS：<code>picgo install tencent-cos</code></li><li>七牛云：<code>picgo install qiniu</code></li></ul><ol start="3"><li>配置 <code>GitHub</code> 图床参数</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">picgo <span class="hljs-built_in">set</span> uploader<br></code></pre></td></tr></tbody></table></figure><p>依次<strong>填写参数</strong>（参考前面图形化版的参数说明）</p><ol start="4"><li>配置完成后，设置 <code>github-plus</code> 为默认上传器：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">picgo use uploader  <span class="hljs-comment"># 再次选择 github-plus 并回车</span><br></code></pre></td></tr></tbody></table></figure><ol start="5"><li>验证配置（上传测试）</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 替换为你图片的本地路径</span><br><span class="hljs-comment"># Windows 示例</span><br>picgo upload C:\Users\Legion\Pictures\test.jpg<br><span class="hljs-comment"># Mac/Linux 示例</span><br>picgo upload ~/Desktop/test.jpg<br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <ul><li>成功：终端会输出图片直链，复制链接到浏览器可打开图片。</li><li>失败：检查 <code>token</code>、<code>repo</code>权限是否开通、图片存储路径是否正确，或网络是否通畅。</li></ul>          </div><h3 id="四、与-Hexo-集成">四、与 <code>Hexo</code> 集成</h3><p>在 <code>Hexo</code>文章中直接使用上传后的图片链接，例如：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">示例图片</span>](<span class="hljs-link">Github直链地址</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="链接在csdn无法显示问题">链接在csdn无法显示问题</h3><p>  当我们在<code>github</code>配置好图床服务后，想要在<code>CSDN</code>进行引用 ，会发现编辑时显示正常，但是发布后会显示图片转存失败，如下图所示。这是因为<code>CSDN</code> 为了防止其他网站直接引用（消耗 CSDN 的服务器流量和带宽）本站的图片资源，会设置<strong>防盗链功能</strong>。<br><img src="https://github.com/Richard110206/Blog-image/blob/main/article/%20ImageHosting/editor.png?raw=true" alt="编辑器中显示正常"></p><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/%20ImageHosting/imagefail.png?raw=true" alt="发布后显示转存失败"></p><p>  当在外站中插入一个来自 <code>github.com</code> 的图片链接时，用户的浏览器会向 <code>GitHub</code> 的服务器请求这张图片。<code>GitHub</code> 服务器在响应时，可能会检查请求的来源（<code>Referer</code>）。如果来源是 <code>csdn.net</code>，而 <code>GitHub</code> 并未将 <code>CSDN</code> 加入白名单，<code>GitHub</code> 可能会<strong>拒绝这个请求或返回一个错误</strong>（如 <code>403 Forbidden</code>）。反过来，如果 <code>CSDN</code> 检测到图片不是来自自己的服务器，也可能会拦截显示。</p><p>  在 <code>CSDN</code> 博客编辑器中，点击图片上传按钮。选择图片进行上传。<code>CSDN</code> 会<strong>自动将图片上传到自己的图床</strong>，并生成一个新的、稳定的 <code>CSDN</code> <strong>内部链接</strong>，这时候就可以正常引用图片了！</p><p>封面来源：<a href="https://x.com/Imagen_Network/status/1957955746492215713/photo/1">Imagen AI</a></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tutorial</tag>
      
      <tag>hexo</tag>
      
      <tag>image hosting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS Basic Tutorial</title>
    <link href="/2025/08/18/Full-Stack/CSS/"/>
    <url>/2025/08/18/Full-Stack/CSS/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-CSS？">What is CSS？</h2><p>CSS(Cascading Style Sheet)是用于<strong>控制页面样式与布局</strong>并允许<strong>样式信息与网页内容相分离</strong>的一种标记性语言。如果HTML是人，那么CSS就是我们身上的衣服和化妆品！</p><p>CSS由<strong>选择器</strong>，<strong>属性</strong>和<strong>属性值</strong>组成：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">selector{prosperties:value;}<br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <ul><li>选择器：用于定义CSS样式名称</li><li>属性：例如网页中的字体样式、字体颜色等</li><li>属性值：例如字体的大小、颜色等</li></ul>          </div><div class="note note-danger">            <ul><li>属性和属性值必须写在{}内，且用“:”隔开</li><li>每写完一个完整的属性和属性值，必须用“;”隔开</li><li>如果一个属性有多个属性值，每个属性值用<code>space</code>隔开</li></ul>          </div><h3 id="引入CSS">引入CSS</h3><h4 id="1-内联引入">1.内联引入</h4><p>每个HTML元素都拥有一个<code>&lt;style&gt;</code>属性，我们的CSS代码都是作为HTML中<code>&lt;style&gt;</code>属性的属性值出现的：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red;"</span>&gt;</span>这是段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p style="color: red;">这是段落</p><h4 id="2-内部引入">2.内部引入</h4><p>当我们页面有很多元素时，这样内联引入CSS样式代码显然是不合适的，比如当<strong>同一个元素需要复用同一种样式</strong>，我们需要在每一个<strong>元素内部手动添加</strong>，这样产生很多<strong>重复性</strong>的操作和劳动。所以我们可以将有相同需求的元素整理好<strong>分成许多类别</strong>，让相同类别元素使用同一种样式。</p><p>我们使用<code>&lt;style&gt;</code>标签进行对CSS的引入，在页面的<code>&lt;head&gt;</code>区域引入<code>&lt;style&gt;</code>标签，在其中写入需要的CSS样式：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span>{</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">    }</span><br><span class="language-css">    <span class="hljs-selector-tag">span</span>{</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:green;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    }</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> It's been a long day without you, my friend.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>And I'll tell you all about it when I see you again.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="3-外部引入">3.外部引入</h4><p>在我们实际开发过程中，项目的页面不会少，如果我们希望<strong>所有的页面都使用同一个CSS样式</strong>，那么我们就需要将CSS样式单独放在一个文件中（<strong>新建一个以<code>.css</code>为后缀名的样式表</strong>）然后通过<code>&lt;link&gt;</code>标签引入到我们的页面中，这是你还会发现，当我们需要对所有页面进行样式修改时，就只需要修改一个CSS文件，不用对所有页面逐个修改！</p><h3 id="CSS选择器">CSS选择器</h3><h4 id="1-元素选择器">1.元素选择器</h4><p>对HTML元素进行选取，如<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>等</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;sytle&gt;<br><span class="hljs-selector-tag">p</span>{<br>    <span class="hljs-attribute">color</span>:red;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br>}<br><span class="hljs-selector-tag">ul</span>{<br>    <span class="hljs-attribute">list-style-type</span>:none;<br>}<br><span class="hljs-selector-tag">a</span>{<br>    <span class="hljs-attribute">text-decoration</span>:none;<br>}<br>&lt;/style&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="2-类选择器">2.类选择器</h4><p>通过<code>class</code>属性确定类名进行选取，<strong>相同类名的元素</strong>含有相同的CSS样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span> class="title"&gt;我是一个段落&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class="<span class="hljs-attribute">container</span>"&gt;这是一个容器&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;sytle type="<span class="hljs-selector-tag">text</span>/css"&gt;<br><span class="hljs-selector-class">.title</span>{<br>    <span class="hljs-attribute">color</span>:red;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">text-align</span>:center;<br>}<br>&lt;/sytle&gt;<br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <ul><li>类选择器前需要加<code>.</code></li><li>在<code>vscode</code>中，属性名+<code>.</code>+<code>类名</code>，<code>Tab</code>自动补全&lt;元素  class=“类名”&gt;的形式</li></ul>          </div><h4 id="3-ID选择器">3.ID选择器</h4><p>以上两种都是对同一类元素进行选取和操作，当我们需要<strong>单独为一个元素</strong>进行操作时，通过<code>id</code>属性确定ID名进行选取，如<code>&lt;p id="title"&gt;</code>、<code>&lt;ul id="list"&gt;</code>，相同ID名的含有相同的CSS样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span> id="title"&gt;我是一个段落&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id="<span class="hljs-attribute">container</span>"&gt;这是一个容器&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;sytle type="<span class="hljs-selector-tag">text</span>/css"&gt;<br><span class="hljs-selector-id">#title</span>{<br>    <span class="hljs-attribute">color</span>:red;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">text-align</span>:center;<br>}<br><span class="hljs-selector-id">#container</span>{<br>    <span class="hljs-attribute">background-color</span>:yellow;<br>}<br>&lt;/sytle&gt;<br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <ul><li>ID选择器前需要加<code>#</code></li></ul>          </div><h2 id="网页常用样式">网页常用样式</h2><h3 id="字体">字体</h3><h4 id="font-family字体"><code>font-family</code>字体</h4><h4 id="font-size字号"><code>font-size</code>字号</h4><div class="note note-info">            <ul><li>像素（px）</li><li>点数（pt）</li><li>英寸（in）、厘米（cm）、毫米（mm）</li><li>倍数（em）</li><li>百分比（%）</li></ul>          </div><h4 id="font-weight字重"><code>font-weight</code>字重</h4><div class="note note-info">            <ul><li>正常（normal）：400</li><li>加粗（bold）：700</li><li>更粗（bolder）</li><li>更细（lighter）</li><li>数字（100~900）：只能写成整百的数字</li></ul>          </div><h4 id="color颜色"><code>color</code>颜色</h4><p>相关内容前文有相应介绍，不再赘述</p><div class="note note-info">            <ul><li>color_name</li><li>hex_number</li><li>rgb_number</li><li>rgba_number</li></ul>          </div><h4 id="text-decoration文本修饰"><code>text-decoration</code>文本修饰</h4><div class="note note-info">            <ul><li>none：无修饰</li><li>underline：下划线</li><li>overline：上划线</li><li>line-through：中划线</li><li>blink：闪烁</li></ul>          </div><h3 id="段落">段落</h3><h4 id="letter-spacing字间距"><code>letter-spacing</code>字间距</h4><div class="note note-info">            <ul><li>normal：正常</li><li>length：长度</li></ul>          </div><h4 id="word-spacing词间距"><code>word-spacing</code>词间距</h4><div class="note note-info">            <ul><li>normal：正常</li><li>length：长度</li></ul>          </div><h4 id="text-indent缩进"><code>text-indent</code>缩进</h4><div class="note note-info">            <ul><li>length：长度</li><li>%：百分比</li></ul>          </div><h4 id="text-align水平对齐"><code>text-align</code>水平对齐</h4><div class="note note-info">            <ul><li>left：左对齐</li><li>right：右对齐</li><li>center：居中对齐</li><li>justify：两端对齐</li></ul>          </div><h4 id="vertical-align垂直对齐"><code>vertical-align</code>垂直对齐</h4><div class="note note-info">            <ul><li>top：顶部对齐</li><li>middle：垂直居中对齐</li><li>bottom：底部对齐</li></ul>          </div><h4 id="line-height行间距"><code>line-height</code>行间距</h4><div class="note note-info">            <ul><li>normal：正常</li><li>number：与当前字体尺寸相乘来设置行间距</li><li>length：固定行间距</li></ul>          </div><h3 id="边框">边框</h3><h4 id="border-style边框线型"><code>border-style</code>边框线型</h4><div class="note note-info">            <ul><li>none：无边框</li><li>hidden：隐藏边框</li><li>dotted：点状边框</li><li>dashed：虚线边框</li><li>solid：实线边框</li><li>double：双线边框</li></ul>          </div><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-style</span>:dotted solid double dashed;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">上边框是点状<br>右边框是实线<br>下边框是双线<br>左边框是虚线<br></code></pre></td></tr></tbody></table></figure><hr><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-style</span>:dotted solid double;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">上边框是点状<br>右边框和左边框是实线<br>下边框是双线<br></code></pre></td></tr></tbody></table></figure><hr><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-style</span>:dotted solid;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">上边框和下边框是点状<br>右边框和左边框是实线<br></code></pre></td></tr></tbody></table></figure><hr><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-style</span>:dotted;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">四个边框均为点状<br></code></pre></td></tr></tbody></table></figure><hr><h4 id="border-color边框颜色"><code>border-color</code>边框颜色</h4><h4 id="border-width边框宽度"><code>border-width</code>边框宽度</h4><h2 id="盒子模型">盒子模型</h2><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/Html&amp;&amp;CSS/div.png?raw=true" alt="盒子模型图解"></p><p>  根据上图，<strong>俯视</strong>这个盒子，内边距（padding）可以理解为<strong>盒子里装的东西和边框的距离</strong>；而边框（border）就是<strong>盒子本身</strong>；内容（content）就是<strong>盒子中装的东西</strong>；外边距就是边框外面自动留出的一段空白；而填充（padding）就是怕盒子里装的东西损坏而添加的泡沫或者其他抗震<strong>材料</strong>；至于边界（margin）则说明盒子摆放时不能全部堆在一起，要<strong>留有一定空隙</strong>保持通风，同时方便取出！</p><h3 id="外边距设置">外边距设置</h3><p>使用<code>margin</code>属性设置<strong>外边距</strong>，<code>margin</code>边界环绕在该元素的<code>content</code>区域四周，如果<code>margin</code>为0，则<code>margin</code>边界与<code>border</code>边界重合。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>margin-top</code></td><td>上外边距</td></tr><tr><td><code>margin-right</code></td><td>右外边距</td></tr><tr><td><code>margin-bottom</code></td><td>下外边距</td></tr><tr><td><code>margin-left</code></td><td>左外边距</td></tr></tbody></table><div class="note note-info">            <p><code>margin</code>属性值仍然有<strong>四个参数</strong>，对应上、右、下、左即<strong>顺时针方向旋转</strong></p>          </div><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/Html&amp;&amp;CSS/div_example_1.png?raw=true" alt="margin效果图"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>{</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> green solid;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:crimson</span><br><span class="language-css">        }</span><br><span class="language-css">        <span class="hljs-selector-class">.d2</span>{</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">            // <span class="hljs-attribute">margin</span>:<span class="hljs-number">20px</span> auto <span class="hljs-number">40px</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><div class="note note-danger">            <p>当两个垂直外边距相遇时，他们将会<strong>形成一个外边距</strong>，合并后的外边距的高度等于两个<strong>外边距的最大高度</strong>（注意不是外边距相加）</p>          </div><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/Html&amp;&amp;CSS/margin.png?raw=true" alt="margin外边距合并"></p><h3 id="内边距设置">内边距设置</h3><p>使用<code>padding</code>属性设置<strong>内边距</strong>，内边距在边框和内容区之间，<code>padding</code>属性接受长度值和百分比，但不允许使用负值。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>padding-top</code></td><td>上内边距</td></tr><tr><td><code>padding-right</code></td><td>右内边距</td></tr><tr><td><code>padding-bottom</code></td><td>下内边距</td></tr><tr><td><code>padding-left</code></td><td>左内边距</td></tr></tbody></table><h3 id="弹性盒子">弹性盒子</h3><div class="note note-info">            <p>默认流式布局中，块级元素（如<code>div</code>）会独占一行，多个<code>div</code>会垂直堆叠，无法横向排列；而当我们使用<code>float</code>和<code>inline-box</code>进行横向排列时，会带来间距、对齐、父元素高度塌陷等问题。</p>          </div><p>  当一种页面需要<strong>适应不同的屏幕大小以及设备类型</strong>时，弹性盒子可以确保元素拥有恰当行为的布局方式，这样的布局模型能提供一种<strong>更有效的方式来对一个容器中的子元素进行排列、对齐、分配空白空间</strong>！</p><div class="note note-danger">            <ul><li>只要给容器设置<code>display: flex;</code><strong>任何一个容器</strong>我们都可以设置为弹性盒子</li><li>设为<code>flex</code>布局以后，子元素的<code>float</code>、<code>clear</code>、<code>vertical-align</code><strong>属性将失效</strong></li></ul>          </div><ul><li><code>flex-direction</code>：设置<strong>排列方向</strong>（沿纵轴还是横轴）（正序还是倒序）</li></ul><table><thead><tr><th>值</th><th>描述</th><th>动画演示</th></tr></thead><tbody><tr><td><code>row</code></td><td>默认值，水平显示，起点在左端</td><td>1️⃣2️⃣3️⃣4️⃣_ _ _ _</td></tr><tr><td><code>row-reverse</code></td><td>盒子方向相反，且起点在右端</td><td>_ _ _ _4️⃣3️⃣2️⃣1️⃣</td></tr><tr><td><code>column</code></td><td>垂直显示，起点在上端</td><td>无</td></tr><tr><td><code>column-reverse</code></td><td>盒子方向相反，且起点在下端</td><td>无</td></tr></tbody></table><ul><li><code>justify-content</code>：在<strong>主轴（横轴）上的对齐方式</strong></li></ul><table><thead><tr><th>值</th><th>描述</th><th>动画演示</th></tr></thead><tbody><tr><td><code>flex-start</code></td><td>起点在左端</td><td>1️⃣2️⃣3️⃣4️⃣_ _ _ _</td></tr><tr><td><code>flex-end</code></td><td>终点在右端</td><td>_ _ _ _1️⃣2️⃣3️⃣4️⃣</td></tr><tr><td><code>center</code></td><td>居中对齐</td><td>_ _1️⃣2️⃣3️⃣4️⃣ _ _</td></tr><tr><td><code>space-between</code></td><td>项目之间的间隔相等，紧贴左右两端</td><td>1️⃣ _ 2️⃣ _ 3️⃣ _ 4️⃣</td></tr><tr><td><code>space-around</code></td><td>每个项目两侧的间隔相等</td><td>_ 1️⃣ _ 2️⃣ _ 3️⃣ _ 4️⃣ _</td></tr><tr><td><code>space-evenly</code></td><td>项目之间的间隔相等，且项目两侧的间隔相等</td><td>_ 1️⃣ _ 2️⃣ _ 3️⃣ _ 4️⃣ _</td></tr></tbody></table><ul><li><code>align-items</code>：在<strong>侧轴（纵轴）上的对齐方式</strong></li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>flex-start</code></td><td>起点在上端</td></tr><tr><td><code>flex-end</code></td><td>终点在下端</td></tr><tr><td><code>center</code></td><td>居中对齐</td></tr><tr><td><code>baseline</code></td><td>基线对齐</td></tr><tr><td><code>stretch</code></td><td><code>auto</code>尽可能接近所在行的尺寸</td></tr></tbody></table><ul><li><code>flex-wrap</code>：弹性盒子的<strong>换行方式</strong></li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>nowrap</code></td><td>默认值，不换行，盒子会被压缩</td></tr><tr><td><code>wrap</code></td><td>换行，第一行在上方</td></tr><tr><td><code>wrap-reverse</code></td><td>反向换行，第一行在下方</td></tr></tbody></table><ul><li><code>align-content</code>：<strong>多行情况下侧轴（纵轴）的对齐方式</strong></li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>stretch</code></td><td>默认值<code>auto</code>，将占满整个容器的高度</td></tr><tr><td><code>flex-start</code></td><td>起点在上端</td></tr><tr><td><code>flex-end</code></td><td>起点在下端</td></tr><tr><td><code>center</code></td><td>上下居中对齐</td></tr><tr><td><code>space-between</code></td><td>项目之间的间隔相等</td></tr><tr><td><code>space-around</code></td><td>每个项目两侧的间隔相等</td></tr></tbody></table><div class="note note-danger">            <p>该属性只在多行（<code>flex-wrap: wrap</code>或<code>flex-wrap: wrap-reverse</code>）的情况下生效！</p>          </div><p>下面是使用CSS和HTML创建的“待办事项”demo！</p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/Html%26%26CSS/%E6%A0%B7%E4%BE%8B%E5%B1%95%E7%A4%BA.png" alt="“待办事项”样例展示"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"todolist"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span><br>            Richard的todolist<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"todo-form"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"todo-input"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入待办事项"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"todo-button"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item completed"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"name"</span>&gt;</span>吃饭<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"del"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"name"</span>&gt;</span>睡觉<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"del"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"name"</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"del"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.completed</span>{</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: line-through;</span><br><span class="language-css">            <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.4</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">        <span class="hljs-selector-class">.del</span>{</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        }</span><br><span class="language-css">        <span class="hljs-selector-class">.item</span>{</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 垂直居中对齐 */</span></span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">8px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>; </span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>); <span class="hljs-comment">/* 修复阴影语法 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f9f9f9</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.todo-form</span>{ </span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto; <span class="hljs-comment">/* 居中表单 */</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 固定表单高度 */</span></span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.todo-input</span>{ </span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dfe1e5</span>; </span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">100px</span>); <span class="hljs-comment">/* 自动计算宽度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; <span class="hljs-comment">/* 与按钮同高 */</span></span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span>; <span class="hljs-comment">/* 修复语法错误 */</span></span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-comment">/* 确保padding不增加总宽度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.todo-button</span>{</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; <span class="hljs-comment">/* 与输入框同高 */</span></span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(</span><br><span class="language-css">                to right,</span><br><span class="language-css">                <span class="hljs-built_in">rgb</span>(<span class="hljs-number">113</span>,<span class="hljs-number">65</span>,<span class="hljs-number">168</span>),</span><br><span class="language-css">                <span class="hljs-built_in">rgba</span>(<span class="hljs-number">44</span>, <span class="hljs-number">144</span>, <span class="hljs-number">251</span>,<span class="hljs-number">1</span>)</span><br><span class="language-css">            );</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 垂直居中文字 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 与高度一致实现垂直居中 */</span></span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">user-select</span>: none;</span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>{</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(</span><br><span class="language-css">                to right,</span><br><span class="language-css">                <span class="hljs-built_in">rgb</span>(<span class="hljs-number">113</span>,<span class="hljs-number">65</span>,<span class="hljs-number">168</span>),</span><br><span class="language-css">                <span class="hljs-built_in">rgba</span>(<span class="hljs-number">44</span>, <span class="hljs-number">144</span>, <span class="hljs-number">251</span>,<span class="hljs-number">1</span>)</span><br><span class="language-css">            );</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.todolist</span>{</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>; <span class="hljs-comment">/* 限制最大宽度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> auto; <span class="hljs-comment">/* 水平居中 */</span></span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">15px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>);</span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.title</span>{</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">113</span>,<span class="hljs-number">65</span>,<span class="hljs-number">168</span>);</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.del</span> {</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff4444</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fef0f0</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.name</span> {</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        }</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></tbody></table></figure><p>封面来源：<a href="https://www.youtube.com/watch?v=wsTv9y931o8">Learn CSS Flexbox in 20 Minutes (Course)</a></p>]]></content>
    
    
    <categories>
      
      <category>Full Stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Casual Chronicles</title>
    <link href="/2025/08/13/other/Casual-Chronicles/"/>
    <url>/2025/08/13/other/Casual-Chronicles/</url>
    
    <content type="html"><![CDATA[<h1>Casual Chronicles （生活杂谈）</h1><p>记录对学习、生活、社会的<strong>一点想法</strong>，或是一些看到的<strong>有意思的内容</strong>！</p><h1>2025</h1><h2 id="7-25">7.25</h2><p>  听了UC Berkeley的CS61A 感觉US的CS课程比国内超前太多了！图文并茂、简洁利索、一目了然的！他们注重<strong>编程思想的培养</strong>，和<strong>项目实战</strong>，在实践中感受编程的魅力！而我们的老师总是长篇累牍的教授语法知识，煞是枯燥无味！</p><h2 id="8-12">8.12</h2><p>  在AI高速发展的当下，我们计算机专业的学习也应该与时俱进，从前我总是习惯于看书学习，从最基础的点开始将知识吸收，往往还没做出什么成果，学习的热情就被消耗殆尽，感叹一句“真难啊”！但是现在有了AI的帮助，我们的学习或许可以不那么注重细节，可以<strong>自顶向下的</strong>，<strong>得“意”忘“形”的</strong>，我们只需先了解其大致框架、工作原理，再利用AI在框架中缝缝补补，哪里有问题去学哪里，这样不仅可以短时间内做出一定成果提升成就感，同时也避免的花费大量时间摄入无用或极少使用的知识！</p><h2 id="8-15">8.15</h2><p>  今天和高中同学聚餐，聊完心里挺多感触的——不同学校的教材、教学进度和深度，差别真的太大了。<br>  之前刷手机看到BUAA的学生，大一上学期专业课的期末大作业，那难度望而生畏；饭桌上也听同学说，他们课堂上在学用MATLAB做人脸识别，可我们现在还在跟基本语法死磕。<br>  回头想想自己的进度，才更真切地感受到学校层次带来的差异。好学校的学生和老师要求本就更紧迫，反观自己，如果没有这种外界的推力，恐怕真会像温水煮青蛙，在不知不觉中就被环境带着，慢慢落后于时代，也落后于那些本来就走在前面的同学。<br>  尤其佩服一位在top3的同学，大一学年不仅保持rank1的高绩点，还能从零开始，一年里啃下那么多CS基础知识，跟着导师做各种项目。<br>  我也知道<strong>不能好高骛远</strong>，但还是得时时抬头看看更高的山。不用急着跟别人比，但得给自己找些“<strong>自驱力</strong>”，别停下往前走的脚步。</p><h2 id="8-16">8.16</h2><p>  看到同学学习进度之快、掌握之扎实，瞠目结舌！<br>  确实之前不应该焦急的广泛学习各种语言，c++、Python、MATLAB，现在发现其实仅仅需要学明白c++，其他语言的学习都是以天可以进行速通的，AI时代纠结于底层语法更是没有什么必要的，“AI能完成的 都不需要我们进行学习”，这意味着我们可以更高效的进行项目的学习和开发，速度与效率大大提升！</p><h2 id="8-18">8.18</h2><p>  看到<a href="https://waylau.com/">老卫（柳伟卫）的博客 - 关注编程、系统架构、性能优化</a><br>  从2009-2025年，<strong>持续不断的进行博客创作</strong>，从开始的<code>Github</code>教程，这一步步见证了<strong>从小白到大佬的蜕变之路</strong>，也更加坚定了我持续学习进行博客创作的动力！</p><h2 id="8-22">8.22</h2><p>  开会区up主太精辟了！<a href="https://www.bilibili.com/video/BV1Y6uFztEgS/?spm_id_from=333.1387.homepage.video_card.click&amp;vd_source=54c2981c1a7a8e0433b7d23096150b7a">暑假，越来越形同虚设了</a></p><div class="note note-info">            <p>“不要在迷茫的时候，盲目堆积工作量来麻痹自己”</p>          </div>]]></content>
    
    
    
    <tags>
      
      <tag>updating</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML Fundamentals Guide</title>
    <link href="/2025/08/12/Full-Stack/Html/"/>
    <url>/2025/08/12/Full-Stack/Html/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>或许我现在才深刻认识到计算机是一门实践的学科还不算太晚，上学期我抱着书将HTML和CSS啃完，看似语法从“入门”到“精通”，但没有项目进行实战，导致记忆并不深刻，仅仅“<strong>纸上得来终觉浅</strong>” ，遂现在以一个案例进行引入，学习（亦或是复习）HTML和CSS的语法！</p>          </div><p>进阶速通版本参看 <a href="https://doc.duke486.com/">Web-Dev-Beginner - Quick start to front &amp; back-end Dev</a></p><h2 id="What-is-HTML？">What is HTML？</h2><p>HTML(Hyper Text Markup Language)是<strong>超文本编辑语言</strong>，与我们平时学习的c++、python等编程语言，它是一种标记语言，可以理解为markdown语法的进阶，毕竟我们博客撰写的markdown最后都是通过渲染为HTML展示在用户面前的，其由一套标记标签组成，大多数标签<strong>由一对尖括号包裹</strong>，他们定义了网页中每个元素的作用和显示方式，像是这样：<code>&lt;标签名&gt;文本内容&lt;/标签名&gt;</code>，这种形式的叫做<strong>双标签</strong>，标签内的内容会被浏览器渲染。比如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>有些标签是单独存在的，不需要结束标签，这些叫做<strong>自闭和标签</strong>，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">sre</span>=<span class="hljs-string">"image.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"描述"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="HTML-basic-structure">HTML basic structure</h2><p>在vscode中输入<code>!</code>，在按下<code>Tab</code>，会自动补全HTML的基本结构：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ol><li>开始标签<code>&lt;html&gt;</code>：限定了文档的开始和结束点</li><li>头部标签<code>&lt;head&gt;</code>：描述文档的各种属性和信息</li><li>标题标签<code>&lt;title&gt;</code>：定义文档标题，通常会直接显示在浏览器窗口的标题栏或状态栏上，当用户将网页收藏或作为书签时，标题将成为文档链接的默认名称</li><li>主题标签<code>&lt;body&gt;</code>：包含文档所有内容，后续我们主要的HTML代码也在这里编写</li><li>元信息标签<code>&lt;meta&gt;</code>：提供有关页面的信息，其永远位于head元素内部</li><li><code>&lt;!DOCTYPE&gt;</code>标签:必须位于HTML文档第一行，没有结束标签，且不区分大小写</li></ol><h2 id="HTML基本语法">HTML基本语法</h2><h3 id="标题文字">标题文字</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1>一级标题</h1><h2>二级标题</h2><h3>三级标题</h3><h4>四级标题</h4><h5>五级标题</h5><h6>六级标题</h6><div class="note note-primary">            <p>看上去与markdown中的<code>#</code>效果差不多</p>          </div><div class="note note-danger">            <p>不要为了使文字加粗而使用h标签，文字加粗使用b标签<br>这里标题会在目录形成<strong>树形结构</strong>！</p>          </div><h3 id="文字对齐">文字对齐</h3><p>网页中都是使用<strong>默认的对齐方式</strong>，但当我们需要其他的对齐方式时就需要使用<code>align</code>属性进行设置</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>right</td><td>右对齐</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">align="对齐方式"<br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span>这是一个居中的一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 align="center">这是一个居中的一级标题</h1><h3 id="文字样式">文字样式</h3><p>在HTML中，字体效果必须在浏览器安装相应字体后才能浏览，否则还是会被浏览器中的通用字体所替代。</p><table><thead><tr><th>字体名称</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>微软雅黑</strong></td><td>中文网页/UI设计首选字体</td></tr><tr><td><strong>黑体</strong></td><td>中文标题/广告宣传</td></tr><tr><td><strong>宋体</strong></td><td>中文印刷/正式文档</td></tr><tr><td><strong>楷体</strong></td><td>中文手写风格/艺术排版</td></tr><tr><td><strong>仿宋</strong></td><td>中文公文/古籍排版</td></tr><tr><td><strong>Georgia</strong></td><td>标题、优雅排版</td></tr><tr><td><strong>Times New Roman</strong></td><td>印刷品、正式文档</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"Simsun"</span>&gt;</span>应用了宋体文字<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><font face="Simsun">应用了宋体文字</font></p><h3 id="段落换行">段落换行</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>此处换行<br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>It's been a long day without you, my friend.And I'll tell you all about it when I see you again.We've come a long way from where we began.Oh I'll tell you all about it when I see you again<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>It's been a long day without you, my friend.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>And I'll tell you all about it when I see you again.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>We've come a long way from where we began.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>Oh I'll tell you all about it when I see you again<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>It's been a long day without you, my friend.And I'll tell you all about it when I see you again.We've come a long way from where we began.Oh I'll tell you all about it when I see you again.</p><p>It's been a long day without you, my friend.<br>And I'll tell you all about it when I see you again.<br>We've come a long way from where we began.<br>Oh I'll tell you all about it when I see you again.</p><p>——《See You Again》</p><h3 id="字体颜色">字体颜色</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"颜色参数"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>颜色参数值有多种表达形式：</p><h4 id="1-颜色关键字">1. 颜色关键字</h4><p>直接使用预定义的颜色名称（不区分大小写）：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red;"</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: blue;"</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: green;"</span>&gt;</span>绿色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: orange;"</span>&gt;</span>橙色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: purple;"</span>&gt;</span>紫色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: gray;"</span>&gt;</span>灰色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: black;"</span>&gt;</span>黑色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p style="color: red;">红色</p><p style="color: blue;">蓝色</p><p style="color: green;">绿色</p><p style="color: orange;">橙色</p><p style="color: purple;">紫色</p><p style="color: gray;">灰色</p><p style="color: black;">黑色</p><h4 id="2-十六进制（HEX）">2. 十六进制（HEX）</h4><p>格式：#RRGGBB 或 #RGB（简写）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #FF0000;"</span>&gt;</span>红色（完整）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #00FF00;"</span>&gt;</span>绿色（完整）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #0000FF;"</span>&gt;</span>蓝色（完整）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #F00;"</span>&gt;</span>红色（简写）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #0F0;"</span>&gt;</span>绿色（简写）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #00F;"</span>&gt;</span>蓝色（简写）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #FFA500;"</span>&gt;</span>橙色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: #800080;"</span>&gt;</span>紫色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p style="color: #FF0000;">红色（完整）</p><p style="color: #00FF00;">绿色（完整）</p><p style="color: #0000FF;">蓝色（完整）</p><p style="color: #F00;">红色（简写）</p><p style="color: #0F0;">绿色（简写）</p><p style="color: #00F;">蓝色（简写）</p><p style="color: #FFA500;">橙色</p><p style="color: #800080;">紫色</p><h4 id="3-RGB-RGBA">3. RGB/RGBA</h4><p>格式：rgb(R, G, B) 或 rgba(R, G, B, A)（带透明度）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgb(255, 0, 0);"</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgb(0, 255, 0);"</span>&gt;</span>绿色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgb(0, 0, 255);"</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgba(255, 0, 0, 0.5);"</span>&gt;</span>半透明红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgba(0, 255, 0, 0.3);"</span>&gt;</span>30%透明绿色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgba(0, 0, 255, 0.7);"</span>&gt;</span>70%透明蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgb(255, 165, 0);"</span>&gt;</span>橙色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: rgba(128, 0, 128, 0.6);"</span>&gt;</span>60%透明紫色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p style="color: rgb(255, 0, 0);">红色</p><p style="color: rgb(0, 255, 0);">绿色</p><p style="color: rgb(0, 0, 255);">蓝色</p><p style="color: rgba(255, 0, 0, 0.5);">半透明红色</p><p style="color: rgba(0, 255, 0, 0.3);">30%透明绿色</p><p style="color: rgba(0, 0, 255, 0.7);">70%透明蓝色</p><p style="color: rgb(255, 165, 0);">橙色</p><p style="color: rgba(128, 0, 128, 0.6);">60%透明紫色</p><h3 id="文字的上下标">文字的上下标</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>上标标签<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>下标标签<br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">x<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>+x<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>+x+1=0<br>x<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>+x<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>+x+1=0<br></code></pre></td></tr></tbody></table></figure><p>x<sup>3</sup>+x<sup>2</sup>+x+1=0<br>x<sub>3</sub>+x<sub>2</sub>+x+1=0</p><h3 id="文字的删除线">文字的删除线</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strike</span>&gt;</span>删除的文字<span class="hljs-tag">&lt;/<span class="hljs-name">strike</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strike>删除的文字</strike></p><h3 id="文字加粗">文字加粗</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>需要加粗的文字<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>需要加粗的文字</strong></p><h3 id="给网页添加图片">给网页添加图片</h3><h4 id="图片格式">图片格式</h4><p>网页中的图像格式通常有三种，即GIF、JPEG、PNG，目前前两者的支持情况最佳，多数浏览器都可以兼容，而PNG格式的图片属于无损压缩，其清晰度更高，且支持图片保留透明度，因而其所占存储空间对比GIF和JPEG稍大。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"图片文件地址"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>src可以是绝对路径，也可以是相对路径，也可以是图片的网络链接地址</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/banner_img/background.jpg"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><img src="/banner_img/background.jpg"><h4 id="图片大小">图片大小</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"图片文件地址"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"图片的宽度"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"图片的高度"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">"/banner_img/background.jpg"</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">"500px"</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">"300px"</span>&gt;<br></code></pre></td></tr></tbody></table></figure><img src="/banner_img/background.jpg" width="500px" height="300px"><h4 id="水平间距">水平间距</h4><p>如果不进行换行，那么添加得到图像会紧跟在文字后面，也可以用来设置图片间间距效果</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"图片文件地址"</span> <span class="hljs-attr">hspace</span>=<span class="hljs-string">"水平间距"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/banner_img/background.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"70px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"40px"</span> <span class="hljs-attr">hspace</span>=<span class="hljs-string">"30px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/banner_img/background.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"70px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"40px"</span> <span class="hljs-attr">hspace</span>=<span class="hljs-string">"30px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/banner_img/background.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"70px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"40px"</span> <span class="hljs-attr">hspace</span>=<span class="hljs-string">"30px"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><img src="/banner_img/background.jpg" width="100px" height="60px" hspace="30px"><img src="/banner_img/background.jpg" width="100px" height="60px" hspace="30px"><img src="/banner_img/background.jpg" width="100px" height="60px" hspace="30px"><h4 id="提示文字">提示文字</h4><p>当指针放在图片上面时会有提示文字</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"图片文件地址"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"提示文字"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/banner_img/background.jpg"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"background"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><img src="/banner_img/background.jpg" title="background"><h3 id="创建表格">创建表格</h3><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td><code>&lt;table&gt;&lt;/table&gt;</code></td><td>表格标记</td></tr><tr><td><code>&lt;tr&gt;&lt;/tr&gt;</code></td><td>行标记</td></tr><tr><td><code>&lt;td&gt;&lt;/td&gt;</code></td><td>单元格标记</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>学号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>654321<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>85<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><code>&lt;th&gt;&lt;/th&gt;</code>为表格文字加粗</p><table><tbody><tr>    <th>姓名</th>    <th>学号</th>    <th>成绩</th></tr><tr>    <td>张三</td>    <td>08241110</td>    <td>90</td></tr><tr>    <td>李四</td>    <td>08241120</td>    <td>95</td></tr></tbody></table><h3 id="行的的背景">行的的背景</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"颜色值"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="表格的对齐方式">表格的对齐方式</h3><h4 id="水平对齐">水平对齐</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"水平对齐方式"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="垂直对齐">垂直对齐</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">"垂直对齐方式"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="表格的的背景">表格的的背景</h3><h4 id="背景颜色">背景颜色</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"颜色值"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="背景图片">背景图片</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"图片地址"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="单元格格式">单元格格式</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"单元格宽度"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"单元格高度"</span>&gt;</span>单元格内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="合并单元格">合并单元格</h3><ul><li>colspan合并的是行相邻的单元格</li><li>rowspan合并的是列相邻的单元格</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>星期一<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>星期二<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>星期四<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>星期五<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"2"</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>物理<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>物理<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>化学<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>生物<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span>课间活动<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>物理<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>化学<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>生物<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>政治<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>政治<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>历史<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>地理<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>生物<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><table><tbody><tr><th>星期一</th><th>星期二</th><th>星期四</th><th>星期五</th></tr><tr>    <td rowspan="2">语文</td>    <td>数学</td>    <td>英语</td>    <td>物理</td></tr><tr>    <td>物理</td>    <td>化学</td>    <td>生物</td></tr><tr><td colspan="4" align="center">课间活动</td></tr><tr>    <td>物理</td>    <td>化学</td>    <td>生物</td>    <td>政治</td></tr><tr>    <td>政治</td>    <td>历史</td>    <td>地理</td>    <td>生物</td></tr></tbody></table><h3 id="无序列表">无序列表</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项目1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项目2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项目3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>列表项目1</li><li>列表项目2</li><li>列表项目3</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"符号类型"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数值</th><th>含义</th></tr></thead><tbody><tr><td>disc</td><td>实心圆形</td></tr><tr><td>circle</td><td>空心圆形</td></tr><tr><td>square</td><td>实心方形</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"circle"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>定义列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul type="circle">    <li>无序列表</li>    <li>有序列表</li>    <li>定义列表</li></ul><p>同时也可以给每一个无序列表的选项进行符号类型的选择：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"disc"</span>&gt;</span>实心列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"circle"</span>&gt;</span>空心列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"square"</span>&gt;</span>方形列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul>        <li type="disc">实心列表</li>    <li type="circle">空心列表</li>    <li type="square">方形列表</li></ul><h3 id="有序列表">有序列表</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项目1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项目2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项目3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ol><li>列表项目1</li><li>列表项目2</li><li>列表项目3</li></ol><p>也可以自定义起始值和序号类型</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">start</span>=<span class="hljs-string">起始数值</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"序号类型"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <p>无论数字还是字母等类型，起始值只能是数字！</p>          </div><h3 id="创建超链接">创建超链接</h3><h4 id="内部链接">内部链接</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"链接地址"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"目标窗口的打开方式"</span>&gt;</span>链接文字<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th><code>target</code>属性值</th><th>打开方式</th></tr></thead><tbody><tr><td><code>_self</code></td><td>在当前窗口打开</td></tr><tr><td><code>_blank</code></td><td>在新窗口打开</td></tr><tr><td><code>_parent</code></td><td>在父窗口打开</td></tr><tr><td><code>_top</code></td><td>在顶层窗口打开</td></tr></tbody></table><h4 id="外部链接">外部链接</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://..."</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>至此，你已经学会了有关静态网页HTML的语法，可以尝试使用HTML完成个人博客的简单撰写！</p><h2 id="表单">表单</h2><p>HTML 表单用于收集用户的输入信息，当我们需要与用户进行交互，制作动态网页时，就需要使用到表单！</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"test"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"mail:08241120@cumt.edu.cn"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <ul><li><p>处理动作<code>action</code>：定义表单要提交的地址，也就是表单中收集到的资料将要传递的程序地址</p><ul><li>绝对地址</li><li>相对地址</li><li>E-mail地址等</li></ul></li><li><p>表单名称<code>name</code>：定义表单的名称，这个名称将作为表单的标识符，用于提交表单时使用</p></li><li><p>传送方式<code>method</code>：定义表单中数据的传送方式</p><ul><li><code>get</code>：用户端直接发送给服务器，速度快，但数据长度不能太长</li><li><code>post</code>：用户端计算机通知服务器来读取数据，数据长度没有限制，但速度较慢</li></ul></li><li><p>目标显示方式<code>target</code>：定义表单提交后，结果显示在哪个窗口中（相关参数见上文）</p></li></ul>          </div><h3 id="input标签"><code>input</code>标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"空间名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"控件类型"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th><code>type</code>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>text</code></td><td>文本字段</td></tr><tr><td><code>password</code></td><td>密码字段</td></tr><tr><td><code>radio</code></td><td>单选按钮</td></tr><tr><td><code>checkbox</code></td><td>复选框</td></tr><tr><td><code>button</code></td><td>普通按钮</td></tr><tr><td><code>submit</code></td><td>提交按钮</td></tr><tr><td><code>reset</code></td><td>重置按钮</td></tr></tbody></table><h4 id="文字字段text">文字字段<code>text</code></h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"控件名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"字段默认值"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"控件长度"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"最长字符数"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><div class="note note-warning">            <ul><li><code>name</code>：文字字段名称，用来与其他控件进行区分</li><li><code>size</code>：文本框的显示长度</li><li><code>maxlength</code>：文本框中最多可输入的文字数</li><li><code>value</code>：文本框中的默认值</li></ul>          </div><form> <input name="test" type="text" value="请输入你的想法" size="15" maxlength="100"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"test"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"请输入你的想法"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"15"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"100"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="密码域password">密码域<code>password</code></h4><p>输入到密码域的文字内容都以“*”或者圆点显示。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"控件名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"字段默认值"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"控件长度"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"最长字符数"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><form> <input name="test" type="password" value="请输入你的想法" size="15" maxlength="100"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"test"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"请输入你的想法"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"15"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"100"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>虽然密码域的输入字符已经以掩码的形式显示了，但是没有做到<strong>真正的保密</strong>，因为用户可以通过复制改密码没中的内容并粘贴到其它文档中，查看到密码的“真面目”。为了实现密码的真正安全，可以将密码域的<strong>复制功能屏蔽</strong>，同时<strong>改变密码域的掩码字符</strong>！</p><form>  <input name="test" type="password" value="请输入你的想法" size="15" maxlength="100" oncopy="return false" oncut="return false" onpaste="return false"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"test"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"请输入你的想法"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"15"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">oncopy</span>=<span class="hljs-string">"return false"</span> <span class="hljs-attr">oncut</span>=<span class="hljs-string">"return false"</span> <span class="hljs-attr">onpaste</span>=<span class="hljs-string">"return false"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="复选框checkbox">复选框<code>checkbox</code></h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"复选框名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"复选框的值"</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">"checked/&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><form>  <input type="checkbox" name="colors" value="red" checked=""> Red<br>  <input type="checkbox" name="colors" value="green"> Green<br>  <input type="checkbox" name="colors" value="blue"> Blue<br></form>确保所有相关复选框有相同的name属性，这样才能将选中的复选框值一起提交。<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"colors"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"red"</span> <span class="hljs-attr">checked</span>&gt;</span> Red<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"colors"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"green"</span>&gt;</span> Green<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"colors"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"blue"</span>&gt;</span> Blue<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="表单按钮button">表单按钮<code>button</code></h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"按钮名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"按钮的值"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"处理程序"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><form>  <input name="按钮名称" type="button" value="点击试试" onclick="window.close()"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"按钮名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击试试"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"window.close()"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="提交按钮submit">提交按钮<code>submit</code></h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"按钮名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"按钮的值"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><form><input name="按钮名称" type="submit" value="提交"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"按钮名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="重置按钮reset">重置按钮<code>reset</code></h4><p>用来清楚用户在页面上输入的信息</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"按钮名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"重置"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><form>  <input name="按钮名称" type="reset" value="重置"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"按钮名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"重置"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="文件域file">文件域<code>file</code></h4><p>用于在表单中添加图片或者文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"控件长度"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"最长字符数"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><form><input name="名称" type="file" size="控件长度" maxlength="最长字符数"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"名称"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"控件长度"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"最长字符数"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="文本域textarea">文本域<code>textarea</code></h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"名称"</span><span class="hljs-attr">cols</span>=<span class="hljs-string">"列数"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"行数"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"文本默认值"</span>&gt;</span>文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><form><textarea name="名称" cols="40" rows="3">文本内容</textarea></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"名称"</span><span class="hljs-attr">cols</span>=<span class="hljs-string">"40"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span>&gt;</span>文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="label表单定义标签"><code>label</code>表单定义标签</h3><div class="note note-info">            <ul><li>显式关联：将文本和表单控件一起放在<code>label</code>标签内</li><li>隐式关联：将<code>label</code>标签的<code>for</code>属性与表单控件的<code>id</code>属性关联起来</li></ul>          </div><form>    <label for="male">姓名</label>    <input type="checkbox" name="sex" id="male">    <br>    <label for="female">密码</label>    <input type="radio" name="sex" id="female"></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"male"</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"male"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"female"</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"female"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>这样我们就将<strong>文本内容与控件关联起来</strong>，当点击表单控件前文字时，该表单控件就可以被选中。</p><h4 id="列表表单">列表表单</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">mutiple</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"可见选项数"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"值"</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">"seclected"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><form>  <select name="list1">    <option value="美食小吃">美食小吃</option>    <option value="火锅">火锅</option>    <option value="麻辣烫">麻辣烫</option>    <option value="砂锅">砂锅</option> </select> <select name="list1" mutiple="" size="4">    <option value="美食小吃">美食小吃</option>    <option value="火锅">火锅</option>    <option value="麻辣烫">麻辣烫</option>    <option value="砂锅">砂锅</option></select></form><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"list1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"美食小吃"</span>&gt;</span>美食小吃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"火锅"</span>&gt;</span>火锅<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"麻辣烫"</span>&gt;</span>麻辣烫<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"砂锅"</span>&gt;</span>砂锅<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"list1"</span> <span class="hljs-attr">mutiple</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"4"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"美食小吃"</span>&gt;</span>美食小吃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"火锅"</span>&gt;</span>火锅<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"麻辣烫"</span>&gt;</span>麻辣烫<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"砂锅"</span>&gt;</span>砂锅<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>封面来源：<a href="https://www.youtube.com/watch?v=iG2jotQo9NI&amp;t=2120s">HTML &amp; CSS for Beginners | FREE MEGA COURSE (7+ Hours!)</a></p>]]></content>
    
    
    <categories>
      
      <category>Full Stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Powerful Editor:Vim</title>
    <link href="/2025/07/28/Tutorial/Powerful-Editor-Vim/"/>
    <url>/2025/07/28/Tutorial/Powerful-Editor-Vim/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>“Writing English words and writing code are very different activities. When programming, you spend more time switching files, reading, navigating, and editing code compared to writing a long stream.”—— &lt; The Missing Semester of Your CS Education &gt;</p>          </div><p><code>Vim</code> 是一个<strong>模态编辑器</strong>（modal editor），它的设计哲学是：编辑操作应当通过<strong>键盘组合</strong>完成，而非依赖鼠标或菜单。</p><div class="note note-primary">            <p>“Vim avoids the use of the mouse, because it’s too slow; Vim even avoids using the arrow keys because it requires too much movement.”—— &lt; The Missing Semester of Your CS Education &gt;</p>          </div><p><code>Vim</code>认为使用鼠标浪费时间，会降低效率，因为手从鼠标移动到键盘需要一定时间，对程序员来说反复来回的切换是很<code>annoying</code>的。因此，所有的<code>vim</code>功能都可以通过键盘操作，或许一开始你并不习惯，但等你使用久了，便能发现它得到程序员青睐的原因！😊</p><p>课程相关视频与讲义：<a href="https://missing.csail.mit.edu/2020/editors/">Editors (Vim)</a></p><h2 id="核心特性">核心特性</h2><ul><li><code>普通模式</code>：用于导航和操作文本（默认模式）</li><li><code>插入模式</code>：像常规编辑器一样输入文本（按 <code>i</code> 进入）</li><li><code>可视模式</code>：选择文本块（按 <code>v</code> 进入）</li><li><code>命令行模式</code>：执行保存/退出等命令（按 <code>:</code> 进入）</li></ul><h2 id="基础操作">基础操作</h2><p>使用 <code>Vim</code> 时会经常使用<code>&lt;ESC&gt;</code>键，而它不在主键盘区，显然不那么方便，于是很多程序员考虑将 <code>Caps Lock</code> 重新映射到 <code>Escape</code>或使用简单的键序列创建替代映射！</p><h3 id="模式切换">模式切换</h3><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td><code>vim</code></td><td>进入vim编辑器</td></tr><tr><td><code>vim 文件名</code></td><td>打开特定文件（不存在时会新建）</td></tr><tr><td><code>i</code>(<code>insert</code>)</td><td>进入插入模式</td></tr><tr><td><code>Esc</code></td><td>返回普通模式</td></tr><tr><td><code>:</code></td><td>进入命令行模式</td></tr></tbody></table><h3 id="光标移动">光标移动</h3><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td><code>h</code> <code>j</code> <code>k</code> <code>l</code></td><td>左/下/上/右移动</td></tr><tr><td><code>0</code></td><td>移动到行首</td></tr><tr><td><code>$</code></td><td>移动到行尾</td></tr><tr><td><code>^</code></td><td>移动到行首非空字符</td></tr><tr><td><code>G</code></td><td>移动到文件底部</td></tr><tr><td><code>gg</code></td><td>移动到文件顶部</td></tr><tr><td><code>H</code></td><td>移动到窗口顶部</td></tr><tr><td><code>L</code></td><td>移动到窗口底部</td></tr><tr><td><code>Ctrl+u</code></td><td>上翻半页</td></tr><tr><td><code>Ctrl+d</code></td><td>下翻半页</td></tr><tr><td><code>Ctrl+b</code></td><td>上翻整页</td></tr><tr><td><code>Ctrl+f</code></td><td>下翻整页</td></tr></tbody></table><h2 id="编辑功能">编辑功能</h2><h3 id="文本操作">文本操作</h3><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td><code>o</code></td><td>下方新建行并插入</td></tr><tr><td><code>O</code></td><td>上方新建行并插入</td></tr><tr><td><code>u</code></td><td>撤销</td></tr><tr><td><code>Ctrl+r</code></td><td>重做</td></tr><tr><td><code>x</code></td><td>删除字符</td></tr><tr><td><code>dw</code></td><td>删除单词</td></tr><tr><td><code>dd</code></td><td>删除整行</td></tr><tr><td><code>cc</code></td><td>删除并进入插入模式</td></tr></tbody></table><h3 id="复制粘贴">复制粘贴</h3><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td><code>y</code> (<code>yank</code>)</td><td>复制</td></tr><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>yw</code></td><td>复制单词</td></tr><tr><td><code>p</code>(<code>paste</code>)</td><td>粘贴</td></tr></tbody></table><h3 id="可视化模式">可视化模式</h3><table><thead><tr><th>操作</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td><code>v</code></td><td>字符可视化</td><td>按字符选择</td></tr><tr><td><code>V</code></td><td>行可视化</td><td>按行选择</td></tr><tr><td><code>Ctrl+v</code></td><td>块可视化</td><td>矩形选择</td></tr></tbody></table><h2 id="高级功能">高级功能</h2><h3 id="搜索与替换">搜索与替换</h3><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td><code>f+字符</code></td><td>向前查找字符</td></tr><tr><td><code>F+字符</code></td><td>向后查找字符</td></tr><tr><td><code>~</code></td><td>大小写转换</td></tr></tbody></table><h3 id="批量操作">批量操作</h3><p><code>数字+指令</code>可以进行批量化操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">4j <span class="hljs-comment">#向下移动4行 </span><br>3ee <span class="hljs-comment">#选择3个单词 </span><br>7dw <span class="hljs-comment">#删除7个单词</span><br></code></pre></td></tr></tbody></table></figure><h2 id="文件操作">文件操作</h2><h3 id="保存与退出">保存与退出</h3><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td><code>:w</code>(<code>write</code>)</td><td>保存文件</td></tr><tr><td><code>:q</code>(<code>quit</code>)</td><td>退出</td></tr><tr><td><code>:qa</code>(<code>all</code>)</td><td>退出所有窗口</td></tr><tr><td><code>:wq</code></td><td>保存并退出</td></tr></tbody></table><h3 id="实战演示">实战演示</h3><p>学习了上面那么多的指令不妨自己创建一个<code>python</code>文件，结合之前学习的<code>shell</code>命令，在实践中感受<code>Vim</code>的魅力吧！😄</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys <span class="hljs-comment">#导入sys来接受shell中的参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fizz_buzz</span>(<span class="hljs-params">limit</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, limit + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">elif</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'fizz'</span>)<br>        <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'buzz'</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'fizzbuzz'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    fizz_buzz(<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">1</span>]))<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">'__main__'</span>:<br>    main()<br></code></pre></td></tr></tbody></table></figure>   <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">   $ python3 fizzbuzz.py 30<br>1<br>2<br>fizz<br>4<br>buzz<br>fizz<br>7<br>8<br>fizz<br>buzz<br>11<br>fizz<br>13<br>14<br>fizzbuzz<br>16<br>17<br>fizz<br>19<br>buzz<br>fizz<br>22<br>23<br>fizz<br>buzz<br>26<br>fizz<br>28<br>29<br>fizzbuzz<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell Magic</title>
    <link href="/2025/07/27/Tutorial/Shell-Magic/"/>
    <url>/2025/07/27/Tutorial/Shell-Magic/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>对计算机的学生而言，许多开发工具是未来老师或企业默认你已经“精通”的，然而未经学校系统培训的我们或许会对此感到迷茫，正如 MIT 课程 <strong><a href="https://missing.csail.mit.edu/">The Missing Semester of Your CS Education</a></strong> 所强调的： <strong>“掌握基础工具是程序员的核心竞争力”</strong>。这个课程会帮助你入门、了解一些计算机常用的开发工具，也算是程序员的自我修养吧！<strong>Let’s Go！</strong>😄</p>          </div><p>相关课程在b站也有双语翻译（大部分应该都能听懂，就是有个好像是西班牙的老师带点口音听起来有点不适应😢）<a href="https://www.bilibili.com/video/BV1uc411N7eK/?spm_id_from=333.1387.favlist.content.click&amp;vd_source=54c2981c1a7a8e0433b7d23096150b7a">[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell</a></p><hr><p>  不论是在电影里还是在我们初识计算机的过程中，都会看到一个黑乎乎的窗口，只要输入几行代码就可以完成酷炫的操作，但是你或许对这有一点疑惑，这到底是<code>terminal</code>、<code>bash</code>、<code>zsh</code>还是<code>powershell</code>，他们到底是如何区分的呢？</p><p>1.<code>Terminal</code>：用户终端，用来启动<code>shell</code>，这也可以说算是一个“工具”，活跃在为用户服务的<strong>前端</strong><br>2.<code>Shell</code>：是一个<strong>命令行解释器</strong>，负责接收用户输入的命令并将其<strong>解释</strong>为计算机可以执行的操作，与<code>Terminal</code>相比，是活跃于用户服务<strong>后端的程序</strong>，以下都是<code>Shell</code>在不同操作系统中的实现：</p><ul><li><code>Bash</code>：是一种<strong>常用的Shell</strong>，在<code>Linux</code>和<code>macOS</code>中默认安装。</li><li><code>Zsh</code>：是一种<strong>功能强大的Shell</strong>，在<code>macOS</code>中默认安装，也可以在<code>Linux</code>中安装。</li><li><code>PowerShell</code>：是一种<strong>Windows</strong>系统下的<strong>命令行工具</strong>，用于<strong>管理Windows系统</strong>和<strong>执行PowerShell脚本</strong>。</li></ul><h2 id="Shell">Shell</h2><p>  当熟悉的<strong>可视化界面</strong>无法实现你想要的功能时，<code>Shell</code>将成为你与计算机交互的强大工具。相比<strong>图形界面有限的按钮和滑块</strong>，命令行提供了更灵活、更强大的控制方式，允许你通过<strong>文本命令和脚本实现自动化操作</strong>。本文基于<code>VMware</code>虚拟机中的<code>Ubuntu 22.04</code>发行版演示基础<code>Shell</code>操作：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">date</span><br>Sat Jul 26 03:27:54 PM CST 2025<br></code></pre></td></tr></tbody></table></figure><p>第一行通常是用户名、机器名称和当前所在路径</p><div class="note note-danger">            <ul><li><code>Windows</code>中路径通常使用<strong>反斜杠</strong><code>\</code>分隔，每个驱动器都有一个单独的路径结构。</li><li><code>Linux</code> / <code>macOS</code> 中这些路径使用<strong>正斜杠</strong><code>/</code>分隔，他们挂载在同一个命名空间下。</li></ul>          </div><p>开头的斜杠表示从文件系统的顶部开始。</p><div class="note note-warning">            <ul><li>相对路径：相对于当前位置的路径</li><li>绝对路径：完整路径，从顶部开始</li></ul>          </div><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello World"</span><br>Hello World<br></code></pre></td></tr></tbody></table></figure><p><code>echo</code>可以将后面的参数<strong>打印</strong>在屏幕上</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">which</span> <span class="hljs-built_in">echo</span><br>/usr/bin/echo<br></code></pre></td></tr></tbody></table></figure><p><code>which</code>可以用于<strong>寻找后面参数文件的绝对位置</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">pwd</span><br>/home/richard<br></code></pre></td></tr></tbody></table></figure><p><code>pwd</code>（<code>Print Working Directory</code>）<strong>打印当前所在路径</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">cd</span> /home<br>richard@richard-VMware-Virtual-Platform:/home$ <br></code></pre></td></tr></tbody></table></figure><p><code>cd</code>（<code>Change Directory</code>）表示更改当前目录</p><p>这是更方便<strong>切换目录</strong>的方式：</p><div class="note note-warning">            <ul><li><code>.</code>表示<strong>当前</strong>目录</li><li><code>..</code>表示<strong>父</strong>目录</li></ul>          </div><p><strong>注意</strong>：使用相对路径能提高命令在不同电脑上的<strong>兼容性</strong>！</p><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:/$ <span class="hljs-built_in">ls</span><br>bin                home               mnt   sbin.usr-is-merged  usr<br>bin.usr-is-merged  lib                opt   snap                var<br>boot               lib64              proc  srv<br>cdrom              lib.usr-is-merged  root  swap.img<br>dev                lost+found         run   sys<br>etc                media              sbin  tmp<br></code></pre></td></tr></tbody></table></figure><p><code>ls</code>会列出当前目录中的文件，这能够快速浏览文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:/home$ <span class="hljs-built_in">cd</span> ~<br>richard@richard-VMware-Virtual-Platform:~$<br></code></pre></td></tr></tbody></table></figure><div class="note note-warning">            <ul><li><code>cd ~</code>能够快速<strong>回到用户主目录</strong></li><li><code>cd -</code>切换到<strong>上一个工作目录</strong></li></ul>          </div><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span> --<span class="hljs-built_in">help</span><br>Usage: <span class="hljs-built_in">ls</span> [OPTION]... [FILE]...<br>List information about the FILEs (the current directory by default).<br>Sort entries alphabetically <span class="hljs-keyword">if</span> none of -cftuvSUX nor --<span class="hljs-built_in">sort</span> is specified.<br></code></pre></td></tr></tbody></table></figure><p><code>--help</code>参数显示<strong>命令帮助信息</strong></p><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span> -l<br>total 40<br>drwxr-xr-x 2 richard richard 4096 Mar  9 10:21 Desktop<br>drwxr-xr-x 2 richard richard 4096 Mar  9 10:21 Documents<br><br>lrwxrwxrwx   1 root root          7 Apr 22  2024 bin -&gt; usr/bin<br>drwxr-xr-x   2 root root       4096 Feb 26  2024 bin.usr-is-merged<br><span class="hljs-comment"># 仅列举部分进行展示说明</span><br></code></pre></td></tr></tbody></table></figure><p><strong>文件类型</strong>（第<code>1</code>个字符）</p><table><thead><tr><th>字符</th><th>类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>d</code></td><td>目录</td><td>文件夹</td><td><code>drwxr-xr-x</code></td></tr><tr><td><code>-</code></td><td>普通文件</td><td>文本/二进制文件</td><td><code>-rw-r--r--</code></td></tr><tr><td><code>l</code></td><td>符号链接</td><td>软链接文件</td><td><code>lrwxrwxrwx</code></td></tr><tr><td><code>c</code></td><td>字符设备</td><td>终端等串行设备</td><td><code>crw--w----</code></td></tr><tr><td><code>b</code></td><td>块设备</td><td>磁盘等存储设备</td><td><code>brw-rw----</code></td></tr><tr><td><code>s</code></td><td>套接字</td><td>进程通信文件</td><td><code>srwxrwxrwx</code></td></tr><tr><td><code>p</code></td><td>管道</td><td><code>FIFO</code> 管道文件</td><td><code>prw-------</code></td></tr></tbody></table><p>用户权限分为 <strong>3组</strong>（每组<code>3</code>字符），分别对应：</p><table><thead><tr><th>组别</th><th>示例</th></tr></thead><tbody><tr><td>所有者权限</td><td><code>rwx</code></td></tr><tr><td>所属组权限</td><td><code>r-x</code></td></tr><tr><td>其他用户</td><td><code>r-x</code></td></tr></tbody></table><p>权限字符<strong>含义</strong>：</p><table><thead><tr><th>字符</th><th>权限</th><th>对文件的影响</th><th>对目录的影响</th></tr></thead><tbody><tr><td><code>r</code></td><td>读</td><td>查看文件内容</td><td>列出目录内容（<code>ls</code>）</td></tr><tr><td><code>w</code></td><td>写</td><td>修改/删除文件</td><td>创建/删除目录内文件</td></tr><tr><td><code>x</code></td><td>执行</td><td>运行程序/脚本</td><td>进入目录（<code>cd</code>）</td></tr><tr><td><code>-</code></td><td>无</td><td>无权限</td><td>无权限</td></tr></tbody></table><div class="note note-danger">            <p>⚠️<strong>注意</strong>：</p><ol><li>即使文件本身有 <code>w</code> 权限，如果所在目录没有<code> w</code>，你只能<strong>清空或删除文件内容</strong>，却仍然<strong>无法删除或重命名</strong>它</li><li>如果我想要访问一个目录，<strong>必须拥有其所有父目录的权限</strong>：<code>/usr/bin/echo</code>我必须拥有<code>/usr</code> <code>/bin</code>目录的权限，否则我将不被允许访问该文件，因为我将无法进入其中的目录</li></ol>          </div><p><code>mv</code>能将文件<strong>修改位置并重命名</strong><br><code>cp</code>复制文件 需要两个参数 一个要<strong>复制的文件路径</strong> <strong>一个目标文件路径</strong><br><code>rm</code>用于<strong>删除文件</strong><br><code>rmdir</code>能<strong>删除一个目录</strong> 但它只能删除<strong>空目录</strong> 防止不小心删除一大堆文件<br><code>mkdir</code><strong>创建目录</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> My Photos<br></code></pre></td></tr></tbody></table></figure><p><code>mkdir</code>创建目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-string">"My Photos"</span><br></code></pre></td></tr></tbody></table></figure><p>这里如果不加上上引号则会创建"My"和"Photos"两个目录，因为<code>Bash</code>（或其他 <code>Shell</code>）会<strong>将空格视为命令参数的分隔符</strong>，相当于<strong>命令收到了两个独立的参数</strong>，因此它会创建两个独立的目录！</p><div class="note note-info">            <p>或者使用<strong>反斜杠</strong>来转义空格，反斜杠会告诉 Shell：下一个字符是普通字符，不要把它当做特殊符号处理！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> My\ Photos<br></code></pre></td></tr></tbody></table></figure>          </div><p><code>man+指令</code> 查找手册</p><p><code>ctrl</code>+<code>l</code>清空窗口</p><h3 id="输入流和输出流">输入流和输出流</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> hello &gt; hello.txt<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span> &gt; hello.txt<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">cat</span> hello.txt<br>Desktop<br>Documents<br>Downloads<br>fizzbuzz.py<br>hello2.txt<br>hello.txt<br>Music<br>Pictures<br>Public<br>snap<br>Templates<br>Videos<br>web<br></code></pre></td></tr></tbody></table></figure><p>这样就可以将输出到屏幕的信息<strong>存储</strong>起来！</p><div class="note note-warning">            <ul><li><code>&gt;</code>覆盖输出到文件</li><li><code>&lt;</code>从文件读取输入</li></ul>          </div><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">cat</span> hello.txt<br>hello<br></code></pre></td></tr></tbody></table></figure><p>通过<code>cat</code>指令输出文件内容</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">cat</span> &lt;hello.txt&gt;hello2.txt<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">cat</span> hello2.txt<br>hello<br></code></pre></td></tr></tbody></table></figure><p><code>&lt;</code>将<code>hello.txt</code>作为输入内容并通过<code>&gt;</code>将<code>cat</code>打印的任何内容输出到<code>hello2.txt</code>文件中</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">cat</span> &lt;hello.txt&gt;&gt;hello2.txt<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">cat</span> hello2.txt<br>hello<br>hello<br></code></pre></td></tr></tbody></table></figure><p><code>&gt;&gt;</code>表示追加而不是覆盖(<code>append instead of overwrite</code>)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span> -l|<span class="hljs-built_in">tail</span> -n1<br>drwxrwxr-x 3 richard richard 4096 Mar  9 12:26 web<br></code></pre></td></tr></tbody></table></figure><p>管道运算符<code>|</code>作用是将<strong>左侧命令的输出</strong>作为<strong>右侧命令的输入</strong>：可以连接多个命令形成<strong>处理流水线</strong></p><p><code>tail</code>将输出最后一行的内容</p><hr><h3 id="用户权限管理">用户权限管理</h3><p><code>root</code>相当于<code>Windows</code>的管理员权限，是一位<strong>超级用户</strong>，可以做任何想做的事情，但是倘若一直使用<code>root</code>用户操作计算机，如果运行了错误的程序，那会彻底毁坏你的电脑！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:/sys/class/backlight$ <span class="hljs-built_in">sudo</span> su<br>[<span class="hljs-built_in">sudo</span>] password <span class="hljs-keyword">for</span> richard: <br>root@richard-VMware-Virtual-Platform:/sys/class/backlight# <br></code></pre></td></tr></tbody></table></figure><p>通过<code>sudo su</code>来进入<code>root</code>身份，同时提示符由<code>$</code>变为<code>#</code></p><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@richard-VMware-Virtual-Platform:/sys/class/backlight# <span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br>richard@richard-VMware-Virtual-Platform:/sys/class/backlight$<br></code></pre></td></tr></tbody></table></figure><p><code>exit</code>来退出用户权限</p><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ xdg-open hello.txt<br></code></pre></td></tr></tbody></table></figure><p>这样就可以直接在<code>terminal</code>打开文件！</p><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ foo=bar<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$foo</span><br>bar<br></code></pre></td></tr></tbody></table></figure><p>在<code>shell</code>中，<code>$</code>符号是一个特殊字符，主要用于变量展开。当你在变量名前面加上$时，<code>shell</code>会将其替换为该变量的值！</p><ul><li><code> foo</code> 会被<code>Shell</code>视为普通字符串</li><li><code>$foo</code> 告诉<code>Shell</code>这是一个需要展开的变量</li></ul><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello"</span><br>Hello<br>richard@richard-VMware-Virtual-Platform:~$ foo=World<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello foo"</span><br>Hello foo<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello <span class="hljs-variable">$foo</span>"</span><br>Hello World<br></code></pre></td></tr></tbody></table></figure><p>在<code>shell</code>中我们一定要非常注意<strong>空格</strong><code>space</code>的使用，它是用作不同参数间的分隔符，倘若多打一个可能就会出现报错！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-literal">false</span><br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> $?<br>1<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-literal">true</span><br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> $?<br>0<br></code></pre></td></tr></tbody></table></figure><p><code>$? </code>是一个特殊变量，存储上一个命令的退出状态码</p><div class="note note-warning">            <ul><li><code>false</code> 是一个 Shell 内置命令，返回非零退出状态（失败）设置退出状态码为 1（表示失败）</li><li><code>true</code> 也是一个 Shell 内置命令，返回零退出状态（成功）退出状态码被设为 0（表示成功）</li></ul>          </div><p>  这里看上去有点反常理，我们学的其他编程语言中<code>0</code>是<code>false</code>，非零是<code>true</code>，为什么这里反过来了？<br>  当我们想到<code>c</code>、<code>c++</code>中<code>main</code><strong>函数结束的返回值</strong>或许就不奇怪了！<code>main() </code>函数默认返回<code>0</code> 表示成功，非零表示错误（如 <code>return 1</code>;）。</p><p>再考虑到程序运行只有两种可能：</p><ol><li>完全成功（<strong>唯一状态 0</strong>）</li><li>失败（可能有多种原因，<strong>用不同非零值区分</strong>）：</li></ol><div class="note note-warning">            <ul><li>0 = 没有错误（成功）</li><li>1 = 通用错误</li><li>2 = 参数错误</li><li>3 = 文件不存在</li></ul>          </div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-literal">false</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">"Oops fail"</span><br>Oops fail<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-literal">true</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">"Will be not be printed"</span><br>richard@richard-VMware-Virtual-Platform:~$<br></code></pre></td></tr></tbody></table></figure><p><code>shell</code>中<code>||</code>同样遵循<strong>短路原则</strong>，<code>&amp;&amp;</code>同理！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"We are now at <span class="hljs-subst">$(pwd)</span>"</span><br>We are now at /home/richard<br></code></pre></td></tr></tbody></table></figure><p><code>shell</code>中使用<code>$(command)</code>进行<strong>命令替换</strong></p><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span><br>Desktop    Downloads   hello.txt  Pictures  snap       Videos<br>Documents  hello2.txt  Music      Public    Templates  web<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span> *.txt<br>hello2.txt  hello.txt<br></code></pre></td></tr></tbody></table></figure><p><code>*</code>是一个<strong>通配符</strong>（<code>globbing</code>）：表示<strong>匹配任意数量的任意字符</strong>（<strong>包括零个字符</strong>）。<code>Shell</code>会在执行<code>ls</code> 前先展开 <code>*.txt</code>，将其替换为所有匹配的文件名，相当于寻找所有后缀为<code>.txt</code>的文件！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span> hello?.txt<br>hello2.txt<br>richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">ls</span> hello*.txt<br>hello2.txt  hello.txt<br></code></pre></td></tr></tbody></table></figure><p>这里可以看到<code>?</code>也是<strong>通配符</strong>，表示匹配任意一个字符（区别是必须存在，<strong>不能匹配空字符</strong>）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env python3 #自动查找python3</span><br></code></pre></td></tr></tbody></table></figure><p>通过<code>Shell</code>调用<code>Python</code>脚本可以充分发挥两者的优势：<code>Shell</code>的<strong>流程控制能力</strong>结合<code>Python</code>的<strong>丰富库函数</strong>，但我们要在路径中找到并配置好<code>python</code>解释器。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">import sys<br></code></pre></td></tr></tbody></table></figure><p>由于<code>shell</code>默认不会执行<code>python</code>指令，我们需要添加库函数，来让<code>python</code>接受<code>shell</code>传递的参数</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">history</span><br></code></pre></td></tr></tbody></table></figure><p>我们可以使用⬆️来一个个<strong>浏览历史记录命令</strong>，我们也可以使用<code>history</code>直接打印所有历史命令！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">history</span> | grep git<br></code></pre></td></tr></tbody></table></figure><p>我们通过<code>history +N | grep +指令</code>来查找所有与指令字符串相匹配的<code>N</code>条历史记录命令！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tree<br></code></pre></td></tr></tbody></table></figure><p>能列出<strong>目录结构性</strong>的位置！</p><hr><p><code>wc</code>（word count）是一个用于<strong>统计文本文件中单词、行、字符等</strong>的<strong>命令行工具</strong>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> [选项参数]... [文件]...<br></code></pre></td></tr></tbody></table></figure><p>可选参数：</p><ul><li><code>c</code> 或 <code>--bytes</code>: 显示<strong>字节数</strong></li><li><code>m</code>或 <code>--chars</code>: 显示<strong>字符数</strong> 对于多字节字符（如中文），这与 -c 不同</li><li><code>w</code> 或 <code>--words</code>: 显示<strong>单词数</strong>（以空格、制表符、换行符分隔的字符串）</li><li><code>l</code> 或 <code>--lines</code>: 显示<strong>行数</strong></li><li><strong>不指定</strong>任何选项: 默认会<strong>同时显示行数、单词数、字节数，以及文件名</strong></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ <span class="hljs-built_in">wc</span> hello.txt<br> 13  13 109 hello.txt<br></code></pre></td></tr></tbody></table></figure><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">richard<span class="hljs-variable">@richard</span>-<span class="hljs-title class_">VMware</span>-<span class="hljs-title class_">Virtual</span>-<span class="hljs-title class_">Platform</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>wc --word hello.txt<br><span class="hljs-number">13</span> hello.txt<br></code></pre></td></tr></tbody></table></figure><h3 id="关机与重启">关机与重启</h3><p>1.<code>shutdown</code></p><ul><li><code>-r</code> 或 <code>--reboot</code>: 重新启动系统</li><li><code>-h</code> 或 <code>--halt</code>: 关闭系统</li><li><code>-c</code> 或 <code>--cancel</code>: 取消之前的计划关机或重启</li><li><code>-t</code> 或 <code>--time &lt;时间&gt;</code>: 指定关机或重启的时间（格式：<code>HH:MM</code>）</li><li><code>-k</code> 或 <code>--kill</code>: 不关机，只发送<code>SIGTERM</code>信号给所有进程</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@richard-VMware-Virtual-Platform:~$ shutdown -r<br>Reboot scheduled <span class="hljs-keyword">for</span> Tue 2025-09-02 12:05:06 CST, use <span class="hljs-string">'shutdown -c'</span> to cancel.<br></code></pre></td></tr></tbody></table></figure><p>2.<code>reboot</code></p><ul><li><code>-f</code> 或 <code>--force</code>: 强制重启，不发送<code>SIGTERM</code>信号</li><li><code>-n</code> 或 <code>--no-fsync</code>: 不执行<code>fsync</code>系统调用，加快重启速度</li><li><code>-w</code> 或 <code>--wait</code>: 等待所有进程结束后再重启</li><li><code>-i</code> 或 <code>--init</code>: 关机之前，关闭所有网络接口</li></ul><ol start="3"><li><code>init</code></li><li><code>poweroff</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The CS61A Lab Notebook1</title>
    <link href="/2025/07/25/Python/The-CS61A-Lab-Notebook1/"/>
    <url>/2025/07/25/Python/The-CS61A-Lab-Notebook1/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>笔者在学校仅仅学习了C++，对其他语言知之甚少，然而在实际应用中，Python的应用场景之广泛令人惊叹：无论是数学建模中的数据可视化、数据分析，还是计算机视觉领域的机器学习与深度学习，Python都展现出无可替代的重要性。虽然高中时曾对Python有所涉猎，但不成体系。</p>          </div><div class="note note-info">            <p>我深知在计算机领域，自主学习能力至关重要。然而平日既要应对繁重的课业，又要准备各类竞赛，实在分身乏术。值此暑假时间充裕之际，我决定研读计算机领域的标杆课程——CS61A。希望能够有所收获！以下是我的学习笔记，大家共勉！</p>          </div><h2 id="What’s-the-CS61A">What’s the CS61A?</h2><p>  <code>CS61A</code>是加州大学伯克利分校（<code>UC Berkeley</code>）计算机科学专业的入门课程，全称为"计算机程序的结构与解释"(<code>Structure and Interpretation of Computer Programs</code>)。这门课程<strong>采用<code>Python</code>作为主要教学语言</strong>，同时涵盖<code>Scheme</code>和<code>SQL</code>。课程核心在于<strong>培养计算思维</strong>而非单纯编程技巧，<strong>重点教授抽象思想、函数式编程和元语言抽象</strong>，被誉为"真正教会学生如何思考的计算入门课"！</p><p>这里是<a href="https://cs61a.org/">CS61A官方网站</a>，里面包含了相关的<code>videos</code>、<code>slides</code>和<code>homework</code>帮助你学习！<br>英语和我一样不很出彩的可以观看b站双语翻译版本：<br><a href="https://www.bilibili.com/video/BV1sy411z7nA?spm_id_from=333.788.videopod.sections&amp;vd_source=54c2981c1a7a8e0433b7d23096150b7a">【完结】【CS61A精翻双语·英文原声】伯克利大学《计算机程序的结构与解释》(2024)</a></p><h2 id="Functions">Functions</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> &lt;name&gt;(&lt;formal parameters&gt;):<br>    <span class="hljs-keyword">return</span> &lt;<span class="hljs-keyword">return</span> expression&gt;<br></code></pre></td></tr></tbody></table></figure><p>函数与变量的区别：变量是<strong>一次性赋值</strong>的，函数在<strong>每次调用时会重新计算</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>radius=<span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>area=mul(radius,radius)*pi<br><span class="hljs-meta">&gt;&gt;&gt; </span>area<br><span class="hljs-number">314.1592653589793</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>radius=<span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>area<br><span class="hljs-number">314.1592653589793</span><br></code></pre></td></tr></tbody></table></figure><p>这里我们发现变量<code>area</code>在第一次进行赋值后，尽管<code>radius</code>进行改变，但是其值不再发生变化，可见赋值是一次性的，不是动态的！</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>():<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> mul(radius,radius)*pi<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>area()<br><span class="hljs-number">1256.6370614359173</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>radius=<span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>area()<br><span class="hljs-number">314.1592653589793</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>radius=<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>area()<br><span class="hljs-number">3.141592653589793</span><br></code></pre></td></tr></tbody></table></figure><p>于是我们考虑将<code>area</code>变成函数，发现每次调用<code>area()</code>时，<code>area()</code>都会根据表达式的值重新计算，做到了动态变化！</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>),<span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>))<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-literal">None</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>步骤</th><th>代码</th><th>行为</th><th>输出</th></tr></thead><tbody><tr><td>1</td><td><code>print(1)</code></td><td>调用 <code>print(1)</code>，打印 <code>1</code>，返回 <code>None</code></td><td><code>1</code></td></tr><tr><td>2</td><td><code>print(2)</code></td><td>调用 <code>print(2)</code>，打印 <code>2</code>，返回 <code>None</code></td><td><code>2</code></td></tr><tr><td>3</td><td><code>print(None, None)</code></td><td>调用 <code>print(None, None)</code>，打印 <code>None None</code></td><td><code>None None</code></td></tr></tbody></table><p><code>Python</code>会先计算所有参数，再执行外层函数，<code>print()</code>的<strong>返回值永远是 <code>None</code></strong>，但它会先执行打印。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> floordiv,mod<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">divide_exact</span>(<span class="hljs-params">N,D</span>):<br>    <span class="hljs-string">"""Return the quotient and remainder of dividing N by D.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt;q,r=divide_exact(2013,10)</span><br><span class="hljs-string">    &gt;&gt;&gt;q</span><br><span class="hljs-string">    201</span><br><span class="hljs-string">    &gt;&gt;&gt;r</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">return</span> floordiv(N,D),mod(N,D)<br></code></pre></td></tr></tbody></table></figure><p>项目中函数的<strong>形式参数用大写字母表示</strong>，提供<strong>文档字符串</strong>：在函数定义<code>def</code>的第一行添加注释，<strong>表明这个函数的作用</strong>，并<strong>添加一个实例说明</strong>（可以在<code>python</code><strong>交互式界面</strong>进行演示）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">"""Compute the nth Fibonacci number?"""</span><br><br>    pred,curr=<span class="hljs-number">1</span>,<span class="hljs-number">0</span><br>    k=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> k &lt; n:<br>        pred,curr=curr,curr+pred<br>        k=k+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> curr<br></code></pre></td></tr></tbody></table></figure><p>通过<code>while</code>控制语句实现求值斐波那契数列索引的元素值！</p><h2 id="Higher-Order-Functions">Higher-Order Functions</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""Generalization."""</span><br><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi,sqrt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">r,shape_constant</span>):<br>    <span class="hljs-keyword">assert</span> r&gt;<span class="hljs-number">0</span>,<span class="hljs-string">"A length must be positive"</span><br>    <span class="hljs-keyword">return</span> r*r*shape_constant<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">area_square</span>(<span class="hljs-params">r</span>):<br>    <span class="hljs-keyword">return</span> area(r,<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">area_circle</span>(<span class="hljs-params">r</span>):<br>    <span class="hljs-keyword">return</span> area(r,pi)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">area_hexagon</span>(<span class="hljs-params">r</span>):<br>    <span class="hljs-keyword">return</span> area(r,<span class="hljs-number">3</span>*sqrt(<span class="hljs-number">3</span>)/<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><ol><li><code>assert</code> 的防御性编程作用：<strong>防止非法的负值或零值输入</strong>导致数学错误！</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pythono">assert r &gt; 0, "A length must be positive"<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>将不同图形的面积计算<strong>抽象为统一公式</strong>：<code>r² × 形状系数</code>：</li></ol><ul><li><p><strong>避免为每个图形重复编写</strong><code>r*r</code>的计算逻辑</p></li><li><p>新增图形时<strong>只需提供对应的形状常数</strong>，<strong>无需修改核心算法</strong>，<strong>增强代码整体的泛化能力</strong></p></li><li><p><strong>集中维护输入验证逻辑</strong>（如<code>assert</code>检查）</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""Generalization."""</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">identity</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-keyword">return</span> k<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(k,<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">summation</span>(<span class="hljs-params">n,term</span>):<br>    <span class="hljs-string">"""Sum the first N terms of a sequence.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; summation(5,cube)</span><br><span class="hljs-string">    225</span><br><span class="hljs-string">    """</span><br>    total,k=<span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> k&lt;=n:<br>        total,k=total+term(k),k+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> total<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_naturals</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">"""Sum the first N natural numbers.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &lt;&lt;&lt; sum_naturals(5)</span><br><span class="hljs-string">    15</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">return</span> summation(n,identity)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_cubes</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">""" Sum the first N cubes of natural numbers.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; sum_cubes(5)</span><br><span class="hljs-string">    225</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">return</span> summation(n,cube)<br></code></pre></td></tr></tbody></table></figure><p>这里传入的参数<code>term</code>是一个已定义的函数名，我们通过参数<code>term</code>对求和类型进行修改和新定义，而<strong>整体框架无需改动</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""Generalization."""</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_adder</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">"""Return a function that takes one argument</span><br><span class="hljs-string">    K and return K+N.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; add_three=make_adder(3)</span><br><span class="hljs-string">    &gt;&gt;&gt; add_three(4)</span><br><span class="hljs-string">    7</span><br><span class="hljs-string">    &gt;&gt;&gt; make_adder(3)(4)</span><br><span class="hljs-string">    7</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">adder</span>(<span class="hljs-params">k</span>):<br>        <span class="hljs-keyword">return</span> k+n<br>    <span class="hljs-keyword">return</span> adder<br></code></pre></td></tr></tbody></table></figure><p>这是一个返回值为函数的函数（函数的嵌套）叫作：</p><ul><li>函数工厂（<code>Factory Pattern</code>）:<br><code>make_adder</code> 是一个 生成函数的函数（工厂）<br>根据参数 n 动态生成不同功能的加法函数</li></ul><p>以上表明函数与编程语言中的其他值一样，可以<strong>作为参数传递</strong>也可以<strong>作为返回值返回</strong>，这就是<strong>高阶函数</strong>(<strong>Higher-Order Function</strong>)。</p><h2 id="Environments">Environments</h2><h3 id="lambda表达式">lambda表达式</h3><p><code>def</code>和<code>lambda</code>表达式的区别：</p><table><thead><tr><th>特性</th><th>Lambda 表达式</th><th>普通函数 (<code>def</code>)</th></tr></thead><tbody><tr><td><strong>语法</strong></td><td>单行匿名表达式：<code>lambda x: x + 1</code></td><td>多行命名定义：<code>def func(x): return x + 1</code></td></tr><tr><td><strong>名称</strong></td><td>匿名（无函数名）</td><td>有函数名（可通过 <code>func.__name__</code> 获取）</td></tr><tr><td><strong>代码复杂度</strong></td><td>仅限单个表达式（不能包含语句）</td><td>可包含多行语句、循环、条件等复杂逻辑</td></tr><tr><td><strong>返回值</strong></td><td>自动返回表达式结果</td><td>需显式使用 <code>return</code></td></tr><tr><td><strong>作用域</strong></td><td>只能访问全局变量和参数</td><td>可访问全局、局部变量，支持闭包</td></tr><tr><td><strong>适用场景</strong></td><td>简单逻辑、临时函数</td><td>复杂逻辑、需复用的功能</td></tr></tbody></table><h3 id="Function-Currying-函数柯里化">Function Currying(函数柯里化)</h3><p>  <strong>柯里化</strong>（<code>Currying</code>）是一种将接受多个参数的函数转换为一系列只接受单个参数的函数链式调用的技术，其核心特点是分步传递参数和延迟计算。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">y</span>):<br>            <span class="hljs-keyword">return</span> f(x,y)<br>        <span class="hljs-keyword">return</span> h<br>    <span class="hljs-keyword">return</span> g<br></code></pre></td></tr></tbody></table></figure><p>  在这个例子中我们发现柯里化进行了<strong>参数分解</strong>：原始函数<code>f(x,y)</code>需要同时接收两个参数，而柯里化后通过<code>curry(f)</code> 生成的新函数链 <code>g(x)(y)</code> 允许先传<code>x</code>再传 <code>y</code>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">g</span>):<br>    a=<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> y:a*g(y)<br>f(<span class="hljs-keyword">lambda</span> y:a+y)(a)<br></code></pre></td></tr></tbody></table></figure><p>  在这个例子中，先定义了<code>a=1</code>全局变量（<code>local frame</code>），在函数<code>f</code>内部定义局部变量<code>a=2</code>（<code>global frame</code>）所以结果是（<code>2*(1+1)</code>）！</p><h2 id="Abstraction">Abstraction</h2><p>  函数抽象是给某个计算过程起个名字，然后整个项目过程都引用这个名字，而不用担心具体的实现细节。</p><ul><li>需要知道函数需要<strong>传递几个参数</strong></li><li>需要知道<strong>函数的功能</strong></li><li>不需要知道函数的<strong>实现过程</strong></li></ul><p>比如平方函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x*x<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> mul<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> mul(x,x-<span class="hljs-number">1</span>)+x<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(x,<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><p>封面来源于<code>CS61A</code>中<code>lecture1</code>的<code>slide</code>，是其标志性的表达式树！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>function</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Essential Sorting Algorithms Explained</title>
    <link href="/2025/07/24/Data%20structure/Essential-Sorting-Algorithms-Explained/"/>
    <url>/2025/07/24/Data%20structure/Essential-Sorting-Algorithms-Explained/</url>
    
    <content type="html"><![CDATA[<div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-d2d6ea06" role="button" aria-expanded="false" aria-controls="collapse-d2d6ea06">        <div class="fold-arrow">▶</div> 排序算法测试样例题目      </div>      <div class="fold-collapse collapse" id="collapse-d2d6ea06">        <div class="fold-content">          <h2 id="题目">题目</h2><p>文章中排序算法均已经通过此题的OJ测试点！</p><h4 id="题目描述">题目描述</h4><p>给你N个自然数，编程输出排序后的这N个数。</p><h4 id="输入">输入</h4><p>第一行是整数的个数N（N&lt;=100）。第二行是用空格隔开的N个数。</p><h4 id="输出">输出</h4><p>排序输出N个数，每个数间用一个空格间隔。</p><h4 id="样例输入">样例输入</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出">样例输出</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><hr><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/Sorting-Algorithm/Sorting.png?raw=true" alt="排序算法图"></p><h2 id="1-直接插入排序（Straight-Insertion-Sort）">1.直接插入排序（Straight Insertion Sort）</h2><h3 id="核心思想">核心思想</h3><p>  将待排数组分为“已排序”和“未排序”两个部分，<code>R[0,1...i-1]</code>前面序列是已经排好的有序区，<code>R[i,...n]</code>后面的序列是未排序的无序区，直接插入排序每次操作将当前无序区的首元素<code>R[i]</code>插入到有序区<code>R[0,1...i-1]</code>的适当位置，使得<code>R[0,1...i]</code>成为新的有序区，减小无序区,直至无序区为空，从而全部数据有序！</p><h3 id="完整代码">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>{ <span class="hljs-keyword">return</span> a &lt; b; }<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    vector&lt;<span class="hljs-type">int</span>&gt; R;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        <span class="hljs-type">int</span> a;<br>        cin &gt;&gt; a;<br>        R.<span class="hljs-built_in">push_back</span>(a);<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) {<br>        <span class="hljs-type">int</span> temp = R[i];<span class="hljs-comment">//用temp临时存储待排元素</span><br>        <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<span class="hljs-comment">//让temp从i-1开始逐个向前比较</span><br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">cmp</span>(temp, R[j])) {<br>                R[j + <span class="hljs-number">1</span>] = R[j];<br>                j--;<br>            }<br>            R[j + <span class="hljs-number">1</span>] = temp;<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        cout &lt;&lt; R[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>} <br></code></pre></td></tr></tbody></table></figure><p>这里将比较逻辑模块化：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>{ <span class="hljs-keyword">return</span> a &gt; b; }  <br></code></pre></td></tr></tbody></table></figure><p>若未来需要修改排序规则（降序排序）只需要将<code>cmp</code>函数中的<code>&gt;</code>修改为<code>&lt;</code>即可！</p><h3 id="算法分析">算法分析</h3><p>  直接插入排序由<strong>两重循环</strong>构成，对于具有<code>n</code>个元素的数组<code>R</code>，外循环要进行<code>n-1</code>趟排序（<code>1到n-1</code>），在每趟排序中，仅当待插入序列元素<code>R[i]</code>小于有序区尾元素时才进入内层循环，因此直接插入排序的<strong>时间性能与初始排序表相关</strong>。</p><ul><li>比较次数</li><li>元素移动次数</li></ul><ol><li>最好情况分析：初始排序表正序，无需进入内层循环时间复杂度为<code>O(n)</code></li><li>最坏情况分析：初始排序表反序，每次排序均需要进入内层循环进行<code>i</code>次比较，等差数列<code>n(n-1)/2</code>，时间复杂度为<code>O(n^2)</code></li><li>平均情况分析：在每趟排序中，平均情况是将<code>R[i]</code>插入到有序区的中间位置<code>R[0,1...i-1]</code>，等差数列<code>n(n-1)/4</code>，时间复杂度为<code>O(n^2)</code>。</li></ol><p>  由于其<strong>平均时间性能接近最坏性能</strong>，所以是一种<strong>低效</strong>的排序方法。在该算法中只使用了<code>i</code>,<code>j</code>,<code>temp</code>三个辅助变量，与问题规模<code>n</code>无关，故空间复杂度为<code>O(1)</code>，是一个<strong>就地排序</strong>算法，同时相等时排序不变，是种<strong>稳定</strong>的排序算法。</p><hr><h2 id="2-折半插入排序（Binary-Insertion-Sort）">2.折半插入排序（Binary Insertion Sort）</h2><h3 id="核心思想-v2">核心思想</h3><p>  在直接插入排序的基础上，用折半查找的方法找到无序区元素插入的位置。</p><h3 id="完整代码-v2">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    vector&lt;<span class="hljs-type">int</span>&gt; R; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        <span class="hljs-type">int</span> a;<br>        cin &gt;&gt; a;<br>        R.<span class="hljs-built_in">push_back</span>(a); <br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) {<br>        <span class="hljs-type">int</span> temp = R[i];<br>        <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>, high = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (low &lt;= high) {<span class="hljs-comment">//退出循环时low=high+1</span><br>            <span class="hljs-type">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (temp &gt; R[mid]) {<br>                low = mid + <span class="hljs-number">1</span>;<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                high = mid - <span class="hljs-number">1</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= high + <span class="hljs-number">1</span>; j--) {  <br>            R[j + <span class="hljs-number">1</span>] = R[j];<br>        }<br>        R[high + <span class="hljs-number">1</span>] = temp;<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        cout &lt;&lt; R[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="算法分析-v2">算法分析</h3><p>  平均情况下时间复杂度为<code>O(n^2)</code>,从时间复杂度来看，折半插入与直接插入排序相同，但是当<strong>元素数量较多时，折半查找优于顺序查找</strong>，减少了关键字比较的次数，所以折半插入排序优于直接插入排序。同时其空间复杂度为<code>O(1)</code>，也是种<strong>稳定</strong>的排序算法。</p><hr><h2 id="3-希尔排序（Shell-Sort）">3.希尔排序（Shell Sort）</h2><h3 id="核心思想-v3">核心思想</h3><p>  希尔排序是一种<strong>采用分组插入排序</strong>的方法，先取一个小于<code>n</code>的整数${d}<em>{1}$作为第一个增量，将全部元素<code>R</code>中所有相距为 ${d}</em>{1}$的元素分成一组，在组内进行直接插入排序，然后取第二个增量 ${d}<em>{2}$（${d}</em>{2}$&lt;${d}<em>{1}$），重复上述的分组和排序，直至增量 ${d}</em>{t}$=1，即<strong>所有的元素为一组，在进行一次直接插入排序</strong>，从而使得所有元素有序！<br>  从理论上讲，增量序列的取值只要满足初始值小于<code>n</code>再递减并且最后等于<code>1</code>就可以了。最常见的是<strong>Shell增量序列</strong>，即取 ${d}<em>{1}$=<code>n/2</code>，${d}</em>{i+1}$=${d}<em>{i}$/2，直到 ${d}</em>{t}$=0为止！</p><h3 id="完整代码-v3">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>vector &lt;<span class="hljs-type">int</span>&gt; R;<br><span class="hljs-type">int</span> N;<br>cin &gt;&gt; N;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++) {<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br>R.<span class="hljs-built_in">push_back</span>(a);<br>}<br><span class="hljs-type">int</span> d = N / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (d != <span class="hljs-number">0</span>) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i= d;i&lt; N;i++) {<br><span class="hljs-type">int</span> temp = R[i];<br><span class="hljs-type">int</span> j = i;<br><span class="hljs-keyword">while</span> (j &gt;= d &amp;&amp; R[j - d] &gt; temp) {<br>R[j] = R[j - d];<br>j -= d;<br>}<br>R[j] = temp;<br>}<br>d /= <span class="hljs-number">2</span>;<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++) {<br>cout &lt;&lt; R[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="算法分析-v3">算法分析</h3><p>  由于希尔排序的增量序列不确定，算法的时间复杂度难以分析，我们一般认为其平均时间复杂度为<code>O(n^1.58)</code>，<strong>希尔排序通常要比直接插入排序快</strong>，在希尔排序中我们使用了<code>i</code>,<code>j</code>,<code>temp</code>,<code>d</code>四个辅助变量，与问题规模<code>n</code>无关，故算法空间复杂度为<code>O(1)</code>，也就是说是一种<strong>就地排序</strong>。但是希尔排序过程中相同元素的相对位置可能发生变化，因而是一种<strong>不稳定</strong>的排序算法。</p><hr><h2 id="4-快速排序（Quick-Sort）">4.快速排序（Quick Sort）</h2><h3 id="核心思想-v4">核心思想</h3><p>  在排序表中取一个元素为基准（一般是第一个），<strong>将基准归位</strong>（即将基准放在他最终的位置上），同时将所有小于基准的元素放到基准的前面（构成<strong>左子表</strong>），将所有大于基准的元素放到基准的后面（构成<strong>右子表</strong>），这个过程叫作<strong>划分</strong>。然后用递归的思想对左、右子表分别重复上述过程，直至每个子表只有一个元素或空为止。<br>  快速排序每次<strong>仅将一个元素归位</strong>，在最后一趟排序结束前并不产生明确的连续有序区。</p><h3 id="完整代码-v4">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(vector &lt;<span class="hljs-type">int</span>&gt;&amp;arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>{<br><span class="hljs-type">int</span> base = arr[low];<br><span class="hljs-type">int</span> i = low + <span class="hljs-number">1</span>, j = high;<br><span class="hljs-keyword">while</span> (i &lt;= j) {<br><span class="hljs-keyword">while</span> ( i &lt;= j &amp;&amp; arr[i] &lt;= base) {<br>i++;<br>}<br><span class="hljs-keyword">while</span> (i &lt;= j &amp;&amp; arr[j] &gt;= base) {<br>j--;<br>}<br><span class="hljs-keyword">if</span> (i &lt; j) {<br><span class="hljs-built_in">swap</span>(arr[i], arr[j]);<br>i++;<br>j--;<br>}<br>}<br><span class="hljs-built_in">swap</span>(arr[low], arr[j]);<br><span class="hljs-keyword">return</span> i;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(vector &lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>{<br><span class="hljs-keyword">if</span> (low &gt;= high)<span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> pi = <span class="hljs-built_in">partition</span>(arr, low, high);<br><span class="hljs-built_in">quicksort</span>(arr, low, pi<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">quicksort</span>(arr, pi<span class="hljs-number">+1</span>, high);<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>vector &lt;<span class="hljs-type">int</span>&gt; R;<br><span class="hljs-type">int</span> N;<br>cin &gt;&gt; N;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++) {<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br>R.<span class="hljs-built_in">push_back</span>(a);<br>}<br><span class="hljs-built_in">quicksort</span>(R, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++) {<br>cout &lt;&lt; R[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="算法分析-v4">算法分析</h3><ol><li>最好情况分析：如果初始排序表随机分布，使得<strong>每次划分恰好分为两个长度相同的子表</strong>，则递归树最小，性能最好，此时排序的时间复杂度为<code>O(nlog2n)</code>。</li><li>最坏情况分析：如果初始排序表<strong>正序或反序</strong>，使得<strong>每次划分的两个子表中一个为空</strong>，另一个长度为<code>n-1</code>，则递归树的高度最高，性能最差，此时排序的时间复杂度为<code>O(n^2)</code>。</li><li>平均情况分析：排序的平均时间复杂度为<code>O(nlog2n)</code>，这<strong>接近最好情况</strong>，所以快速排序是一种<strong>高效</strong>的排序方法。</li></ol><p>  快速排序使用的是<strong>递归算法</strong>，尽管每一次划分仅仅使用固定的几个辅助变量，但是<strong>递归树的高度</strong>最好为<code>O(log2n)</code>，对应最好的空间复杂度为<code>O(log2n)</code>，最坏情况下递归树的高度为<code>O(n)</code>，对应最坏的空间复杂度为<code>O(n)</code>。<br>  另外，快速排序是一种<strong>不稳定</strong>的排序算法。（STL的<code>sort()</code>函数就是使用快速排序实现的，当划分的区间长度较小时，采用直接插入排序，所以<code>sort()</code>是不稳定的，且时间复杂度为<code>O(nlog2n)</code>）</p><hr><h2 id="5-堆排序（Heap-Sort）">5.堆排序（Heap Sort）</h2><h3 id="核心思想-v5">核心思想</h3><p>  堆排序是对<strong>选择排序的一种改进</strong>，采用<strong>二叉树</strong>来代替简单的选择方法来找最大或者最小元素，属于一种<strong>树形选择排序方法</strong>。我们采用数组隐式构建二叉树：</p><ol><li><p><strong>小根堆</strong>：根节点小于其两个子节点，即：$k_{i} \leq k_{2i+1}$ 且 $k_{i} \leq k_{2i+2}$，显然此时根节点是最小的。</p></li><li><p><strong>大根堆</strong>：根节点大于其两个子节点，即：$k_{i} \geq k_{2i+1}$ 且 $k_{i} \geq k_{2i+2}$，显然此时根节点是最大的。</p></li></ol><h3 id="完整代码-v5">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> root)</span> </span>{<br>    <span class="hljs-type">int</span> largest = root; <br>    <span class="hljs-type">int</span> left = <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>; <br>    <span class="hljs-type">int</span> right = <span class="hljs-number">2</span> * root + <span class="hljs-number">2</span>; <br>    <span class="hljs-keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest])<br>        largest = left;<br>    <span class="hljs-keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest])<br>        largest = right;<br>    <span class="hljs-keyword">if</span> (largest != root) {<br>        <span class="hljs-built_in">swap</span>(arr[root], arr[largest]);<br>        <span class="hljs-built_in">heapify</span>(arr, n, largest);<br>    }<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>{<br>    <span class="hljs-type">int</span> n = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-built_in">heapify</span>(arr, n, i);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) {<br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[i]);<br>        <span class="hljs-built_in">heapify</span>(arr, i, <span class="hljs-number">0</span>);<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(N)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        cin &gt;&gt; arr[i];<br>    }<br>    <span class="hljs-built_in">heapSort</span>(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">" "</span>;<br>        cout &lt;&lt; arr[i];<br>    }<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="算法分析-v5">算法分析</h3><p>  堆排序的时间主要由<strong>建立初始堆</strong>和<strong>反复重建堆</strong>这两部分的时间构成，建立初始堆的时间复杂度为<code>O(nlog2n)</code>，后面反复归位元素和重建堆的时间复杂度为<code>O(nlog2n)</code>，因此最好、最坏、平均时间复杂度均为<code>O(nlog2n)</code>。<br>  堆排序只使用了固定的几个辅助变量，其算法的空间复杂度为<code>O(1)</code>，同时是一种<strong>不稳定</strong>的排序算法。</p><hr><h2 id="6-归并排序（Merge-Sort）">6.归并排序（Merge Sort）</h2><h3 id="核心思想-v6">核心思想</h3><p>  通过多次将两个或两个以上的相邻有序表合并成一个新的有序表。可以分为二路归并、三路归并、多路归并排序。其中二路归并排序又可以分为<strong>自底向上</strong>和<strong>自顶向下</strong>两种方法。<br>  二路归并先将<code>R[0...n-1]</code>看成<code>n</code>个长度为<code>1</code>的有序子表，然后在进行两两相邻有序子表的合并，得到<code>n/2</code>个长度为<code>2</code>的有序子表，在进行<strong>两两有序子表的合并</strong>，以此类推，直到得到一个长度为<code>n</code>的有序表为止。<br>  二路归并时，先将两段有序<strong>合并到一个新的局部变量</strong><code>R1</code>中，待合并完成后再将<code>R1</code><strong>复制回</strong><code>R</code>中。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span> </span>{<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(right - left + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-type">int</span> i = left, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) {<br>        <span class="hljs-keyword">if</span> (arr[i] &lt;= arr[j]) {<br>            temp[k++] = arr[i++];<br>        }<br>        <span class="hljs-keyword">else</span> {<br>            temp[k++] = arr[j++];<br>        }<br>    }<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) {<br>        temp[k++] = arr[i++];<br>    }<br>    <span class="hljs-keyword">while</span> (j &lt;= right) {<br>        temp[k++] = arr[j++];<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt; k; p++) {<br>        arr[left + p] = temp[p];<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>{<br>    <span class="hljs-keyword">if</span> (left &gt;= right) {<br>        <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">mergeSort</span>(arr, left, mid);      <br>    <span class="hljs-built_in">mergeSort</span>(arr, mid + <span class="hljs-number">1</span>, right); <br>    <span class="hljs-built_in">merge</span>(arr, left, mid, right); <br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(N)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        cin &gt;&gt; arr[i];<br>    }<br>    <span class="hljs-built_in">mergeSort</span>(arr, <span class="hljs-number">0</span>, arr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">" "</span>;<br>        cout &lt;&lt; arr[i];<br>    }<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="算法分析-v6">算法分析</h3><p>  在二路归并排序中，长度为<code>n</code>的排序表需要做<code>log2n</code>趟排序，对应的<strong>归并树</strong>高度为<code>log2n+1</code>，每趟归并时间为<code>O(n)</code>，故其时间复杂度的最好、最坏、平均情况都是<code>O(nlog2n)</code>。<br>  在归并排序中每次都需要用到<strong>局部变量</strong><code>R1</code>，最后一趟的排序一定是全部<code>n</code>个元素参与归并，所以总的辅助空间复杂度为<code>O(n)</code>。<br>  同时<code>Merge</code>算法不会改变相同关键字元素的相对次序，所以二路归并算法是一种<strong>稳定</strong>的排序方法！</p><hr><p>有关<strong>冒泡排序</strong>、<strong>选择排序</strong>和<code>sort()</code>函数排序的相关代码在：<a href="https://blog.csdn.net/2401_86849688/article/details/148566285?spm=1001.2014.3001.5501">数据结构实验2</a>中，有兴趣的可以直接传送门！</p><hr><h2 id="各种排序方法的比较和选择">各种排序方法的比较和选择</h2><table><thead><tr><th style="text-align:center">排序方法</th><th style="text-align:center">平均情况</th><th style="text-align:center">最坏情况</th><th style="text-align:center">最好情况</th><th style="text-align:center">空间复杂度</th><th style="text-align:center">稳定性</th></tr></thead><tbody><tr><td style="text-align:center">直接插入排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">折半插入排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center">$O(n^{1.58})$</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(\log_2 n)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">简单选择排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(n \log_2 n)$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">稳定</td></tr></tbody></table><p>封面来源：<a href="https://www.youtube.com/watch?v=AAwYzYkjNTg">Explaining EVERY Sorting Algorithm (part 1)</a></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>sort</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Classes and Objects in C++</title>
    <link href="/2025/07/22/CPP/Classes-and-Objects-in-C++/"/>
    <url>/2025/07/22/CPP/Classes-and-Objects-in-C++/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>看到过一个很讽刺的笑话：大多数国内高校学生学到的CPP只是<strong>C语言的cin/cout</strong>。这当然只是一句玩笑话，但很深刻地反映出对于<strong>CPP精髓面向对象编程</strong>的忽视。这是有理可依的：编程语言的学习本身就和传统的课堂授课模式存在较大的出入，<strong>编程重视实践</strong>，枯燥的语法讲解如同天书一般晦涩难懂，更不用提OOP所涉及的都是比较<strong>大规模的项目工程</strong>，如果只是在课堂上乏味地讲解“什么是析构函数，什么是继承，什么是多态··· ”，很容易将CPP学成死记硬背的无聊学科。</p>          </div><p>因此，笔者希望通过博客的方式，记录自己<strong>OOP in CPP</strong>的学习笔记，并分享给各位小伙伴！</p><h1>Why OOP?</h1><ul><li><p>面向过程的局限性：将描述事物的数据与处理数据的函数分开。</p><ul><li>若所描述事物的数据结构发生变化时，这些成员函数也必须重新设计！</li><li>在主函数中对数据进行修改，仅仅需要执行一条赋值语句，数据安全性得不到保障！</li></ul></li><li><p>面向对象的优势：将描述事物的数据与处理函数<strong>封装</strong>成一个整体，称为类。</p><ul><li>封装在类中的函数和数据不受外界的影响，即类使数据具有良好的<strong>独立性</strong>和<strong>可维护性</strong>！</li><li>类中的数据在类的外部不能直接调用，外部只能通过<strong>公共接口函数</strong>来处理类中的数据，从而保障了<strong>数据的安全性</strong>！</li></ul></li></ul><h1>类和对象</h1><h2 id="类：">类：</h2><p>  类描述了某一类事物应该具有哪些<strong>特征</strong>和<strong>行为</strong>。比如我们想描述一个“商品”类别，类就会告诉我们商品的名称、编号、进货价格、售出价格等特征，但是这个“商品”并不是一真正的商品，类只告诉了我们“商品”是什么样的、应该具有的特征。类是对象的抽象表示，它<strong>本身不占用内存空间</strong>。</p><p>类<code>class</code>与结构体<code>struct</code>形式相似，关键字不同！</p><ul><li><code>class</code>的成员默认是<code>private</code>的</li><li><code>struct</code>的成员默认是<code>public</code>的</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-keyword">class</span> 类名 {<br>     <span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//私有数据成员和成员函数</span><br>     <span class="hljs-keyword">protected</span>:<br><span class="hljs-comment">//保护数据成员和成员函数</span><br>     <span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//共有数据成员和成员函数</span><br>};<br></code></pre></td></tr></tbody></table></figure><ul><li><code>private</code>:只能被类本身的成员函数、友元函数、友元函数的成员函数访问，派生类也无法访问。</li><li><code>protected</code>:除派生类可以进行访问，其余与<code>private</code>相同。</li><li><code>public</code>:可以被程序中任意代码访问。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cgoods</span>{<span class="hljs-comment">//商品类</span><br>     <span class="hljs-keyword">private</span>:<br>        string ID; <span class="hljs-comment">//商品编号</span><br>        string name; <span class="hljs-comment">//商品名称</span><br>        <span class="hljs-type">double</span> Purchasingprice; <span class="hljs-comment">//进货价格</span><br>        <span class="hljs-type">double</span> Sellingprice; <span class="hljs-comment">//售出价格</span><br>        <span class="hljs-type">int</span> SellCount; <span class="hljs-comment">//售出数量</span><br>        <span class="hljs-type">static</span> <span class="hljs-type">double</span> Profit; <span class="hljs-comment">//总利润</span><br>     <span class="hljs-keyword">protected</span>:<span class="hljs-comment">//无</span><br>     <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">cgoods</span>(string id, string name, <span class="hljs-type">double</span> purchasingprice){<span class="hljs-comment">//构造函数</span><br>        <span class="hljs-comment">//函数体</span><br>        }<br>        ~<span class="hljs-built_in">cgoods</span>(){<span class="hljs-comment">//析构函数</span><br>        } <br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetPurchasingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> purchasingprice)</span></span>{<span class="hljs-comment">//设置进货价格</span><br>        <span class="hljs-comment">//函数体</span><br>        }<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetSellingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> sellingprice)</span></span>{<span class="hljs-comment">//设置出货价格</span><br>        <span class="hljs-comment">//函数体</span><br>        }<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setSellingcount</span><span class="hljs-params">(<span class="hljs-type">int</span> sellcount)</span></span>{<span class="hljs-comment">//设置出货商品价格</span><br>        <span class="hljs-comment">//函数体</span><br>        }<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sell</span><span class="hljs-params">(<span class="hljs-type">double</span> sellingprice,<span class="hljs-type">int</span> sellcount)</span></span>{<br>        <span class="hljs-comment">//函数体</span><br>        }<br>        <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">double</span> <span class="hljs-title">getProfit</span><span class="hljs-params">()</span></span>{<span class="hljs-comment">//获取总利润，静态成员函数</span><br>        <span class="hljs-comment">//函数体</span><br>        }<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-comment">//函数体</span><br>        }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="对象：">对象：</h2><p>  对象则是根据类创建出来的具体实例。比如我们创建一个叫“手机”的“商品”，他有自己的具体的编号、进货价格、售出价格等，所有的特征都是独一无二的，不会与其他商品相同。每一个对象都是根据类创建的具有其属性和方法的实例，并且具有唯一的身份标识（如内存地址）和自己独特的属性值。 <strong>对象是占用内存空间的</strong>，它的<strong>属性值可以在运行时动态地改变</strong>。</p><p>定义对象的三种方法：</p><ul><li>先定义类的类型，再定义对象：</li></ul> <figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> 类名{<br>    成员表;<br>};<br>[<span class="hljs-keyword">class</span>]可选 类名 对象名列表;<br></code></pre></td></tr></tbody></table></figure><p>例如：</p> <figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">class</span> cgoods <span class="hljs-title">goods1</span><span class="hljs-params">(<span class="hljs-string">"1001001"</span>,<span class="hljs-string">"元气森林"</span>)</span></span>;<span class="hljs-comment">//创建对象goods1</span><br><span class="hljs-function">cgoods <span class="hljs-title">goods</span><span class="hljs-params">(<span class="hljs-string">"1001001"</span>,<span class="hljs-string">"元气森林"</span>)</span></span>;<span class="hljs-comment">//两种方法等价</span><br></code></pre></td></tr></tbody></table></figure><ul><li>在定义类类型时<strong>同时创建对象</strong>：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> 类名{<br>    成员表;<br>}对象名表;<br></code></pre></td></tr></tbody></table></figure><p>例如：</p> <figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cgoods</span>{<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">public</span>:<br>}<span class="hljs-built_in">goods1</span>(<span class="hljs-string">"1001001"</span>,<span class="hljs-string">"元气森林"</span>)；<br></code></pre></td></tr></tbody></table></figure><ul><li>不出现类名<strong>直接定义对象</strong>：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> {<br>     成员表;<br> }对象名表;<br></code></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> {<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">public</span>:<br>}<span class="hljs-built_in">goods1</span>(<span class="hljs-string">"1001001"</span>,<span class="hljs-string">"元气森林"</span>)；<br></code></pre></td></tr></tbody></table></figure><p>此方法由于没有类名，所以只能<strong>一次性声明多个对象</strong>，此后再无法声明此类对象！</p><h2 id="类的成员访问">类的成员访问</h2><ul><li>对于数据成员的访问</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">对象名.成员名<span class="hljs-comment">//数据成员访问</span><br>对象指针名-&gt;成员名<br>(*对象指针名).成员名<br></code></pre></td></tr></tbody></table></figure><ul><li>对于成员函数的访问</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">对象名.成员函数名(参数表)<span class="hljs-comment">//成员函数访问</span><br>对象指针名-&gt;成员函数名(参数表)<br>(*对象指针名).成员函数名(参数表)<br></code></pre></td></tr></tbody></table></figure><h2 id="类的构造函数-Constructor">类的构造函数(Constructor)</h2><ul><li>类的对象太过复杂，一个对象可能有许许多多的数据成员，这就意味着我们要对许许多多的数据成员进行初始化，实现这一过程并不容易。构造函数的作用就是在对象被创建时<strong>利用特定的初始值</strong>构造对象，把对象<strong>置于某一个初始状态</strong>。</li></ul><ol><li>有<strong>与类完全相同的名字</strong></li><li><strong>没有类型说明</strong>，不允许有返回值</li><li><strong>可以进行重载</strong>，即一个类中允许定义多个参数不同的构造函数</li><li>可以在声明时的<strong>参数表里给予初始值</strong></li><li>每个类都必须至少有一个构造函数，如果没有显式的为类提供构造函数，则C++<strong>提供一个默认的无参构造函数</strong>，只负责对象的创建，而不做任何初始化的工作</li><li>一旦类定义了构造函数，C++不再提供默认的无参构造函数</li><li>程序中不能直接调用构造函数，他是在<strong>创建类的对象时自动调用</strong>的</li></ol><hr><h3 id="1-无参构造函数">1. 无参构造函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Time</span>() { <span class="hljs-comment">// 定义构造成员函数，函数名与类名相同</span><br>        hour = <span class="hljs-number">22</span>;<br>        minute = <span class="hljs-number">22</span>;<br>        sec = <span class="hljs-number">22</span>;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_time</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 函数声明</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show_time</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 函数声明</span><br><span class="hljs-keyword">private</span>: <span class="hljs-comment">// 私有数据成员</span><br>    <span class="hljs-type">int</span> hour;<br>    <span class="hljs-type">int</span> minute;<br>    <span class="hljs-type">int</span> sec;<br>};<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::set_time</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">// 定义成员函数，向数据成员赋值</span><br>    cin &gt;&gt; hour;<br>    cin &gt;&gt; minute;<br>    cin &gt;&gt; sec;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::show_time</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">// 定义成员函数，输出数据成员的值</span><br>    cout &lt;&lt; <span class="hljs-string">"时间为: "</span> &lt;&lt; hour &lt;&lt; <span class="hljs-string">":"</span> &lt;&lt; minute &lt;&lt; <span class="hljs-string">":"</span> &lt;&lt; sec &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    Time t1;       <span class="hljs-comment">// 建立对象t1，同时调用构造函数t1.Time()</span><br>    t<span class="hljs-number">1.</span><span class="hljs-built_in">set_time</span>(); <span class="hljs-comment">// 对t1的数据成员赋值</span><br>    t<span class="hljs-number">1.</span><span class="hljs-built_in">show_time</span>(); <span class="hljs-comment">// 显示t1的数据成员的值</span><br>    Time t2;       <span class="hljs-comment">// 建立对象 t2，同时调用构造函数 t2.Time()</span><br>    t<span class="hljs-number">2.</span><span class="hljs-built_in">show_time</span>(); <span class="hljs-comment">// 显示t2的数据成员的值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">12 30 40<br><span class="hljs-section">时间为: 12:30:40</span><br><span class="hljs-section">时间为: 22:22:22</span><br></code></pre></td></tr></tbody></table></figure><h3 id="2-含参构造函数">2. 含参构造函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">构造函数名（类型<span class="hljs-number">1</span> 形参<span class="hljs-number">1</span>，类型<span class="hljs-number">2</span> 形参<span class="hljs-number">2</span>，...）<br>类名 对象名（实参<span class="hljs-number">1</span>，实参<span class="hljs-number">2</span>，...）<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>);  <span class="hljs-comment">// 带有三个参数的构造函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">volume</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> height;<br>    <span class="hljs-type">int</span> width;<br>    <span class="hljs-type">int</span> length;<br>};<br><br><span class="hljs-comment">// 构造函数的实现</span><br>Cuboid::<span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len) {<br>    height = h;<br>    width = w;<br>    length = len;<br>}<br><br><span class="hljs-comment">// volume成员函数的实现</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Cuboid::volume</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> (height * width * length);<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-function">Cuboid <span class="hljs-title">cuboid1</span><span class="hljs-params">(<span class="hljs-number">15</span>, <span class="hljs-number">45</span>, <span class="hljs-number">30</span>)</span></span>;  <span class="hljs-comment">// 定义对象时需要根据构造函数形参提供实参</span><br>    cout &lt;&lt; <span class="hljs-string">"cuboid1的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">1.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br><br>    <span class="hljs-function">Cuboid <span class="hljs-title">cuboid2</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">22</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">"cuboid2的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">2.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cuboid1</span>的体积为: <span class="hljs-number">20250</span><br><span class="hljs-attribute">cuboid2</span>的体积为: <span class="hljs-number">6600</span><br></code></pre></td></tr></tbody></table></figure><h3 id="3-构造函数重载">3. 构造函数重载</h3><p>定义多个构造函数以便给对象提供不同的初始化方法，这些构造函数具有相同的名字而<strong>参数的个数或参数的类型不相同</strong>。可以为一个类声明的构造函数的个数是<strong>无限制的</strong>，只要每个构造函数的<strong>形参表是唯一的</strong>，定义对象时会根据提供的实参决定调用哪一个构造函数。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cuboid</span>();                  <span class="hljs-comment">// 默认构造函数（无参数）</span><br>    <span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len);  <span class="hljs-comment">// 带参数的构造函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">volume</span><span class="hljs-params">()</span></span>;              <span class="hljs-comment">// 计算体积方法</span><br>    <br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> height;   <span class="hljs-comment">// 高度</span><br>    <span class="hljs-type">int</span> width;    <span class="hljs-comment">// 宽度</span><br>    <span class="hljs-type">int</span> length;   <span class="hljs-comment">// 长度</span><br>};<br><br><span class="hljs-comment">// 默认构造函数实现</span><br>Cuboid::<span class="hljs-built_in">Cuboid</span>() {<br>    height = <span class="hljs-number">15</span>;<br>    width = <span class="hljs-number">15</span>;<br>    length = <span class="hljs-number">15</span>;<br>}<br><br><span class="hljs-comment">// 带参数的构造函数实现</span><br>Cuboid::<span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len) {<br>    height = h;<br>    width = w;<br>    length = len;<br>}<br><br><span class="hljs-comment">// 体积计算方法实现</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Cuboid::volume</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> (height * width * length);<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 创建对象cuboid1，使用默认构造函数</span><br>    Cuboid cuboid1;<br>    cout &lt;&lt; <span class="hljs-string">"cuboid1的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">1.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br>    <br>    <span class="hljs-comment">// 创建对象cuboid2，使用带参数的构造函数</span><br>    <span class="hljs-function">Cuboid <span class="hljs-title">cuboid2</span><span class="hljs-params">(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">"cuboid2的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">2.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cuboid1</span>的体积为: <span class="hljs-number">3375</span><br><span class="hljs-attribute">cuboid2</span>的体积为: <span class="hljs-number">27000</span><br></code></pre></td></tr></tbody></table></figure><h3 id="4-使用默认值的构造函数">4. 使用默认值的构造函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> {<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> height;   <span class="hljs-comment">// 高度</span><br>    <span class="hljs-type">int</span> width;    <span class="hljs-comment">// 宽度</span><br>    <span class="hljs-type">int</span> length;   <span class="hljs-comment">// 长度</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> h = <span class="hljs-number">15</span>, <span class="hljs-type">int</span> w = <span class="hljs-number">15</span>, <span class="hljs-type">int</span> len = <span class="hljs-number">15</span>); <span class="hljs-comment">// 构造函数，全部参数带默认值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">volume</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 计算体积</span><br>};<br><br><span class="hljs-comment">// 构造函数实现（定义时可不再指定默认值）</span><br>Cuboid::<span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len) {<br>    height = h;   <br>    width = w;<br>    length = len;<br>}<br><br><span class="hljs-comment">// 计算体积方法实现</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Cuboid::volume</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> (height * width * length);<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    Cuboid cuboid1; <span class="hljs-comment">// 没有给出实参，使用全部默认值 height=15,width=15,length=15</span><br>    cout &lt;&lt; <span class="hljs-string">"cuboid1的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">1.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br><br>    <span class="hljs-function">Cuboid <span class="hljs-title">cuboid2</span><span class="hljs-params">(<span class="hljs-number">25</span>)</span></span>; <span class="hljs-comment">// 只给定一个实参，height=25,width=15,length=15</span><br>    cout &lt;&lt; <span class="hljs-string">"cuboid2的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">2.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br><br>    <span class="hljs-function">Cuboid <span class="hljs-title">cuboid3</span><span class="hljs-params">(<span class="hljs-number">25</span>, <span class="hljs-number">40</span>)</span></span>; <span class="hljs-comment">// 只给定2个实参，height=25,width=40,length=15</span><br>    cout &lt;&lt; <span class="hljs-string">"cuboid3的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">3.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br><br>    <span class="hljs-function">Cuboid <span class="hljs-title">cuboid4</span><span class="hljs-params">(<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>)</span></span>; <span class="hljs-comment">// 给定3个实参，height=25,width=30,length=40</span><br>    cout &lt;&lt; <span class="hljs-string">"cuboid4的体积为: "</span> &lt;&lt; cuboid<span class="hljs-number">4.</span><span class="hljs-built_in">volume</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cuboid1</span>的体积为: <span class="hljs-number">3375</span><br><span class="hljs-attribute">cuboid2</span>的体积为: <span class="hljs-number">5625</span><br><span class="hljs-attribute">cuboid3</span>的体积为: <span class="hljs-number">15000</span><br><span class="hljs-attribute">cuboid4</span>的体积为: <span class="hljs-number">30000</span><br></code></pre></td></tr></tbody></table></figure><h3 id="5-子对象和构造函数">5.子对象和构造函数</h3><p>在定义一个新的类时，<strong>将一个已有类作为数据成员</strong>，这个类对象叫做子对象。我们通过调用子对象成员的构造函数来完成对子对象的初始化。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> {  <span class="hljs-comment">// 定义矩形类</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> Width, Length;  <span class="hljs-comment">// 宽度、长度</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len) {  <span class="hljs-comment">// 带参构造函数</span><br>        Width = w;<br>        Length = len;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span> </span>{  <span class="hljs-comment">// 计算面积</span><br>        <span class="hljs-keyword">return</span> (Width * Length);<br>    }<br>};<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> {  <span class="hljs-comment">// 定义长方体类</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> Height;  <span class="hljs-comment">// 高度</span><br>    Rectangle r;  <span class="hljs-comment">// 使用Rectangle类对象作为成员</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> h) : <span class="hljs-built_in">r</span>(w, len) {  <span class="hljs-comment">// 初始化列表初始化r对象</span><br>        Height = h;  <span class="hljs-comment">// 原代码这里是Height-h，应该是赋值=</span><br>    }<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Volume</span><span class="hljs-params">()</span> </span>{  <span class="hljs-comment">// 计算体积</span><br>        <span class="hljs-keyword">return</span> (Height * r.<span class="hljs-built_in">Area</span>());<br>    }<br>};<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-function">Cuboid <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">100</span>)</span></span>;  <span class="hljs-comment">// 创建长方体对象</span><br>    cout &lt;&lt; <span class="hljs-string">"长方体 c1 的体积是: "</span> &lt;&lt; c<span class="hljs-number">1.</span><span class="hljs-built_in">Volume</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">长方体 <span class="hljs-built_in">c1</span> 的体积是: <span class="hljs-number">20000</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> h) : <span class="hljs-built_in">r</span>(w, len) {  <span class="hljs-comment">// 初始化列表初始化r对象</span><br>       Height = h;  <span class="hljs-comment">// 原代码这里是Height-h，应该是赋值=</span><br>   }<br></code></pre></td></tr></tbody></table></figure><p>实参10、20通过<code>w</code>和<code>len</code>赋值<code>r(w, len)</code>，调用类的成员<code>Rectangle(int w, int len)</code>构造函数完成初始化，实参100通过<code>Height = h</code>完成对<code>Cuboid</code>的初始化。</p><h3 id="6-拷贝构造函数">6.拷贝构造函数</h3><p>设计拷贝构造函数<strong>实现类中的一个对象给另一个对象的每个非静态数据成员赋值</strong>。（<strong>用已经初始化的对象去初始化一个新定义的对象</strong>）</p><ol><li>拷贝构造函数的函数名必须<strong>与类名一致</strong>，函数的形式参数是本类型的一个<strong>引用变量</strong>，必须为<strong>引用</strong>！</li><li><strong>自定义拷贝构造函数</strong>，能够实现<strong>有选择</strong>的复制原对象中的数据（实现对部分数据的修改）</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sample</span> {        <span class="hljs-comment">// 定义Sample类</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> nTest;        <span class="hljs-comment">// 私有成员变量，用于存储测试值</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，初始化nTest</span><br>    <span class="hljs-built_in">Sample</span>(<span class="hljs-type">int</span> ly) {  <span class="hljs-comment">// 参数ly用于初始化nTest</span><br>        nTest = ly;   <span class="hljs-comment">// 将参数值赋给成员变量</span><br>    }<br>    <br>    <span class="hljs-comment">// 自定义的拷贝构造函数</span><br>    <span class="hljs-built_in">Sample</span>(Sample &amp;tS) {  <span class="hljs-comment">// 参数是对另一个Sample对象的引用</span><br>        cout &lt;&lt; <span class="hljs-string">"拷贝构造函数被调用"</span> &lt;&lt; endl;  <span class="hljs-comment">// 输出提示信息</span><br>        nTest = tS.nTest + <span class="hljs-number">8</span>;  <span class="hljs-comment">// 新对象的nTest值 = 原对象值 + 8</span><br>    }<br>    <br>    <span class="hljs-comment">// 获取nTest值的成员函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">readtest</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> nTest;  <span class="hljs-comment">// 返回当前对象的nTest值</span><br>    }<br>    <br>    <span class="hljs-comment">// 设置nTest值的成员函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">settest</span><span class="hljs-params">(<span class="hljs-type">int</span> ly)</span> </span>{<br>        nTest = ly;    <span class="hljs-comment">// 修改当前对象的nTest值</span><br>    }<br>};<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-function">Sample <span class="hljs-title">S1</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>;    <span class="hljs-comment">// 创建S1对象，nTest初始化为100</span><br>    <span class="hljs-function">Sample <span class="hljs-title">S2</span><span class="hljs-params">(S1)</span></span>;     <span class="hljs-comment">// 使用拷贝构造函数创建S2对象</span><br>    cout &lt;&lt; S<span class="hljs-number">2.</span><span class="hljs-built_in">readtest</span>() &lt;&lt; endl;  <span class="hljs-comment">// 输出S2的nTest值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">拷贝构造函数被调用<br>108<br></code></pre></td></tr></tbody></table></figure><h2 id="类的析构函数-Destructor">类的析构函数(Destructor)</h2><p>相当于创建对象时用new申请了一片内存空间，应在退出前<strong>在析构函数中用delete释放</strong>。析构函数是与构造函数作用相反的函数，当对象生命周期结束时，自动执行析构函数。</p><ol><li>有与类完全相同的名字，只是在<strong>函数名前面加一个位取反符“~”</strong>，以区别于构造函数</li><li>不带任何参数，没有返回值</li><li>一个类最多只能有一个析构函数，<strong>无法进行重载</strong></li><li>如果用户没有编写析构函数，编译系统会<strong>自动的生成一个默认的析构函数</strong></li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> 类名{<br>    <span class="hljs-keyword">public</span>:<br>    ~类名();{<span class="hljs-comment">//析构函数</span><br>    <span class="hljs-comment">//函数体</span><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//私有数据成员</span><br>    string name;    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">int</span> age;        <span class="hljs-comment">//年龄</span><br>    <span class="hljs-type">char</span> gender;    <span class="hljs-comment">//性别，'f'女性，'m'男性</span><br>    string idNumber; <span class="hljs-comment">//身份证号码</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(string, <span class="hljs-type">int</span>, <span class="hljs-type">char</span>, string);<br>    <span class="hljs-built_in">Person</span>(Person&amp;);<br>    ~<span class="hljs-built_in">Person</span>();<br>    <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 函数声明</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>;   <span class="hljs-comment">// 函数声明</span><br>};<br><br><span class="hljs-comment">// 成员函数在类体外实现</span><br>Person::<span class="hljs-built_in">Person</span>(string theName, <span class="hljs-type">int</span> theAge, <span class="hljs-type">char</span> theGender, string theIdNumber) {<br>    name = theName;<br>    age = theAge;<br>    gender = theGender;<br>    idNumber = theIdNumber;<br>    cout &lt;&lt; name &lt;&lt; <span class="hljs-string">" Constructor called."</span> &lt;&lt; endl;<br>}<br><br>Person::<span class="hljs-built_in">Person</span>(Person&amp; theObject) {<br>    name = theObject.name;<br>    age = theObject.age;<br>    gender = theObject.gender;<br>    idNumber = theObject.idNumber;<br>    cout &lt;&lt; <span class="hljs-string">"Copy Constructor called."</span> &lt;&lt; endl; <span class="hljs-comment">//输出有关信息</span><br>}<br><br>Person::~<span class="hljs-built_in">Person</span>() { <span class="hljs-comment">//析构函数</span><br>    cout &lt;&lt; name &lt;&lt; <span class="hljs-string">" Destructor called."</span> &lt;&lt; endl;<br>}<br><br><span class="hljs-function">string <span class="hljs-title">Person::getName</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> name;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Person::showInfo</span><span class="hljs-params">()</span> </span>{<br>    cout &lt;&lt; <span class="hljs-string">"name: "</span> &lt;&lt; name &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"age: "</span> &lt;&lt; age &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"gender: "</span> &lt;&lt; gender &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"id number: "</span> &lt;&lt; idNumber &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">"张三"</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'m'</span>, <span class="hljs-string">"12345200006061111"</span>)</span></span>; <span class="hljs-comment">//建立对象p1</span><br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">"李四"</span>, <span class="hljs-number">31</span>, <span class="hljs-string">'f'</span>, <span class="hljs-string">"12345198111091234"</span>)</span></span>; <span class="hljs-comment">//建立对象p2</span><br><br>    p<span class="hljs-number">1.</span><span class="hljs-built_in">showInfo</span>();<br>    p<span class="hljs-number">2.</span><span class="hljs-built_in">showInfo</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs delphi">张三 <span class="hljs-function"><span class="hljs-keyword">Constructor</span> <span class="hljs-title">called</span>.</span><br><span class="hljs-function">李四 <span class="hljs-title">Constructor</span> <span class="hljs-title">called</span>.</span><br><span class="hljs-function"><span class="hljs-title">name</span>:</span> 张三<br>age: <span class="hljs-number">12</span><br>gender: m<br>id number: <span class="hljs-number">12345200006061111</span><br><span class="hljs-keyword">name</span>: 李四<br>age: <span class="hljs-number">31</span><br>gender: f<br>id number: <span class="hljs-number">12345198111091234</span><br>李四 <span class="hljs-function"><span class="hljs-keyword">Destructor</span> <span class="hljs-title">called</span>.</span><br><span class="hljs-function">张三 <span class="hljs-title">Destructor</span> <span class="hljs-title">called</span>.</span><br></code></pre></td></tr></tbody></table></figure><p><strong>注意观察输出：构造函数和析构函数调用的顺序！</strong></p><div class="note note-warning">            <ol><li>析构函数在对象作为函数值返回之后被调用。</li></ol>          </div><h2 id="构造函数和析构函数调用顺序">构造函数和析构函数调用顺序</h2><p>一般而言，调用构造函数的次序与调用析构函数的<strong>次序相反</strong>，与栈类似：<strong>先调用构造函数的对象，最后调用析构函数</strong>。</p><h3 id="特殊情况：">特殊情况：</h3><div class="note note-warning">            <ol><li><strong>全局定义</strong>对象（函数体外定义的对象）：程序开始之前调用构造函数，程序结束或调用exit()函数时调用析构函数。</li><li><strong>局部定义</strong>的对象（函数体内定义的对象）：程序执行到定义对象的地方时调用构造函数，函数结束时调用析构函数。</li><li><strong>static定义</strong>的对象：在首次到达对象定义位置时调用构造函数，程序结束时调用析构函数。</li><li><strong>new动态生成</strong>的对象：产生对象时调用构造函数，用delete释放对象时，才调用析构函数。若不使用delete运算符来撤销动态生成的对象，则析构函数不会被调用。</li></ol>          </div><h2 id="对象的动态建立和释放">对象的动态建立和释放</h2><ul><li>new运算符建立对象：<strong>先为类的对象分配内存空间</strong>，然后<strong>自动调用构造函数初始化</strong>对象的数据成员，最后将变量的起始地址返还给指针变量。</li><li>delete运算符释放对象：<strong>只有在delete运算符释放对象时，才会调用析构函数将对象销毁</strong>。</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义一个复数类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数：初始化实部和虚部</span><br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> r, <span class="hljs-type">double</span> i) {<br>        real = r;    <span class="hljs-comment">// 设置实部值</span><br>        imag = i;    <span class="hljs-comment">// 设置虚部值</span><br>        cout &lt;&lt; <span class="hljs-string">"构造函数被调用"</span> &lt;&lt; endl;<br>    }<br><br>    <span class="hljs-comment">// 析构函数：对象销毁时自动调用</span><br>    ~<span class="hljs-built_in">Complex</span>() {<br>        cout &lt;&lt; <span class="hljs-string">"析构函数被调用"</span> &lt;&lt; endl;<br>    }<br><br>    <span class="hljs-comment">// 显示复数的方法</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>{<br>        cout &lt;&lt; <span class="hljs-string">"("</span> &lt;&lt; real &lt;&lt; <span class="hljs-string">","</span> &lt;&lt; imag &lt;&lt; <span class="hljs-string">")"</span> &lt;&lt; endl;<br>    }<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> real;  <span class="hljs-comment">// 复数的实部</span><br>    <span class="hljs-type">double</span> imag;  <span class="hljs-comment">// 复数的虚部</span><br>};<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 动态创建一个Complex对象</span><br>    Complex* pc1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Complex</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-comment">// 调用display方法显示复数</span><br>    pc1-&gt;<span class="hljs-built_in">display</span>();  <span class="hljs-comment">// 等价于 (*pc1).display();</span><br><br>    <span class="hljs-comment">// 释放对象内存</span><br>    <span class="hljs-keyword">delete</span> pc1;<br><br>    cout &lt;&lt; <span class="hljs-string">"程序结束"</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">构造函数被调用<br>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>析构函数被调用<br>程序结束<br></code></pre></td></tr></tbody></table></figure><h2 id="静态成员">静态成员</h2><p>声明为static的类成员称为静态成员，可以<strong>被类的所有对象共享</strong>。</p><ul><li>静态数据成员：描述这一类对象所共有的数据，所有对象公用这一部分存储空间。</li><li>静态数据函数</li></ul><p>eg:Profit和 static double getProfit() ，总利润是出售所有商品获得的，并不隶属于哪一个商品对象。</p><h3 id="为什么不使用全局变量？">为什么不使用全局变量？</h3><div class="note note-warning">            <ol><li><strong>违背了OOP封装性的精神</strong>，任何地方都可以对全局变量进行访问，破坏了信息隐藏原则</li><li>过多使用全局变量会产生<strong>重名冲突</strong></li><li>能够<strong>明确归属</strong>，直接表明它是类的一部分，便于进行初始化</li></ol>          </div><h3 id="静态数据成员">静态数据成员</h3><p>在类的定义中的数据成员声明前加上关键字<code>static</code>，表示该成员是静态数据成员。由于静态数据成员<strong>由类的所有对象共享</strong>，所以静态成员的存储空间<strong>不会随着对象的产生而分配</strong>，也<strong>不会随着对象的消失而释放</strong>，因此静态数据成员不能在类体内进行初始化，而只能在<strong>类体内进行声明</strong>，在<strong>类体外进行初始化</strong>。</p><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">数据类型名类名::</span>静态数据成员名=初值<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：</p><ul><li><strong>不需要加<code>static</code>关键字</strong></li><li><strong>需要通过作用域运算符<code>::</code>限定修饰</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cgoods</span>{ <br>    <span class="hljs-keyword">private</span>:<br>    ......<br>    <span class="hljs-type">static</span> <span class="hljs-type">double</span> Profit;<br>    <span class="hljs-keyword">public</span>:<br>    ......<br>}<br><span class="hljs-type">double</span> cgoods::Profit=<span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure><p>类外的定义是必要的，若没有明确赋初值，则编译系统会自动赋初值为0。</p><h3 id="静态成员函数">静态成员函数</h3><p>与类的数据成员相同，在成员函数前加上<code>static</code>可以创建一个静态成员函数。静态函数没有<code>this</code>指针，通常他只访问属于全体对象的成员————即静态成员。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cgoods::getProfit</span><span class="hljs-params">()</span></span>{<br>    <span class="hljs-keyword">return</span> Profit;<span class="hljs-comment">//使用了静态成员变量</span><br>}<br></code></pre></td></tr></tbody></table></figure><div class="note note-warning">            <ol><li>非静态成员函数可以任意地访问静态成员函数和静态数据成员</li><li>静态成员函数不能直接访问非静态成员函数和非静态数据成员</li></ol>          </div><h3 id="静态成员的访问">静态成员的访问</h3><p>用类的对象访问 || 直接用作用域运算符“::”通过类名访问</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">类名::静态数据成员名<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">对象名.静态数据成员名<br><span class="hljs-comment">//容易让人误认为静态数据成员是属于某个对象的</span><br></code></pre></td></tr></tbody></table></figure><p>静态成员函数的访问与静态成员数据的访问的形式相同，不做过多阐释。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CStudent</span> {<br><span class="hljs-keyword">private</span>:<br>    string SName;       <span class="hljs-comment">// 保存学生姓名</span><br>    <span class="hljs-type">float</span> Score;        <span class="hljs-comment">// 保存学生的成绩</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> studentTotal;    <span class="hljs-comment">// 静态数据成员，保存学生的总人数</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">float</span> SumScore;      <span class="hljs-comment">// 静态数据成员，保存所有学生的成绩和</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，当新建一个对象时，人数studentTotal加1</span><br>    <span class="hljs-built_in">CStudent</span>(string name, <span class="hljs-type">float</span> sc);<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">float</span> <span class="hljs-title">average</span><span class="hljs-params">()</span></span>;     <span class="hljs-comment">// 计算学生的平均分</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>;               <span class="hljs-comment">// 打印输出学生的姓名和分数</span><br>    ~<span class="hljs-built_in">CStudent</span>();                <span class="hljs-comment">// 析构函数，当减少一个对象时，studentTotal减1</span><br>};<br><br><span class="hljs-comment">// 静态数据成员的初始化必须在类外进行</span><br><span class="hljs-type">int</span> CStudent::studentTotal = <span class="hljs-number">0</span>;<br><span class="hljs-type">float</span> CStudent::SumScore = <span class="hljs-number">0</span>;<br><br>CStudent::<span class="hljs-built_in">CStudent</span>(string name, <span class="hljs-type">float</span> sc) {<br>    SName = name;<br>    Score = sc;<br>    studentTotal++;     <span class="hljs-comment">// 学生人数加1</span><br>    SumScore += sc;     <span class="hljs-comment">// 总分数增加</span><br>    cout &lt;&lt; SName &lt;&lt; <span class="hljs-string">" Constructor called."</span> &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CStudent::Print</span><span class="hljs-params">()</span> </span>{<br>    cout &lt;&lt; SName &lt;&lt; <span class="hljs-string">": "</span> &lt;&lt; Score &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">CStudent::average</span><span class="hljs-params">()</span> </span>{     <span class="hljs-comment">// 静态成员函数访问静态数据成员</span><br>    <span class="hljs-keyword">if</span> (studentTotal == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 防止除以0</span><br>    <span class="hljs-keyword">return</span> (SumScore / studentTotal);<br>}<br><br>CStudent::~<span class="hljs-built_in">CStudent</span>() {<br>    studentTotal--;     <span class="hljs-comment">// 学生人数减1</span><br>    SumScore -= Score;  <span class="hljs-comment">// 总分数减少</span><br>    cout &lt;&lt; SName &lt;&lt; <span class="hljs-string">" Destructor called."</span> &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 简单测试</span><br>    <span class="hljs-function">CStudent <span class="hljs-title">stud1</span><span class="hljs-params">(<span class="hljs-string">"Zhang San"</span>, <span class="hljs-number">90</span>)</span></span>;<br>    <span class="hljs-function">CStudent <span class="hljs-title">stud2</span><span class="hljs-params">(<span class="hljs-string">"Li Si"</span>, <span class="hljs-number">80</span>)</span></span>;<br>    stud<span class="hljs-number">1.</span><span class="hljs-built_in">Print</span>();<br>    stud<span class="hljs-number">2.</span><span class="hljs-built_in">Print</span>();<br>    cout &lt;&lt; <span class="hljs-string">"平均分为: "</span> &lt;&lt; CStudent::<span class="hljs-built_in">average</span>() &lt;&lt; endl;  <span class="hljs-comment">// 调用静态成员函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi">Zhang San <span class="hljs-function"><span class="hljs-keyword">Constructor</span> <span class="hljs-title">called</span>.</span><br><span class="hljs-function"><span class="hljs-title">Li</span> <span class="hljs-title">Si</span> <span class="hljs-title">Constructor</span> <span class="hljs-title">called</span>.</span><br><span class="hljs-function"><span class="hljs-title">Zhang</span> <span class="hljs-title">San</span>:</span> <span class="hljs-number">90</span><br>Li Si: <span class="hljs-number">80</span><br>平均分为: <span class="hljs-number">85</span><br>Li Si <span class="hljs-function"><span class="hljs-keyword">Destructor</span> <span class="hljs-title">called</span>.</span><br><span class="hljs-function"><span class="hljs-title">Zhang</span> <span class="hljs-title">San</span> <span class="hljs-title">Destructor</span> <span class="hljs-title">called</span>.</span><br></code></pre></td></tr></tbody></table></figure><h2 id="this指针">this指针</h2><ul><li>用途：当成员函数的<strong>参数名与成员变量名相同</strong>的时候，可以使用<code>this</code>来<strong>明确地引用成员变量</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Ponit&amp; <span class="hljs-title">setPoint</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>{<br>    <span class="hljs-keyword">this</span>-&gt;x=x;<br>    (*<span class="hljs-keyword">this</span>).y=y<span class="hljs-number">+8</span>;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><div class="note note-warning">            <ol><li>this指针是一个<strong>指向对象的指针</strong></li><li>this指针是一个隐含于成员函数中的对象指针</li><li>this指针是一个指向正在调用成员函数的对象的指针</li><li><strong>类的静态成员函数没有this指针</strong></li></ol>          </div><h2 id="常对象">常对象</h2><p>常对象用<code>const</code>进行修饰，常对象必须进行初始化，且不能被更新，常对象的声明如下（两种声明完全相同，没有任何区别）：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> 类名 对象名[(实参列表)]；<br>类名 <span class="hljs-type">const</span> 对象名[(实参列表)]；<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> Point <span class="hljs-title">P1</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-function">Point <span class="hljs-type">const</span> <span class="hljs-title">P2</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>以上定义了两个常对象P1、P2。在任何场合，对象P1、P2中的成员值不能进行修改。<br>常对象不能调用非const成员函数：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>{<span class="hljs-comment">//常成员函数</span><br>    <span class="hljs-keyword">return</span> x*y;<br>}<br></code></pre></td></tr></tbody></table></figure><p>如果一定要修改常对象中的数据成员，可将需要修改的数据成员声明为<code>mutable</code>，这样就可以用声明为<code>const</code>的成员函数来修改它的值了！</p><h2 id="友元类">友元类</h2><p>若我们想要一个不属于某个类的函数存取该类中的数据：</p><ol><li>将类中的数据成员均设置为<code>public</code></li><li><strong>在类内部声明</strong>这个函数为友元（friend），则这个函数可以访问该类的私有成员</li></ol><p>第一点有违OOP封装性的精神，显然第二种更好！</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {<br><span class="hljs-keyword">private</span>: <br>    string name;  <br>    <span class="hljs-type">int</span> age;      <br>    <span class="hljs-type">char</span> gender;  <br>    string idNumber; <br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(string, <span class="hljs-type">int</span>, <span class="hljs-type">char</span>, string);<br>    <span class="hljs-built_in">Person</span>(Person&amp;);<br>    ~<span class="hljs-built_in">Person</span>() {}<br>    <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 函数声明</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">(Person&amp; p)</span></span>;  <span class="hljs-comment">// 声明showInfo为类Person的友元函数</span><br>};<br><br>Person::<span class="hljs-built_in">Person</span>(string theName, <span class="hljs-type">int</span> theAge, <span class="hljs-type">char</span> theGender, string theIdNumber) {  <br>    name = theName;<br>    age = theAge;<br>    gender = theGender;<br>    idNumber = theIdNumber;  <br>}<br><br>Person::<span class="hljs-built_in">Person</span>(Person&amp; theObject) {<br>    name = theObject.name;<br>    age = theObject.age;  <br>    gender = theObject.gender;  <br>    idNumber = theObject.idNumber;  <br>}<br><br><span class="hljs-function">string <span class="hljs-title">Person::getName</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> name;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">(Person&amp; p)</span> </span>{  <span class="hljs-comment">// showInfo为普通函数，是类Person的友元函数</span><br>    cout &lt;&lt; <span class="hljs-string">"name: "</span> &lt;&lt; p.name &lt;&lt; endl;  <br>    cout &lt;&lt; <span class="hljs-string">"age: "</span> &lt;&lt; p.age &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"gender: "</span> &lt;&lt; p.gender &lt;&lt; endl;  <br>    cout &lt;&lt; <span class="hljs-string">"id number: "</span> &lt;&lt; p.idNumber &lt;&lt; endl; <br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">"张三"</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'m'</span>, <span class="hljs-string">"12345200006061111"</span>)</span></span>;  <span class="hljs-comment">// 建立对象p1</span><br>    <span class="hljs-built_in">showInfo</span>(p1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">name: 张三<br>age: <span class="hljs-number">12</span><br>gender: m<br>id number: <span class="hljs-number">12345200006061111</span><br></code></pre></td></tr></tbody></table></figure><h4 id="注意：">注意：</h4><div class="note note-warning">            <ul><li>友元函数是类外函数，友元函数不能直接访问类中的私有和保护成员，而<strong>需要通过对象参数进行访问</strong></li></ul>          </div><p>这个案例显然并没有那么好，我们可以将<code>showInfo</code>函数设计为类内一个普通的成员函数，这没有显示出友元函数的必要性，仅仅是对友元函数用法的一个初步介绍！</p><h3 id="友元函数是另一个类的成员函数">友元函数是另一个类的成员函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>;  <span class="hljs-comment">// 前向声明</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> {<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> Height;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> h) : <span class="hljs-built_in">Height</span>(h) {}  <span class="hljs-comment">// 使用初始化列表</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Volume</span><span class="hljs-params">(Rectangle&amp; r)</span></span>;     <span class="hljs-comment">// 只能声明，不能定义（因为Rectangle未完全定义）</span><br>};<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> {<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> Width, Length;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len) : <span class="hljs-built_in">Width</span>(w), <span class="hljs-built_in">Length</span>(len) {}  <span class="hljs-comment">// 初始化列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">int</span> <span class="hljs-title">Cuboid::Volume</span><span class="hljs-params">(Rectangle&amp; r)</span></span>;  <span class="hljs-comment">// 声明友元函数</span><br>};<br><br><span class="hljs-comment">// 必须在 Rectangle 定义之后才能定义 Volume</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Cuboid::Volume</span><span class="hljs-params">(Rectangle&amp; r)</span> </span>{<br>    <span class="hljs-keyword">return</span> r.Length * r.Width * Height;  <span class="hljs-comment">// 访问 Rectangle 的私有成员</span><br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-function">Rectangle <span class="hljs-title">R</span><span class="hljs-params">(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>)</span></span>;<br>    <span class="hljs-function">Cuboid <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">"长方体的体积为："</span> &lt;&lt; C.<span class="hljs-built_in">Volume</span>(R) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">长方体的体积为：960<br></code></pre></td></tr></tbody></table></figure><p>这里将类<code>Cuboid</code>的成员函数<code>Volume()</code>声明为类<code>Rectangle</code>的友元函数，这样在<code>Volume()</code>中就可以使用Rectangle中的私有数据成员<code>Width</code>、<code>Length</code>。</p><h4 id="注释：">注释：</h4><div class="note note-warning">            <p>程序第三行对<code>Rectangle</code>的<strong>提前声明引用</strong>，只包含类名，不包含类体。提前声明的原因是：在类<code>Cuboid</code>中调用<code>Volume()</code>函数时，需要使用类<code>Rectangle</code>中的数据成员<code>Length</code>和<code>Width</code>，但是类<code>Rectangle</code>还没有定义。那如果将<code>Rectangle</code>的定义提到前面呢？同样是不可以的，因为在类<code>Rectangle</code>中又包含了<code>Cuboid</code>的成员！但是不能因为提前声明，而去定义一个对象！</p>          </div><p>例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>;<span class="hljs-comment">//提前引用声明</span><br>Rectangle r1;<span class="hljs-comment">//紧接着定义一个Rectangle对象，这是不允许的！</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>{...};<br></code></pre></td></tr></tbody></table></figure><h3 id="友元类-v2">友元类</h3><p>将一个类声明为另一个类的友元：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>{<br>    ...<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;<span class="hljs-comment">//类B声明为当前类A的友元类</span><br>    ...<br>};<br></code></pre></td></tr></tbody></table></figure><p>此时，类B中的所有成员函数都是当前类A的友元函数，因此类B中的<strong>所有成员函数</strong>都可以访问当前类A的<code>private</code>成员或<code>protected</code>成员</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>; <span class="hljs-comment">// 前向声明</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> {<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> Height;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">int</span> h) {<br>        Height = h;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Volume</span><span class="hljs-params">(Rectangle&amp; r)</span></span>;<br>};<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> {<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> Width, Length;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> len) {<br>        Width = w;<br>        Length = len;  <span class="hljs-comment">// 添加了分号</span><br>    }<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span>; <span class="hljs-comment">// 声明类Cuboid是类Rectangle的友元类</span><br>};<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Cuboid::Volume</span><span class="hljs-params">(Rectangle&amp; r)</span> </span>{<br>    <span class="hljs-keyword">return</span> r.Length * r.Width * Height;  <span class="hljs-comment">// 正确的体积计算公式</span><br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-function">Rectangle <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>)</span></span>;<br>    <span class="hljs-function">Cuboid <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">"长方体的体积为："</span> &lt;&lt; C.<span class="hljs-built_in">Volume</span>(r) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">长方体的体积为：960<br></code></pre></td></tr></tbody></table></figure><h3 id="友元关系的限制：">友元关系的限制：</h3><div class="note note-warning">            <ol><li>友元关系<strong>不具有传递性</strong>，“附庸的附庸不是我的附庸”，比如类A是类B的友元类，类B是类C的友元类，类C不是类A的友元类。</li><li>友元关系<strong>不具有交换性</strong>，比如类A是类B的友元类，类B不一定是类A的友元</li><li>友元关系是<strong>不能继承的</strong>，比如类A是类B的友元类，类C继承类B，类C不是类A的友元类</li></ol>          </div><p>封面来源：<a href="https://www.youtube.com/watch?v=m_MQYyJpIjg">Fundamental Concepts of Object Oriented Programming</a></p><h2 id="References">References</h2><p>以上大部分代码均取自《C++程序设计基础教程》</p>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Operator Overloading in C++</title>
    <link href="/2025/07/19/CPP/Operator-Overloading-in-C++/"/>
    <url>/2025/07/19/CPP/Operator-Overloading-in-C++/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Four Pillars of OOP in C++</title>
    <link href="/2025/07/17/CPP/The-Four-Pillars-of-OOP-in-C++/"/>
    <url>/2025/07/17/CPP/The-Four-Pillars-of-OOP-in-C++/</url>
    
    <content type="html"><![CDATA[<h2 id="抽象性-Abstract">抽象性 (Abstract)</h2><p>提取事物的本质特征，找出共性，忽略非本质特征！</p><ul><li><h3 id="数据抽象">数据抽象</h3></li></ul><p>抽象出对象的属性和状态的描述。（变量）</p><ul><li><h3 id="行为抽象">行为抽象</h3></li></ul><p>抽象出对象行为的描述。（成员函数）</p><h2 id="封装性-Encapsulation">封装性 (Encapsulation)</h2><ol><li><p>设计者将对象的全部属性和行为封装在对象内部，对象的属性值（变量）只能由这个对象的行为（成员函数）来读取和修改！</p></li><li><p>使用者无需关心内部结构，只需关心能做什么、如何使用！</p></li></ol><h3 id="成员函数的定义：">成员函数的定义：</h3><ul><li><p>关键词<code>private</code>、<code>protected</code>、<code>public</code>在类中使用的先后次序无关紧要，且<strong>可以多次使用</strong>。</p></li><li><p>因为类是一种数据类型，系统<strong>不会为其分配内存空间</strong>，所以在定义类中的数据成员时，不能对其进行初始化，也不能指定其存储类型。对于类内<strong>非static数据成员的初始化</strong>通常<strong>使用构造函数</strong>进行。</p></li></ul><ol><li>在<strong>类内</strong>定义成员函数</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cgoods</span>{<span class="hljs-comment">//商品类</span><br>     <br>     <span class="hljs-keyword">private</span>:<br>        string ID; <span class="hljs-comment">//商品编号</span><br>        string name; <span class="hljs-comment">//商品名称</span><br>        <span class="hljs-type">double</span> Purchasingprice; <span class="hljs-comment">//进货价格</span><br>        <span class="hljs-type">double</span> Sellingprice; <span class="hljs-comment">//售出价格</span><br>        <span class="hljs-type">int</span> SellCount; <span class="hljs-comment">//售出数量</span><br>        <span class="hljs-type">static</span> <span class="hljs-type">double</span> Profit; <span class="hljs-comment">//总利润</span><br>     <br>     <span class="hljs-keyword">protected</span>:<span class="hljs-comment">//无</span><br>     <br>     <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">cgoods</span>(string id, string name, <span class="hljs-type">double</span> purchasingprice){<span class="hljs-comment">//构造函数</span><br>        ID=id;<br>        Name=name;<br>        }<br><br>        <span class="hljs-built_in">cgoods</span>(string id, string name, <span class="hljs-type">double</span> purchasingprice){<span class="hljs-comment">//构造函数</span><br>        ID=id;<br>        Name=name;<br>        Purchasingprice=purchasingprice;<br>        }<br><br>        ~<span class="hljs-built_in">cgoods</span>(){<span class="hljs-comment">//析构函数</span><br>        } <br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetPurchasingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> purchasingprice)</span></span>{<span class="hljs-comment">//设置进货价格</span><br>        Purchasingprice=purchasingprice;<br>        }<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetSellingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> sellingprice)</span></span>{<span class="hljs-comment">//设置出货价格</span><br>        Sellingprice=sellingprice;<br>        }<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>{<br>        cout&lt;&lt;<span class="hljs-string">"编号"</span>&lt;&lt;ID&lt;&lt;endl;<br>        cout&lt;&lt;<span class="hljs-string">"名称"</span>&lt;&lt;Name&lt;&lt;endl;<br>        cout&lt;&lt;<span class="hljs-string">"进货价格"</span>&lt;&lt;Purchasingprice&lt;&lt;endl;<br>        cout&lt;&lt;<span class="hljs-string">"出货价格"</span>&lt;&lt;Sellingprice&lt;&lt;endl;<br>        }<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>在<strong>类外</strong>定义成员函数</li></ol><p>成员函数<strong>在类体内进行声明</strong>，而将成员函数的<strong>定义放在类外</strong>，相比于类内定义成员函数，成员函数名前要多<strong>加上“类名::”</strong>,“::”是作用于运算符，以说明这个函数是属于那类的成员函数，否则编译器就会认为该函数是一个普通函数。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">返回类型 类名::成员函数名(参数说明){<br>     函数体<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cgoods</span>{<span class="hljs-comment">//商品类</span><br>     <br>     <span class="hljs-keyword">private</span>:<br>        string ID; <span class="hljs-comment">//商品编号</span><br>        string name; <span class="hljs-comment">//商品名称</span><br>        <span class="hljs-type">double</span> Purchasingprice; <span class="hljs-comment">//进货价格</span><br>        <span class="hljs-type">double</span> Sellingprice; <span class="hljs-comment">//售出价格</span><br>        <span class="hljs-type">int</span> SellCount; <span class="hljs-comment">//售出数量</span><br>        <span class="hljs-type">static</span> <span class="hljs-type">double</span> Profit; <span class="hljs-comment">//总利润</span><br>     <br>     <span class="hljs-keyword">protected</span>:<span class="hljs-comment">//无</span><br>     <br>     <span class="hljs-keyword">public</span>:<br>        <br>        <span class="hljs-built_in">cgoods</span>(string id, string name, <span class="hljs-type">double</span> purchasingprice);<span class="hljs-comment">//构造函数</span><br>        <br>        <span class="hljs-built_in">cgoods</span>(string id, string name, <span class="hljs-type">double</span> purchasingprice);<span class="hljs-comment">//构造函数</span><br>        <br>        ~<span class="hljs-built_in">cgoods</span>();<span class="hljs-comment">//析构函数</span><br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetPurchasingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> purchasingprice)</span></span>;<span class="hljs-comment">//设置进货价格</span><br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetSellingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> sellingprice)</span></span>;<span class="hljs-comment">//设置出货价格</span><br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//显示商品信息</span><br>}<br><br>        cgoods::<span class="hljs-built_in">cgoods</span>(string id, string name){<span class="hljs-comment">//构造函数</span><br>        ID=id;<br>        Name=name;<br>        }<br><br>        cgoods::<span class="hljs-built_in">cgoods</span>(string id, string name, <span class="hljs-type">double</span> purchasingprice){<span class="hljs-comment">//构造函数</span><br>        ID=id;<br>        Name=name;<br>        Purchasingprice=purchasingprice;<br>        }<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cgoods::SetPurchasingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> purchasingprice)</span></span>{<span class="hljs-comment">//设置进货价格</span><br>        Purchasingprice=purchasingprice;<br>        }<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cgoods::SetSellingprice</span><span class="hljs-params">(<span class="hljs-type">double</span> sellingprice)</span></span>{<span class="hljs-comment">//设置出货价格</span><br>        Sellingprice=sellingprice;<br>        }<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cgoods::display</span><span class="hljs-params">()</span></span>{<span class="hljs-comment">//显示商品信息</span><br>        cout&lt;&lt;<span class="hljs-string">"编号"</span>&lt;&lt;ID&lt;&lt;endl;<br>        cout&lt;&lt;<span class="hljs-string">"名称"</span>&lt;&lt;Name&lt;&lt;endl;<br>        cout&lt;&lt;<span class="hljs-string">"进货价格"</span>&lt;&lt;Purchasingprice&lt;&lt;endl;<br>        cout&lt;&lt;<span class="hljs-string">"出货价格"</span>&lt;&lt;Sellingprice&lt;&lt;endl;<br>        }<br></code></pre></td></tr></tbody></table></figure><h2 id="继承性-Inherit">继承性 (Inherit)</h2><p>派生类既能有自己新定义的属性和行为，又能够继承父类的所有属性和行为，无需重复定义，这种允许和鼓励类的重用的继承设计对于提高软件开发效率有着重要意义！</p><h2 id="多态性-Polymorphism">多态性 (Polymorphism)</h2><p>多态性使得可以通过相同的调用方式来调用这些具有不同功能的同名函数，这样同一个属性在父类和派生类中具有不同的语义！</p>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>updating</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Life-musings</title>
    <link href="/2025/07/14/other/life-musings/"/>
    <url>/2025/07/14/other/life-musings/</url>
    
    <content type="html"><![CDATA[<h1>Life-musings（精进日记）</h1><p>记录每天的<strong>学习内容</strong> &amp;&amp; 博客未来<strong>更新方向</strong>！<br>保持更新的节奏！</p><h2 id="2025">2025</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-686cafe3" role="button" aria-expanded="false" aria-controls="collapse-686cafe3">        <div class="fold-arrow">▶</div> Summer Vacation      </div>      <div class="fold-collapse collapse" id="collapse-686cafe3">        <div class="fold-content">          <h4 id="7-14">7.14</h4><p>梦开始的地方！<br><strong>cool！</strong></p><h4 id="7-16">7.16</h4><p>Turtle in Python 大win特win！</p><h4 id="7-17">7.17</h4><p>昨晚备课到两点…<br>逐渐适应老师的身份！<br>制作课件的过程中也顺便二次学习Python语法！</p><h4 id="7-18">7.18</h4><p>成功给 blog 添加 category 功能！</p><h4 id="7-22">7.22</h4><p>上知网阅读相关论文，<strong>着手准备26大创pre</strong>！<br>在roboflow上找到几个感觉适配的<strong>数据集</strong>！<br>但是还是感觉有些缺失，需要自己想办法解决…</p><h4 id="7-23">7.23</h4><p>参考数据结构教材，重新梳理了几种常见的<strong>排序算法的核心思路</strong>！<br>自己敲了敲各种排序算法的代码，interesting！</p><h4 id="7-24">7.24</h4><p>试图给博客添加vercel进行<strong>自动化部署</strong>，<br>似乎不是很成功 😢</p><h4 id="7-25">7.25</h4><p>UC Berkeley的CS61A！</p><h4 id="7-26">7.26</h4><p>The Missing Semester of Your CS Education！<br><code>shell</code>篇，受益匪浅！</p><h4 id="7-27">7.27</h4><p>先是赛车，再是足球！忙活一天！<br>回来总算是吧<code>shell</code>篇的博客写完了！<br>还顺带配置了博客 emoji 😄<br>以后终于不再是文文并茂了😢</p><h4 id="7-28">7.28</h4><p>继续[missing semster]，学完了<code>vim</code>篇！</p><h4 id="7-29">7.29</h4><p>完善<code>Git</code>篇！<br>捣鼓我的 mac！</p><h4 id="7-30">7.30</h4><p>终于在 macbook 上成功配置博客环境！<br>单人多设备假装自己是多人协作开发大项目😄</p><h4 id="7-31">7.31</h4><p>mac 中尝试在<code>vim</code>写、编译运行<code>c++</code>！<br><strong>skilled programmer</strong> 既视感😄</p><h4 id="8-1">8.1</h4><p>入门<strong>dynamic programming</strong>！<br>祝好运😉</p><h4 id="8-7">8.7</h4><p><strong>LaTex</strong>简单入门，优雅，太优雅了！😊<br>果然学习才是<strong>祛魅</strong>的最好方式！<br><strong>overleaf</strong>在线共享编辑，真是个好东西！😄</p><h4 id="8-8">8.8</h4><p>LaTex 太灾难了😢<br>还是更喜欢<strong>WYSWYG</strong>😊</p><h4 id="8-9">8.9</h4><p>LaTex 还得是在<strong>实战中学习</strong>！<br>但感觉花大量时间学习性价比不太高😢<br>AI辅助 LaTex就很舒服😀</p><h4 id="8-10">8.10</h4><p>终于整完了，呼~~<br>要投身算法学习哩！<br>不能再依靠 life-musings 栏目苟延残喘更新速度了😡</p><h4 id="8-11">8.11</h4><p>summer vacation assignment😡</p><h4 id="8-13">8.13</h4><p>有点绷不住了😠<br>搞了一上午才将<strong>图床</strong>弄好<br>然后下午进行<strong>图片的迁移</strong>和博客照片中路径的修改~<br>对整个博客内容<strong>缝缝补补</strong>（其实是女娲补天😀）<br>将原来<code>生活随想录</code>栏目进行了拆分：</p><ul><li>精进日记 ➡️➡️ 偏学业</li><li>生活杂谈 ➡️➡️ 偏生活</li></ul><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main//article/life-musings/20250813.png" alt="2025年8月13日23点10分Github截图"></p><h4 id="8-14">8.14</h4><p>进行更新HTML&amp;&amp;CSS的部分</p><h4 id="8-16">8.16</h4><p>刷知乎看到一篇很好的帖子：<br><a href="https://www.zhihu.com/question/11379810074">大一计算机新生怎么合理利用github？ - 知乎</a><br>后续努力方向！</p><p>完善Github主页readme文件<br>尝试使用开源代码丰富界面</p><p>再三尝试<strong>Vercel部署</strong>失败😢<br>能不能让我赢一次😢</p><h4 id="8-17">8.17</h4><p>完善 HTML &amp;&amp; CSS 表单部分<br>yysy 感觉越写越多，CSS都要单开一栏目了😀<br>学习《Github从入门到实践》<br>丰富有关<code>Git</code>项目管理的笔记内容😄</p><h4 id="8-18">8.18</h4><p>新开章节CSS！</p><h4 id="8-19">8.19</h4><p>第一次尝试<strong>PR</strong>！<br>学习<code>flex</code>布局！</p><h4 id="8-20">8.20</h4><p>无所事事！<br>这看看那看看的<br>一会儿看看 github 一会儿又去 leetcode<br>还没刷上题又去看 data analyse😢</p><h4 id="8-21">8.21</h4><p>经提醒，发现CSDN博客上的图片转存失败，紧急进行修复！<br>顺便写了一篇关于PicGo插件配置Github图床的博客！<br>并计划回顾往期博客，完善格式，修复语病！<br>使用<strong>pandoc实行文档转换</strong>输出数学公式！<br><img src="https://github.com/Richard110206/Blog-image/blob/main/article/Sorting-Algorithm/mathematical.png?raw=true" alt="成功给博客配置数学公式结算画面"></p><h4 id="8-22">8.22</h4><p>新语法Get！给hexo增加<strong>折叠块</strong>的内容！<br>经常在YouTube上刷到动画风质感很好的封面：<br><img src="https://github.com/Richard110206/Blog-image/blob/main/article/life-musings/Ghibli.jpeg?raw=true" alt="Ghibli画风"><br>今天才知道原来是<strong>吉卜力工作室的宫崎骏画风</strong>！<br>（不知道为啥在国内不是很火🔥 难道是版权问题🫤）<br>其实一开始看着就有点像AI改的，但是据我浅薄的了解：<br>这种文字程度的又不太像AI生成的（或许是我没用过更好的大模型吧）<br>用豆包试了试,感觉还不错,但跟想象略有出入😢</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs textinfo">以这张图为基础，转化为吉卜力风格插画。采用吉卜力经典的高饱和度且自然和谐的色彩体系，像宫崎骏作品中常见的清新绿、湛蓝天空色等。画面笔触要细腻且有手绘质感，就如同吉卜力动画中一帧帧精心绘制的场景。保留所有的人物、建筑物等，营造出吉卜力式的奇幻氛围 ，光影柔和，突出主体，整体呈现出温暖治愈的感觉 。<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs textinfo">将此图重绘为吉卜力风格。保留原图主体动作与大致构图，色调调整为吉卜力偏好的明快且温馨的色调，比如用柔和的暖黄色光模拟夕阳洒下的效果。背景细节按照吉卜力风格丰富化，若有建筑，添加木质纹理与精致的装饰；若有自然场景，细化植物的形态与层次。线条干净流畅，具有明显的手绘痕迹，使整幅图宛如出自吉卜力工作室 。<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs textinfo">参照此图，创作吉卜力风格画面。保留原图核心元素，将画面氛围塑造为吉卜力式的宁静而充满生机。色彩以清新淡雅为主，偶尔用鲜艳色彩作为点缀突出重点。绘制手法上，以干净利落的线条勾勒轮廓，再用细腻的色彩填充，展现出吉卜力动画那种精致的画面效果。光影处理成既有明亮的主光源，又有柔和的环境光，让整个场景看起来自然且生动 。保留人物物体的一致性。<br></code></pre></td></tr></tbody></table></figure><p>下午开新坑！回顾数据结构！</p><p>华数杯“优秀奖”，😢呜呜呜…<br>第一次在博客中引入pdf文件！</p><h4 id="8-23">8.23</h4><p>继续复习栈和队列，未来会尝试将<strong>每种数据结构都实现一遍</strong>！</p><p>新博客栏目的<strong>宫崎骏画风封面</strong>感觉还不错！<br>就是显示文字依然乱码，十分费劲！<br>那大抵是要<strong>开ChatGPT会员</strong>罢！</p><p>密码的，吃完饭回来电脑竟然<strong>死机了</strong>😢<br>大概是开太多程序又长时间没有关机的缘故（多学学人家Mac 几周不关机也没事）<br>然后一通乱按又把键盘弄失灵了😢<br>弄俩小时才发现是误触 要<code>Fn</code>+<code>T</code><strong>切换到有线模式</strong>才行 太折磨了！</p><h4 id="8-24">8.24</h4><p>开刷leetcode！<br>有种高中写圆锥曲线和导数大题的感觉😀<br>又折磨又兴奋 又菜又爱学没跑了😢</p><h4 id="8-25">8.25</h4><p>c++修修补补<br>学习lambda表达式和auto用法</p><p>ChatGPT果然还是更胜一筹<br>“<strong>贵的东西的缺点只有贵</strong>”</p><h4 id="8-26">8.26</h4><p>Hashtable Review!</p><p><strong>Sora绘图</strong>效果令人惊喜，可惜每日三次😢</p><p><img src="https://github.com/Richard110206/Blog-image/blob/main/article/life-musings/ChatGPT-Warning.png?raw=true" alt="ChatGPT Warning!"><br>猜的很对了，这下看懂了😀</p><p><strong>Update the published blog post!</strong></p><ul><li>为了<strong>方便阅读</strong>，给<strong>OJ题目设置了折叠块</strong></li><li>为了<strong>格式重点突出</strong>，给问题解答、分析板块增加不同颜色的<strong>标签note插件</strong></li></ul><h4 id="8-27">8.27</h4><p>debug——<strong>ssh</strong>突然网络连接失败（CSDN✅）</p><p><strong>Sora绘图</strong>不知道为啥又<strong>无限制</strong>了😀<br>吸取之前被限制的教训，这次表达相当<strong>委婉</strong><br><strong>prompt</strong>详细一点，生图风格就相当<strong>awesome</strong>！</p><h4 id="8-28">8.28</h4><p>学习<strong>结构化绑定</strong></p><p>依然Leetcode刷题，查漏补缺！</p><h4 id="8-29">8.29</h4><p><strong>Leetcode</strong>！杨辉三角+优化<br>妙实在是妙！</p><p>将博客切换<code>en</code>英文版面</p><h4 id="8-31">8.31</h4><p>双指针依然不能稳定AC嘛~</p><p>  8月暑假悄悄从指间溜走了~ 回顾整个暑假，从刚放假看国外公开课，学习一些简单的Tools，比如Github、Git、 Vim、Shell等，充实基础知识，作为科班生的底气了；旅游归来复习几个基本的数据结构，开刷leetcode，同时更新<code>Leetcode Mistake Collection</code>！时隔一年再次享受到到刷题的乐趣，无情的算法题会将你的思维+代码的bug暴露无遗，但绿意盎然的“通过”则会将你从苦海中拯救！真是痛并快乐着！</p><p>开学了后续大概会更新：</p><ul><li>部分学科的学习笔记（概率论和大物、计组等）</li><li>简单的cpp项目</li><li>每天一道leetcode</li><li>全栈</li><li>一些基本工具的巩固</li><li>入门Linux</li></ul><p>我们未来见！👋</p>        </div>      </div>    </div><ul><li>9.1<ul><li>数电：概论，智能系统=算法+软件+<strong>硬件</strong>，复习信概<strong>进制转换</strong>等内容</li><li>概率论：概论，基本<strong>集合符号使用</strong>（与离散数学相似）</li><li>网球：概论，学校体育建设史（网球）</li><li>JavaScript：以 cpp 基础速通基本语法</li></ul></li><li>9.2<ul><li>大英：BBC 精听▶️▶️饮食改善</li><li>大物：理想气体状态方程</li><li>毛中特：“教义是不谈条件的 方法是谈条件的”</li><li>数学文化：24春晚魔术▶️▶️约瑟夫环</li><li>博客：完善Shell篇博客，增加示例代码</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>updating</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Simple Git Project Management Guide</title>
    <link href="/2025/07/13/Tutorial/Simple-Git-Project-Management-Guide/"/>
    <url>/2025/07/13/Tutorial/Simple-Git-Project-Management-Guide/</url>
    
    <content type="html"><![CDATA[<p><code>Git</code> 是一个分布式版本控制系统(<code>Vision Control Systems</code>)，它允许多个人在同一项目上工作。通过<code> Git</code>，我们可以记录项目的每一次更改，并且可以将代码推送到 <code>GitHub</code>，方便以后查看和分享（多人的协作开发）。以下是<code>Git</code>进行代码版本管理的基本操作：</p><h2 id="基本操作">基本操作</h2><h3 id="1、在本地初始化git仓库">1、在本地初始化git仓库</h3><p>打开命令行工具（<code>Windows</code> 用户可以使用 <code>PowerShell</code>，<code>Mac</code> 和 <code>Linux</code> 用户可以使用终端<code>terminal</code>），确保你进入了项目文件夹（命令：<code>cd path</code>），然后输入以下命令来初始化 <code>Git</code> 仓库：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></tbody></table></figure><p><strong>解释：</strong><code>git init</code>会在当前文件夹中创建一个新的 Git 仓库（<code>.git</code>目录），这个目录里存储着管理当前目录内容所需要的仓库数据。现在，你的项目文件夹已经开始被 Git 追踪，之后的每一次文件修改都可以通过 Git 来记录。</p><ul><li>使用<code>git status</code>命令可以查看当前<strong>仓库的状态</strong>，包括哪些文件被修改了，哪些文件被添加到暂存区了，哪些文件还没有被跟踪等。</li><li></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status<br><span class="hljs-comment"># on branch master</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Initial commit</span><br><span class="hljs-comment">#</span><br>nothing to commit (creat/copy files and use <span class="hljs-string">"git add"</span> to track)<br></code></pre></td></tr></tbody></table></figure><h3 id="2、添加文件到暂存区">2、添加文件到暂存区</h3><p>暂存区是一个准备提交的区域，只有在将文件添加到暂存区后，才能将它们提交到本地仓库中。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add<br></code></pre></td></tr></tbody></table></figure><p><strong>解释</strong>:<code>git add.</code>会将当前文件夹下的所有文件添加到暂存区。这意味着 Git 现在知道这些文件已经被修改，并准备将它们保存到版本历史中。</p><h3 id="3、提交文件到本地仓库">3、提交文件到本地仓库</h3><p>暂存区中的文件提交到本地仓库。输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">"feat: "</span><br></code></pre></td></tr></tbody></table></figure><p><strong>解释：</strong><code>git commit -m</code> 命令用于提交更改到本地仓库，并且 <code>-m</code> 参数后面跟着的是你为此次提交添加的描述信息，也就是提交信息（<code>commit message</code>）。提交信息是对此次提交所做更改的简短描述，它帮助团队成员或其他查看项目历史的人理解每次提交的目的或内容。</p><ul><li><code>git log</code>可以查看以往仓库中<strong>提交的日志</strong>，包括什么人在什么时候进行了提交或合并，以及操作前后有什么差别。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">richard@RicharddeMacBook-Air leetcode % git <span class="hljs-built_in">log</span><br>commit 03748e1b5410364249cb10d78ae72f443682dc24 (HEAD -&gt; main)<br>Author: Richard110206 &lt;lqx3222482537@qq.com&gt;<br>Date:   Sun Aug 17 23:28:22 2025 +0800<br><br>    First Commit<br></code></pre></td></tr></tbody></table></figure><ul><li><code>git diff</code>可以查看<strong>当前工作目录和暂存区之间的差异</strong>。“+”表示添加的行，"-“表示删除的行，”~"表示修改的行。</li></ul><p>这些是特定的标签或标识符来说明提交的类型：</p><ul><li><code>feat</code>: 表示<strong>新功能的增加</strong>（<code>feature</code>）</li><li><code>fix</code>: 表示<strong>修复了一个<code>bug</code></strong></li><li><code>docs</code>: 表示<strong>文档更新</strong></li><li><code>refactor</code>: 表示<strong>代码重构</strong>（既不是修复bug也不是添加新功能）</li><li><code>style</code>: <strong>改进代码格式但不影响逻辑</strong></li><li><code>test</code>: <strong>添加或修正测试用例</strong></li></ul><h3 id="4-创建远程仓库">4. 创建远程仓库</h3><p>前往 <code>GitHub</code>，创建一个新的远程仓库，并命名，注意：不要勾选“初始化仓库”，因为我们已经在本地初始化了仓库。</p><h3 id="5-关联本地仓库">5. 关联本地仓库</h3><p>在命令行中，输入以下命令来将本地仓库和 GitHub 的远程仓库关联起来：</p><ul><li>若是通过<code>SSH</code>方式连接远程仓库：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote add origin git@github.com:用户名/仓库名.git<br></code></pre></td></tr></tbody></table></figure><ul><li>若是通过<code>HTTPS</code>方式连接远程仓库：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote set-url origin https://令牌@github.com/用户名/远程仓库名`<br></code></pre></td></tr></tbody></table></figure><h3 id="6、推送代码到-GitHub">6、推送代码到 GitHub</h3><p>最后一步，我们将本地仓库中的更改推送到 <code>GitHub</code> 上的远程仓库：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin main<br></code></pre></td></tr></tbody></table></figure><p><strong>解释：</strong><code>git push</code> 命令会将本地仓库中的代码上传到 <code>GitHub</code> 的远程仓库。<code>-u</code> 参数会将本地的 <code>main</code> 分支与远程仓库的 <code>main</code> 分支关联起来，确保以后每次推送都不需要重复指定分支。</p><h2 id="从远程仓库获取">从远程仓库获取</h2><p><code>git clone</code>可以获取远程仓库的代码到本地</p><ul><li>若是通过<code>SSH</code>方式连接远程仓库：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:用户名/仓库名.git<br></code></pre></td></tr></tbody></table></figure><ul><li>若是通过<code>HTTPS</code>方式连接远程仓库：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/用户名/仓库名.git<br></code></pre></td></tr></tbody></table></figure><p>当前本地仓库的<code>main</code>分支和<code>Github</code>仓库的<code>main</code>分支在内容上是完全相同的。</p><p><code>git pull</code>可以从远程仓库分支获取最新的代码到本地，这样只要在本地进行提交再<code>push</code>给远程仓库，就可以与其他开发者同时在同一个分支中进行作业，而如果两个人同时修改了同意部分的源代码，<code>push</code>时就很容易<strong>发生冲突</strong>，因此建议<strong>更频繁的进行</strong><code>push</code>和<code>pull</code>操作！</p><table><thead><tr><th>操作</th><th><code>git clone</code></th><th><code>git pull</code></th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>首次下载远程仓库到本地</td><td>更新本地已有代码</td></tr><tr><td><strong>执行前提</strong></td><td>本地没有仓库时使用</td><td>必须在已有<code>Git</code>仓库的目录内执行</td></tr><tr><td><strong>操作内容</strong></td><td>下载完整仓库、自动创建远程跟踪分支</td><td>获取远程最新变更<code>git fetch</code><br> 自动合并到当前分支<code>git merge</code></td></tr></tbody></table><p><img src="https://xflops.sjtu.edu.cn/hpc-start-guide/primer/attachments/20241106195404.png" alt="关键操作图解"></p><h3 id="快照">快照</h3><p><code>VCS</code> 通过一系列快照跟踪文件夹及其内容的更改，其中每个快照都封装了顶级目录中文件/文件夹的完整状态，其还维护元数据，例如每个快照的创建者、与每个快照相关的消息等等。</p><p><code>Git</code> 将某个顶级目录中文件和文件夹集合的历史记录建模为一系列快照。文件/文件夹的树模型：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;root&gt; (tree)<br>|<br>+- foo (tree)<br>|  |<br>|  + bar.txt (blob, contents = <span class="hljs-string">"hello world"</span>)<br>|<br>+- baz.txt (blob, contents = <span class="hljs-string">"git is wonderful"</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="关联快照">关联快照</h3><div class="note note-warning">            <p>不知你是否有过疑惑。如果我和我的伙伴并行共同完成一个项目的两个特性应该如何处理？是将他的那部分完成后让我在复制到我的版本上吗？显然那样做太过麻烦！</p>          </div><p>在<code>Git</code>中，历史记录是快照的<strong>有向无环图</strong> (<code>DAG</code>)。这意味着<code>Git </code>中的每个快照都指向一组“父级”，即它之前的快照。它是一组父级，而不是单个父级（线性历史记录中的情况），因为快照可能源自多个父级，例如，由于合并（合并）两个并行的开发分支。<code>Git</code> 将这些快照称为“提交”。可视化提交历史记录可能如下所示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">o &lt;-- o &lt;-- o &lt;-- o<br>            ^<br>             \<br>              --- o &lt;-- o<br></code></pre></td></tr></tbody></table></figure><p><code> o</code>s代表单个提交（快照），理解为提交的文件（夹）</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">o &lt;-- o &lt;-- o &lt;-- o &lt;---- o<br>           ^            /<br>            \          v<br>             --- o &lt;-- o<br></code></pre></td></tr></tbody></table></figure><p>这里意味着并行开发项目的两个功能，并进行合并，创建了一个包含两个功能的快照，<code>Git</code>会自行合并处理两个快照，若出现冲突无法解决时，则需要人工进行调整！</p><ul><li><code>git branch</code>可以将分支名列表显示，同时可以确认当前所在的分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch<br>* main<br></code></pre></td></tr></tbody></table></figure><p>分支<code>main</code>左上角带有星号<code>*</code>表示这是我们当前所在的分支，也就是说我们正在<code>main</code>分支下进行开发，同时没有其他分支名，表示本地仓库只存在main一个分支。（以往<code>Git</code>默认分支是<code>master</code>，但现在改为了<code>main</code>）</p><ul><li><code>git checkout -b</code>创建并切换到新的分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout -b feature-A<br></code></pre></td></tr></tbody></table></figure><p>可以创建并切换到新的分支<code>feature-A</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch feature-A<br>$ git checkout feature-A<br></code></pre></td></tr></tbody></table></figure><p>实际上，连续执行以上两条命令也能收到相同的的效果。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch<br>* feature-A<br>  main<br></code></pre></td></tr></tbody></table></figure><p>这时再来查看我们的分支，就会发现我们正处在<code>feature-A</code>分支下，但我们在正常开发、执行<code>git add</code>命令并进行<code>commit</code>时，代码就会提交至<code>feature-A</code>分支，我们称为“培育分支”，这样我们就能在不相互影响的情况下同时进行多个功能的开发！</p><ul><li><code>git merge</code>可以将分支合并，如上文<code>feature-A</code>是典型的特性分支，能集中实现单一特性，且除此之外不进行任何作业，在日常开发中往往会创建数个特性分支，同时在保留一个可以随时发布软件的稳定分支。通常使用<code>main</code>作为主干分支（也就是特性分支的原点和合并的终点）。<br>首先切换到<code>main</code>分支：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout main<br></code></pre></td></tr></tbody></table></figure><p>然后合并分支，为了在历史记录中明确记录下本次分支合并，我们需要创建合并并提交。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git merge --no-ff feature-A<br></code></pre></td></tr></tbody></table></figure><ul><li><code>git log --graph</code>以图表形式查看分支合并历史</li><li><code>git reset</code>回溯历史版本，我们只要提供目标时间点的哈希值，就可以完全恢复至稿时间点的状态。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard &lt;<span class="hljs-built_in">hash</span>&gt;<br></code></pre></td></tr></tbody></table></figure><div class="note note-warning">            <p>如果我上线测试时突然发现了一个<code>bug</code>，而我不知道他是他是何时产生的应该怎么办呢？</p>          </div><p><code>Git</code>也会提供相应的二分历史记录查找！</p><h2 id="总结">总结</h2><p>至此，你学会了如何通过 <code>Git</code> 管理项目的版本历史，最终将项目代码推送到 <code>GitHub</code>。整个过程包括了从初始化仓库、添加文件、提交文件到推送到远程仓库的完整步骤。通过这些操作，你便已经具备了基本的版本控制能力。</p><p>封面来源：<a href="https://www.youtube.com/watch?v=hwP7WQkmECE">Git Explained in 100 Seconds</a></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo,Unleash Your Blogging Magic</title>
    <link href="/2025/07/12/Tutorial/Hexo-Hacks-Unleash-Your-Blogging-Magic/"/>
    <url>/2025/07/12/Tutorial/Hexo-Hacks-Unleash-Your-Blogging-Magic/</url>
    
    <content type="html"><![CDATA[<h2 id="一、玩转Hexo">一、玩转<code>Hexo</code></h2><p>不同主题的Hexo主题博客，大致特点如下：</p><table><thead><tr><th>主题</th><th>特点</th></tr></thead><tbody><tr><td><strong>Fluid</strong></td><td>加载速度快，有简单的动态效果，移动端适配佳</td></tr><tr><td><strong>Butterfly</strong></td><td>功能全面，社区活跃，高度可定制</td></tr><tr><td><strong>Landscape</strong></td><td>默认主题，轻量级，简洁易上手（有较多限制）</td></tr></tbody></table><p>博主尝试了这几种后对<code>fluid</code>追一见钟情，遂使用此主题。</p><h3 id="（一）更换主题">（一）更换主题</h3><p><strong>1. 安装 <code>Fluid</code> 主题</strong></p><p>在 Hexo 博客根目录（<code>/HexoData</code>）运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></tbody></table></figure><p><strong>2. 修改 <code>Hexo</code> 主配置</strong></p><p>打开<code>_config.yml</code>（位于博客根目录），找到<code>theme</code>字段，修改为：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></tbody></table></figure><p>如需要可以将 <code>language</code> 设置为中文：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></tbody></table></figure><p><strong>3. 创建 Fluid 的配置文件</strong></p><p><code>Fluid</code>主题的配置需要额外文件：<br>在博客根目录下创建<code>_config.fluid.yml</code>文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> node_modules/hexo-theme-fluid/_config.yml _config.fluid.yml<br></code></pre></td></tr></tbody></table></figure><p>编辑<code>_config.fluid.yml</code>来自定义主题（如菜单、颜色、字体等）。</p><p><strong>4. 迁移 Landscape 的内容（可选）</strong></p><p>自定义样式/脚本：将 <code>Landscape</code> 的 <code>source/css</code> 或 <code>source/js</code> 文件复制到 <code>Fluid</code> 的 <code>source</code> 目录。<br>文章/页面：<code>_posts</code> 和<code> _pages</code> 内容无需迁移，<code>Hexo</code> 会自动读取。</p><p><strong>5. 清理并重新生成</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></tbody></table></figure><p>访问 <a href="http://localhost:4000">http://localhost:4000</a> 查看效果。</p><h3 id="（二）添加评论系统">（二）添加评论系统</h3><p><a href="https://blog.csdn.net/Neter_Leon/article/details/107064603?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=hexo%E7%9A%84fulid%E4%B8%8D%E5%90%8C%E7%8E%A9%E6%B3%95&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-107064603.142%5Ev102%5Epc_search_result_base2&amp;spm=1018.2226.3001.4187">Hexo快速构建个人小站-Fulid主题下添加Valine评论系统(三)</a><br>注意<code>comments</code>在(<code>\themes\你的主题名\_config.yml</code>)文件中，Hexo 主配置文件(<code>_config.yml</code>)通常用于全局配置（如博客标题、作者等），添加评论系统的配置不在这个文件中。将<code>appid</code>和<code>appkey</code>填入，同时记得根据选择的插件修改博客评论系统的<code>type</code>！</p><h3 id="（三）添加背景音乐">（三）添加背景音乐</h3><p><a href="https://blog.csdn.net/weixin_43471926/article/details/109798928?ops_request_misc=%257B%2522request%255Fid%2522%253A%25224db07d60e8ad014b04fcc3b6dc2a5cdf%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=4db07d60e8ad014b04fcc3b6dc2a5cdf&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-109798928-null-null.142%5Ev102%5Epc_search_result_base2&amp;utm_term=hexo%20fluid%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90&amp;spm=1018.2226.3001.4187">Hexo-Fluid主题添加音乐页面</a></p><h3 id="（四）给每篇博客添加封面-背景">（四）给每篇博客添加封面/背景</h3><p>在<code>source</code>文件夹下新建<code>medias</code>文件夹用于存放图片，在每篇博客文章<code>front-matter</code>的区域添加：<br><strong>背景图片：</strong></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">banner<span class="hljs-emphasis">_img: 图片路径（/medias/图片文件名）</span><br></code></pre></td></tr></tbody></table></figure><p><strong>封面图片预览：</strong></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">index<span class="hljs-emphasis">_img: 图片路径（/medias/图片文件名）</span><br></code></pre></td></tr></tbody></table></figure><p>其他丰富玩法参考官方文档：</p><ul><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">开始使用 | Hexo Fluid 用户手册</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">配置指南 | Hexo Fluid 用户手册</a></li></ul><h2 id="二、CSDN与Hexo撰写差异">二、CSDN与Hexo撰写差异</h2><p><strong>1. 插入图片</strong><br>插入图片的语法如下：<code>![插入图片的注释](插入图片的连接或本地路径)</code><br>  CSDN 不支持本地图片链接：如果你在 CSDN 写博客时插入本地图片路径，其他用户无法访问你的本地文件。<br>  使用Hexo进行博客撰写时，图片可以放在<code>source/images/ 文件夹（可以自行创建）</code>使用相对路径，避免文件迁移后路径找不到而导致问题，建议一篇博客单独创建一个文件夹进行图片的存储便于管理。<br>  CSDN中的图片注释无法显示，必须通过在图片下添加<code>&lt;center&gt;添加图片注释&lt;/font&lt;/center&gt;</code>的方式进行注释。</p><blockquote><center>添加图片注释</center></blockquote><p>  网上其他博主也有推荐使用<a href="https://portal.qiniu.com/signin?redirect=%2Fhome">七牛云存储</a>的，将图片从本地上传到七牛云存储仓库。得到一个外链地址，将外链地址作为图片的URL地址写进文章。</p><p><strong>2.数学公式</strong><br>CSDN中默认<code>latex</code>的格式是可以进行渲染的，而在<code>Hexo</code>中需要在全局配置文件中进行修改：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span><br><span class="hljs-section"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span><br>math:<br>  # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 <span class="hljs-code">`math: true`</span><br>  # If you want to use math on the custom page, you need to set <span class="hljs-code">`math: true`</span> in Front-matter<br>  enable: true<br><br>  # 开启后，只有在文章 Front-matter 里指定 <span class="hljs-code">`math: true`</span> 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度<br>  # If true, only set <span class="hljs-code">`math: true`</span> in Front-matter will enable math, to load faster when the page does not contain math<br>  specific: false<br></code></pre></td></tr></tbody></table></figure><p>封面来源：<a href="https://www.youtube.com/watch?v=XiMVwkxu3hU">如何使用Hexo+Github Pages 搭建个人博客，手把手最新教程</a></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Blogging</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>From OpenCV to YOLOv5</title>
    <link href="/2025/07/09/other/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/"/>
    <url>/2025/07/09/other/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/</url>
    
    <content type="html"><![CDATA[<h1>From OpenCV to YOLOv5: Object Detection from Theory to Practice</h1><div class="note note-primary">            <p><strong>摘要</strong>：本文系统性地研究了目标检测技术从传统方法到深度学习的演进过程，重点对比分析了 <em><strong>OpenCV级联分类器</strong></em> 与 <em><strong>YOLOv5</strong></em> 的核心原理、技术特点及适用场景。通过深入研究<em><strong>Haar特征</strong></em> 与 <em><strong>卷积神经网络</strong></em> 的特征提取机制，揭示了两种方法在检测精度、计算效率等方面的本质差异。在实践层面，详细探讨了使用<em><strong>Labelme</strong></em>进行<em><strong>数据标注</strong></em>的方法论，以及如何利用 <em><strong>Roboflow</strong></em> 等平台获取和优化训练数据集。基于上述理论研究，我们将YOLOv5模型部署至 <em><strong>树莓派嵌入式平台</strong></em> ，实现了垃圾分类目标检测系统的工程化应用。本研究不仅梳理了目标检测技术的发展脉络，更通过完整的 <em><strong>“理论-数据-训练-部署”</strong></em> 闭环验证了深度学习人工智能在资源受限设备上的实用价值。</p>          </div><div class="note note-primary">            <p><strong>关键词</strong>：<em><strong>OpenCV；YOLOv5；目标检测；树莓派</strong></em></p>          </div><div class="note note-primary">            <p><strong>引言</strong>：每天清晨，当我们拿起智能手机解锁时，人脸识别功能会瞬间完成身份验证；走进机场安检区，摄像头会自动标记旅客的面部位置；甚至社交软件中的“美颜滤镜”，也需要先精准定位五官。这些看似简单的功能，其实背后都依赖于图像处理的目标检测技术！</p>          </div><p>  而在早期，这类技术并非基于复杂的深度学习，而是通过OpenCV的级联检测器（如Haar级联）实现的。</p><h3 id="一、OpenCV中Python-环境搭建">一、OpenCV中Python 环境搭建</h3><p>  Python 环境搭建是实现目标检测的前提基础，而其环境也并不复杂，仅仅是在Python解释器的基础上添加诸如numpy、matplotlib等库即可。</p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%871.png" alt="图1 OpenCV环境搭建所需要的软件包示例"></p><h3 id="二、OpenCV的级联分类器">二、OpenCV的级联分类器</h3><p>  Haar分类器是一种基于机器学习的目标检测算法，它使用Haar特征描述图像中的目标。Haar特征是基于图像亮度的局部差异计算得出的，可以用来描述目标的边缘、角落和线条等特征。<br>  将一系列简单的分类器按照一定的顺序级联到一起就构成了级联分类器，使用级联分类器的程序可以通过一系列简单的判断来对样本进行识别。OpenCV提供一些已经训练好的级联分类器，有人脸检测、身形检测、车牌检测等，如下图所示。想要实现哪一种图像检测，在程序启动时加载对应的级联分类器即可。</p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%872.png" alt="图2 OpenCV自带的级联分类器XML文件"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">face_detection</span>(<span class="hljs-params">frame</span>):<br>    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<br>    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + <span class="hljs-string">'haarcascade_frontalface_default.xml'</span>)<br>    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class="hljs-number">1.05</span>, minNeighbors=<span class="hljs-number">9</span>, minSize=(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>))<br>    <span class="hljs-keyword">for</span> (x, y, w, h) <span class="hljs-keyword">in</span> faces:<br>        cv2.rectangle(frame, (x, y), (x + w, y + h), (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br>        cv2.putText(frame, <span class="hljs-string">"Face"</span>, (x, y - <span class="hljs-number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="hljs-number">0.9</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> frame<br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    ret, frame = cap.read()<br>    result = face_detection(frame)<br>    cv2.imshow(<span class="hljs-string">"Face Detection"</span>, result)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">'q'</span>):<br>        <span class="hljs-keyword">break</span><br>cap.release()<br>cv2.destroyAllWindows()<br></code></pre></td></tr></tbody></table></figure><h3 id="三、调用级联分类器实现检测">三、调用级联分类器实现检测</h3><p>  作为传统机器视觉的AI方法，人脸级联分类器采用提取眼睛区域（上暗下亮）、鼻梁区域（两侧暗中间亮）、嘴巴区域（上唇暗下唇亮）、面部轮廓（与背景的明暗对比）等多个特征的方法进行检测，效果图如下图所示。</p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%873.png" alt="图4 使用OpenCV人脸级联分类器进行人脸检测效果图"></p><p>  尽管Haar级联在早期表现出色，但是随着场景扩展，传统方法OpenCV图像处理的弊端逐渐开始显现，级联的方法遇到了瓶颈，其局限性在复杂场景中暴露无遗：<br>(1)光照敏感：强光下人脸过曝时，特征对比度消失，导致漏检。<br>(2)姿态与遮挡：侧脸或戴口罩时，矩形特征失效，误检率飙升。<br>(3)多目标处理困难：需手动调整参数适应不同目标（如猫脸检测需重新训练）。<br>Haar级联的失败案例：背光导致检测失败：树叶被误检测为人脸。</p><p>  从“人工规则”到“智能学习”，随着OpenCV传统图像处理方法的失宠，一种运用前沿AI——深度学习算法的新目标检测方法应运而生：YOLO算法！YOLOv5的诞生标志着目标检测从人工设计规则转向数据驱动学习，他们有着诸多的不同：<br>(1)特征提取的自动化：Haar级联依赖工程师设计的黑白矩形块，而YOLOv5通过训练自动提取更复杂的特征（例如纹理、轮廓、语义信息）。<br>(2)全局理解图像：传统方法需滑动窗口逐区域扫描，YOLOv5将图像划分为网格，单次预测所有目标的位置和类别，效率提升百倍。</p><h3 id="四、YOLOv5运行环境的搭建">四、YOLOv5运行环境的搭建</h3><p>  这个的步骤可能略显复杂，主要是安装anaconda，为YOLOv5的运行创建虚拟环境，安装cuda，再根据电脑具体配置是否有GPU选择pytorch的版本。</p><h3 id="五、YOLOv5的运行">五、YOLOv5的运行</h3><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%875.png" alt="图 5 PC成功调用GPU进行YOLOv5 目标检测"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%876.png" alt="图 6 YOLOv5 默认图像的处理结果（1）"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%877.png" alt="图 7 YOLOv5 默认图像的处理结果（2）"></p><p>  从OpenCV的“人工经验”到YOLOv5的“数据智能”，目标检测技术实现了质的飞跃。然而，YOLOv5的强大性能离不开高质量的数据支撑，但是现实生活中我们的需求是多样化的，此时我们不满足于仅仅使用YOLOv5默认的数据集进行目标检测，这时我们将深入探讨如何构建专属数据集：</p><h3 id="六、用labelme进行数据集的标注-4">六、用labelme进行数据集的标注[4]</h3><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%878.png" alt="图 8 使用labelme手动进行数据集标注"></p><p>  Labelme确实能够适应特定需求进行数据集的划分了，但是一次的训练需要成百上千张图片，每做一次数据集就需要手动划分这么多，显然效率较低，难以大规模推广使用，于是我们可以通过下载网络平台上的各种标注好数据集进行训练实验。</p><h3 id="七、用roboflow下载数据集-5">七、用roboflow下载数据集[5]</h3><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%879.png" alt="图 9 在Roboflow中寻找合适的数据集"></p><h3 id="八、对数据集进行训练和测试">八、对数据集进行训练和测试</h3><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8710.png" alt="图 10 对数据集进行训练"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8711.png" alt="图 11 获取训练好的特征权重文件"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8712.png" alt="在图 12 训练所得混淆矩阵"></p><p>  列代表预测的类别，行代表实际的类别。其对角线上的值表示预测正确的数量比例，非对角线元素则是预测错误的部分。混淆矩阵的对角线值越高越好，这表明许多预测是正确的。</p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8713.png" alt="图13 训练所得labels"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8714.png" alt="图14 训练所得准确率与置信度"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8715.png" alt="图15 训练所得"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8716.png" alt="图16 个人“手势”数据集测试（1）"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8717.png" alt="图17 个人“手势”数据集测试（2）"></p><p>  为了将目标检测技术从理论转化为实际应用，我们决定将YOLOv5模型部署到嵌入式设备中，打造具有实用价值的智能终端。考虑到深度学习算法对计算性能的较高要求，传统的C51、STM32等单片机难以满足运算需求，因此我们选择了性能更为强大的树莓派作为硬件平台，以确保模型能够高效稳定地运行。这一方案不仅提升了系统的实时处理能力，也为后续的功能扩展提供了充足的计算资源保障。</p><h3 id="九、部署至树莓派装置进行实战检测">九、部署至树莓派装置进行实战检测</h3><p>  在系统实现过程中，我们针对树莓派的硬件特性进行了适配性开发。由于树莓派采用CSI摄像头接口，其图像采集方式与PC端的USB摄像头存在差异，为此我们专门优化了图像采集模块的代码架构。同时，通过设计高效的通信协议，实现了树莓派与主控芯片STM32的协同工作。</p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8718.png" alt="图18 在树莓派中配置anaconda"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8719.png" alt="图19 在树莓派中配置vscode"></p><p><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/From-OpenCV-to-YOLOv5-Object-Detection-from-Theory-to-Practice/%E5%9B%BE%E7%89%8720.png" alt="图20 对树莓派进行调试"></p><p>  历经反复的调试，最终完成了基于YOLOv5的智能垃圾分类系统，在自主构建的数据集支持下，能够准确识别多种垃圾类型，并通过机械执行实现自动分类压缩回收，充分展现了人工智能深度学习技术的实用价值！</p><h3 id="参考文献">参考文献</h3><p>[1]陈之尧.基于OpenCV-Python的图像分割技术的设计与应用研究[J].中国新通信,2018,20(19):89.<br>[2]明月科技.《Python OpenCV快速从入门到精通》.<br>[3]<a href="https://blog.csdn.net/qq_67105081/article/details/138232424?ops_request_misc=%7B%22request_id%22%3A%22b368614c237378c5bf41ba67bb6c3883%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=b368614c237378c5bf41ba67bb6c3883&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-138232424-null-null.142%5Ev102%5Epc_search_result_base2&amp;utm_term=yolov5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%90%AD%E5%BB%BA&amp;spm=1018.2226.3001.4187">深度学习目标检测：yolov5环境配置，适合0基础小白，超详细-CSDN博客</a><br>[4]<a href="https://blog.csdn.net/weixin_45736855/article/details/129583272?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=yolov5%E7%9A%84labelme%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE%E9%9B%86&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-129583272.142%5Ev102%5Epc_search_result_base2&amp;spm=1018.2226.3001.4187">labelme制作yolov5模型的数据集_labelme yolo-CSDN博客</a><br>[5]<a href="https://blog.csdn.net/2401_86849688/article/details/145814831?spm=1001.2014.3001.5501">下载数据集进行yolov5的训练测试_yolov5数据集下载-CSDN博客</a><br>[6]<a href="https://blog.csdn.net/qq_45305490/article/details/125219937?ops_request_misc=%7B%22request_id%22%3A%22d18d63f66eeb3c007e4fab2cfbb532b2%22%2C%22scm%22%3A%2220140713.130102334.pc_all.%22%7D&amp;request_id=d18d63f66eeb3c007e4fab2cfbb532b2&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-125219937-null-null.142%5Ev102%5Epc_search_result_base2&amp;utm_term=yolov5%E6%96%87%E4%BB%B6%E4%B8%8B%E7%9A%84runs%20train&amp;spm=1018.2226.3001.4187">yolov5-runs文件中对train结果的说明_train box loss-CSDN博客</a><br>[7]<a href="https://blog.csdn.net/2401_86849688/article/details/145858990?spm=1001.2014.3001.5501">将yolov5运用在树莓派上进行目标检测_树莓派yolo5调用摄像头-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>opencv</tag>
      
      <tag>yolov5</tag>
      
      <tag>object detection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMT-Datastructure-Practice 4</title>
    <link href="/2025/06/27/Data%20structure/CUMT-Datastructure-Practice-4/"/>
    <url>/2025/06/27/Data%20structure/CUMT-Datastructure-Practice-4/</url>
    
    <content type="html"><![CDATA[<h2 id="问题-A-机器人王国里的路径长度">问题 A: 机器人王国里的路径长度</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-a5ff173a" role="button" aria-expanded="false" aria-controls="collapse-a5ff173a">        <div class="fold-arrow">▶</div> 问题 A: 机器人王国里的路径长度      </div>      <div class="fold-collapse collapse" id="collapse-a5ff173a">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>在一个机器人王国里，围绕首都分N层构建卫星城市。以首都为圆心，以路相连分出两个卫星城在第一个层，然后每个卫星城又有路相连分出两个卫星城在下一层，但每条路的长度不同。第N层的卫星城不再分出新的卫星城。现在人类只探知到所有直接相连的城市间的路程，你能计算某个卫星城到达首都的路程吗？</p><h3 id="输入">输入</h3><p>第一行为N，表示机器人王国里有N层卫星城，N最大为10。从第二行开始，共2N+1-2行，每行分别是城市的代号到其分出的卫星城的代号和它们间的路程。 代号用若干个字母表示，直连路程最大为100。最后一行是某卫星城的代号。</p><h3 id="输出">输出</h3><p>根据最后一行的卫星城代号，求该卫星城到首都的路程。</p><h3 id="样例输入">样例输入</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">2</span><br><span class="hljs-selector-tag">A</span> F <span class="hljs-number">20</span><br><span class="hljs-selector-tag">B</span> D <span class="hljs-number">100</span><br><span class="hljs-selector-tag">G</span> <span class="hljs-selector-tag">A</span> <span class="hljs-number">5</span><br><span class="hljs-selector-tag">G</span> <span class="hljs-selector-tag">B</span> <span class="hljs-number">10</span><br><span class="hljs-selector-tag">A</span> C <span class="hljs-number">6</span><br><span class="hljs-selector-tag">B</span> E <span class="hljs-number">30</span><br>D<br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">110<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析">问题分析</h3><p>本题需要根据当前<code>target</code>不断向上<strong>回溯寻找其父节点</strong>，将<code>distance</code>值返回加入到总路程<code>sum</code>中即可，这里使用哈希表存储每个城市的父城市和到父城市的距离。</p><h3 id="完整代码">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span><span class="hljs-comment">//哈希表容器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span><span class="hljs-comment">//处理字符串</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span><span class="hljs-comment">//这里用于幂运算</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">city</span> {<br>string parent;<span class="hljs-comment">//父城市名称</span><br><span class="hljs-type">int</span> distance;<span class="hljs-comment">//到父城市的距离</span><br>};<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>unordered_map&lt;string, city&gt; path;<span class="hljs-comment">//存储城市路径关系的哈希表</span><br><span class="hljs-type">int</span> N;<br>cin &gt;&gt; N;<br><span class="hljs-type">int</span> number = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, N + <span class="hljs-number">1</span>) - <span class="hljs-number">2</span>;<span class="hljs-comment">//计算读取的城市个数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; number;i ++) {<br>string start, end;<br><span class="hljs-type">int</span> distance;<br>cin &gt;&gt; start &gt;&gt; end &gt;&gt; distance;<br>path[end] = { start,distance };<span class="hljs-comment">//进行存储</span><br>}<br>string target;<br>cin &gt;&gt; target;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (path.<span class="hljs-built_in">find</span>(target)!=path.<span class="hljs-built_in">end</span>()){<br><span class="hljs-comment">//直至当前的目标城市无法查找到父城市是停止</span><br>sum += path[target].distance;<br>target = path[target].parent;<span class="hljs-comment">//将当前目标城市向上移动</span><br>}<br>cout &lt;&lt; sum &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="注释">注释</h3><p><code>&lt;unordered_map&gt;</code>是C++标准库中提供<strong>无序关联容器</strong>的头文件，它实现了基于哈希表的<strong>键值对存储结构</strong>，它具有以下特性：</p><ul><li>元素<strong>无序存储</strong>，不会根据关键字值或映射值按<strong>任何特定顺序排序</strong></li><li>键必须<strong>唯一</strong>（不允许重复键）</li><li>根据关键字来引用，而<strong>不是根据索引来引用</strong></li><li>使用<strong>链表处理哈希冲突</strong>（<strong>链地址法</strong>）</li></ul><p>构造哈希表：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">unordered_map&lt;KeyType, ValueType&gt; map_name;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">unordered_map</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) position;<br>unordered_map&lt;string,string&gt; name;<br>unordered_map&lt;string,<span class="hljs-type">int</span>&gt; age;<br></code></pre></td></tr></tbody></table></figure><ol><li><strong>元素添加</strong></li></ol><ul><li>声明时<strong>使用初始化列表</strong>进行初始化：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; position = {{<span class="hljs-number">1</span>,<span class="hljs-number">10</span>},{<span class="hljs-number">2</span>,<span class="hljs-number">20</span>},{<span class="hljs-number">3</span>,<span class="hljs-number">30</span>}};<br>unordered_map&lt;string, string&gt; capital_city = {<br>    {<span class="hljs-string">"UK"</span>, <span class="hljs-string">"London"</span>},<br>    {<span class="hljs-string">"France"</span>, <span class="hljs-string">"Paris"</span>},<br>    {<span class="hljs-string">"Germany"</span>, <span class="hljs-string">"Berlin"</span>}<br>};<br></code></pre></td></tr></tbody></table></figure><ul><li><p>使用<code>[]</code>运算符添加：</p><ul><li>如果键<strong>不存在</strong>，会<strong>插入一个新的键值对</strong></li><li>如果键<strong>已存在</strong>，则会<strong>覆盖</strong>原有的值</li></ul></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">unordered_map&lt;string, <span class="hljs-type">int</span>&gt; age_map;<br>age_map[<span class="hljs-string">"Alice"</span>] = <span class="hljs-number">25</span>; <span class="hljs-comment">// 插入 {"Alice", 25}</span><br>age_map[<span class="hljs-string">"Bob"</span>] = <span class="hljs-number">30</span>;   <span class="hljs-comment">// 插入 {"Bob", 30}</span><br>age_map[<span class="hljs-string">"Alice"</span>] = <span class="hljs-number">26</span>; <span class="hljs-comment">// 更新，现在 {"Alice", 26}</span><br></code></pre></td></tr></tbody></table></figure><ul><li><p>使用<code>insert()</code>：插入一个键值对 <code>pair&lt;Key, Value&gt;</code>:</p><ul><li>返回值是一个 <code>pair&lt;iterator, bool&gt;</code></li><li><code>name.first</code>是<strong>指向插入元素的迭代器</strong></li><li><code>name.second</code>是 bool 类型，表示<strong>插入是否成功</strong>（true 表示成功，false 表示键已存在）</li></ul></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> result = age_map.<span class="hljs-built_in">insert</span>({<span class="hljs-string">"Charlie"</span>, <span class="hljs-number">28</span>}); <br><span class="hljs-comment">// result 是一个 pair&lt;iterator, bool&gt;</span><br><span class="hljs-comment">// result.first 是指向插入元素的迭代器</span><br><span class="hljs-comment">// result.second 是 bool 类型，表示插入是否成功（true 表示成功，false 表示键已存在）</span><br><span class="hljs-keyword">if</span> (result.second) {<br>    std::cout &lt;&lt; <span class="hljs-string">"Insertion successful!\n"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li><strong>元素访问</strong></li></ol><table><thead><tr><th>成员函数</th><th>说明</th></tr></thead><tbody><tr><td><code>[]</code>运算符</td><td><strong>访问</strong>元素（键不存在时会插入默认值）</td></tr><tr><td><code>map.at(key)</code></td><td>安全<strong>访问</strong>元素（不存在时<strong>抛出out_of_range异常</strong>）</td></tr><tr><td><code>map.find(key)</code></td><td>返回指向元素的<strong>迭代器</strong>（不存在时<strong>返回end()</strong>）</td></tr></tbody></table><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> alice_age = age_map[<span class="hljs-string">"Alice"</span>]; <span class="hljs-comment">// 存在，返回 26</span><br><span class="hljs-type">int</span> dave_age = age_map[<span class="hljs-string">"Dave"</span>];   <span class="hljs-comment">// 不存在！会自动插入 {"Dave", 0}，然后返回 0</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> alice_age = age_map.<span class="hljs-built_in">at</span>(<span class="hljs-string">"Alice"</span>); <span class="hljs-comment">// 存在，返回 26</span><br><span class="hljs-type">int</span> dave_age = age_map.<span class="hljs-built_in">at</span>(<span class="hljs-string">"Dave"</span>);   <span class="hljs-comment">// 不存在！抛出异常</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> it = age_map.<span class="hljs-built_in">find</span>(<span class="hljs-string">"Bob"</span>);<br><span class="hljs-keyword">if</span> (it != age_map.<span class="hljs-built_in">end</span>()) {<br>    <span class="hljs-comment">// it-&gt;first 是键 (”Bob“)</span><br>    <span class="hljs-comment">// it-&gt;second 是值 (30)</span><br>    cout &lt;&lt; <span class="hljs-string">"Found Bob, age: "</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>} <span class="hljs-keyword">else</span> {<br>    cout &lt;&lt; <span class="hljs-string">"Bob not found.\n"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="3"><li><strong>容量查询</strong></li></ol><table><thead><tr><th>成员函数</th><th>说明</th></tr></thead><tbody><tr><td><code>map.empty()</code></td><td>判断容器是否为空</td></tr><tr><td><code>map.size()</code></td><td>返回元素个数</td></tr></tbody></table><ol start="4"><li><strong>修改操作</strong></li></ol><table><thead><tr><th>成员函数</th><th>说明</th></tr></thead><tbody><tr><td><code>map.insert({key, value})</code></td><td>插入键值对（返回pair&lt;iterator, bool&gt;）</td></tr><tr><td><code>map.emplace(key, value)</code></td><td><strong>直接构造元素</strong>（避免临时对象）</td></tr><tr><td><code>map.erase(key)</code></td><td><strong>删除指定键的元素</strong></td></tr></tbody></table><ul><li>通过<strong>迭代器</strong>删除：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> it = age_map.<span class="hljs-built_in">find</span>(<span class="hljs-string">"Bob"</span>);<br><span class="hljs-keyword">if</span> (it != age_map.<span class="hljs-built_in">end</span>()) {<br>    age_map.<span class="hljs-built_in">erase</span>(it); <span class="hljs-comment">// 删除迭代器指向的元素</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>通过<strong>键</strong>删除：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">size_t</span> num_removed = age_map.<span class="hljs-built_in">erase</span>(<span class="hljs-string">"Charlie"</span>); <span class="hljs-comment">// 返回被删除的元素个数（0 或 1）</span><br></code></pre></td></tr></tbody></table></figure><p><code>insert()</code> &amp;&amp; <code>emplace()</code>的区别：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">map.<span class="hljs-built_in">insert</span>({<span class="hljs-string">"apple"</span>, <span class="hljs-number">2</span>});<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">map.<span class="hljs-built_in">emplace</span>(<span class="hljs-string">"apple"</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></tbody></table></figure><ol start="5"><li><strong>查找与统计</strong></li></ol><table><thead><tr><th>成员函数</th><th>说明</th></tr></thead><tbody><tr><td><code>map.count(key)</code></td><td>判断<strong>键是否存在</strong>（返回bool）</td></tr><tr><td><code>map.contains(key)</code></td><td>返回<strong>关键字出现的次数</strong></td></tr></tbody></table><ol start="6"><li><strong>遍历元素</strong></li></ol><ul><li>使用范围 for 循环</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; pair : age_map) {<br>    cout &lt;&lt; pair.first &lt;&lt; <span class="hljs-string">": "</span> &lt;&lt; pair.second &lt;&lt; endl;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>使用迭代器</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = age_map.<span class="hljs-built_in">begin</span>(); it != age_map.<span class="hljs-built_in">end</span>(); ++it) {<br>    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">": "</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="问题-D-寻找第二小的数">问题 D: 寻找第二小的数</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-b7bb3a6d" role="button" aria-expanded="false" aria-controls="collapse-b7bb3a6d">        <div class="fold-arrow">▶</div> 问题 D: 寻找第二小的数      </div>      <div class="fold-collapse collapse" id="collapse-b7bb3a6d">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>求n个整数中第二小的数。<br>相同的整数看成一个数。比如，有5个数分别是1,1,3,4,5，那么第二小的数就是3。</p><h3 id="输入">输入</h3><p>输入包含多组测试数据。输入的第一行是一个整数C，表示有C组测试数据；<br>每组测试数据的第一行是一个整数n，表示本组测试数据有n个整数（2&lt;=n&lt;=10），接着一行是n个整数（每个数均小于100）。</p><h3 id="输出">输出</h3><p>为每组测试数据输出第二小的整数，如果不存在第二小的整数则输出“NO”，每组输出占一行。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-keyword">NO</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v2">问题分析</h3><p>用逆序的优先队列即可完成！</p><h4 id="完整代码-v2">完整代码</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">find</span><span class="hljs-params">()</span> </span>{<br>priority_queue &lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;<br><span class="hljs-type">int</span> m;<br>cin &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++) {<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br>pq.<span class="hljs-built_in">push</span>(a);<br>}<br><span class="hljs-type">int</span> min = pq.<span class="hljs-built_in">top</span>();<br>pq.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>() &amp;&amp; min == pq.<span class="hljs-built_in">top</span>()) {<br>pq.<span class="hljs-built_in">pop</span>();<br>}<br><span class="hljs-keyword">if</span> (pq.<span class="hljs-built_in">empty</span>()) {<br>cout &lt;&lt; <span class="hljs-string">"NO"</span> &lt;&lt; endl;<br>}<br><span class="hljs-keyword">else</span> cout &lt;&lt; pq.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br><span class="hljs-built_in">find</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="问题-E-按十进制各位和排序">问题 E: 按十进制各位和排序</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-78f48315" role="button" aria-expanded="false" aria-controls="collapse-78f48315">        <div class="fold-arrow">▶</div> 问题 E: 按十进制各位和排序      </div>      <div class="fold-collapse collapse" id="collapse-78f48315">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>对于给定的正整数序列，按照每个数的十进制形式各个位上的数之和从大到小排序，各个位上的数和相同的按照本身大小排序，大的在前，小的在后。</p><h3 id="输入">输入</h3><p>第一行 1 个整数 n,表示序列的大小。( 0 &lt; n ≤ 1000) 第二行 n 个正整数，表示序列的每个数，每个数不大于 100000000。</p><h3 id="输出">输出</h3><p>输出按照题目要求排序后的序列。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><br><span class="hljs-symbol">17 </span><span class="hljs-number">26</span> <span class="hljs-number">9</span> <span class="hljs-number">13</span> <span class="hljs-number">88</span> <span class="hljs-number">22</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">88 </span><span class="hljs-number">9</span> <span class="hljs-number">26</span> <span class="hljs-number">17</span> <span class="hljs-number">22</span> <span class="hljs-number">13</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v3">问题分析</h3><p>要将其十进制排序后的结果与原本大小匹配，这里使用了冒泡排序完成。</p><h3 id="完整代码-v3">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>{<span class="hljs-comment">//十进制各个位数求和函数</span><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (a != <span class="hljs-number">0</span>) {<br>sum += a % <span class="hljs-number">10</span>;<br>a = a / <span class="hljs-number">10</span>;<br>}<br><span class="hljs-keyword">return</span> sum;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br>vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">order</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br>cin &gt;&gt; order[i];<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n ; i++) {<span class="hljs-comment">//进行冒泡排序</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span> ;j &lt; n-i<span class="hljs-number">-1</span>;j++) {<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Sum</span>(order[j]) &lt; <span class="hljs-built_in">Sum</span>(order[j + <span class="hljs-number">1</span>]) ||<br>(<span class="hljs-built_in">Sum</span>(order[j]) == <span class="hljs-built_in">Sum</span>(order[j + <span class="hljs-number">1</span>]) &amp;&amp; order[j] &lt; order[j + <span class="hljs-number">1</span>])) {<br><span class="hljs-type">int</span> temp=order[j];<br>order[j]=order[j<span class="hljs-number">+1</span>];<br>order[j<span class="hljs-number">+1</span>]=temp;<br>}<br>}<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n; i++) {<br>cout&lt;&lt;order[i]&lt;&lt;<span class="hljs-string">" "</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="问题-F-奇偶数的排序">问题 F: 奇偶数的排序</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-b019705e" role="button" aria-expanded="false" aria-controls="collapse-b019705e">        <div class="fold-arrow">▶</div> 问题 F: 奇偶数的排序      </div>      <div class="fold-collapse collapse" id="collapse-b019705e">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>给你10个正整数，其中5个奇数、5个偶数，先递减排奇数，然后再递增排偶数。请编程实现。</p><h3 id="输入">输入</h3><p>一行10个正整数（int类型范围）。</p><h3 id="输出">输出</h3><p>先递减排5个奇数，然后再递增排5个偶数，各个数之间有一个空格间隔。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">9</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">9 </span><span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v4">问题分析</h3><p>分别使用优先队列和逆序优先队列对奇数偶数进行排序，再依次输出队首元素。</p><h3 id="完整代码-v4">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>priority_queue&lt;<span class="hljs-type">int</span>&gt; odd;<span class="hljs-comment">//奇数的优先队列</span><br>priority_queue &lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt;  even;<span class="hljs-comment">//偶数逆序优先队列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++) {<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br><span class="hljs-keyword">if</span> (a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {<br>even.<span class="hljs-built_in">push</span>(a);<br>}<br><span class="hljs-keyword">else</span> odd.<span class="hljs-built_in">push</span>(a);<br>}<br><span class="hljs-keyword">while</span>(!odd.<span class="hljs-built_in">empty</span>()) {<br>cout &lt;&lt; odd.<span class="hljs-built_in">top</span>()&lt;&lt;<span class="hljs-string">" "</span>;<br>odd.<span class="hljs-built_in">pop</span>();<br>}<br><span class="hljs-keyword">while</span> (!even.<span class="hljs-built_in">empty</span>() ){<br>cout &lt;&lt; even.<span class="hljs-built_in">top</span>()&lt;&lt;<span class="hljs-string">" "</span>;<br>even.<span class="hljs-built_in">pop</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>封面来源：: <a href="https://www.youtube.com/watch?v=FsfRsGFHuv4">Learn Hash Tables in 13 minutes</a></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>queue</tag>
      
      <tag>sort</tag>
      
      <tag>hashtable</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMT-Datastructure-Practice 3</title>
    <link href="/2025/06/24/Data%20structure/CUMT-Datastructure-Practice-3/"/>
    <url>/2025/06/24/Data%20structure/CUMT-Datastructure-Practice-3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题-A-二叉链表存储的二叉树">问题 A: 二叉链表存储的二叉树</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-f55dd9e6" role="button" aria-expanded="false" aria-controls="collapse-f55dd9e6">        <div class="fold-arrow">▶</div> 问题 A: 二叉链表存储的二叉树      </div>      <div class="fold-collapse collapse" id="collapse-f55dd9e6">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>树形结构是一类重要的非线性数据结构，其中以树和二叉树最为常用。对于每一个结点至多只有两棵子树的一类树，称其为二叉树。二叉树的链式存储结构是一类重要的数据结构.在本题中，将会给出一个按照先序遍历得出的字符串，空格代表空的子节点，大写字母代表节点内容。请通过这个字符串建立二叉树，并按照题目描述中的一种先序遍历和两种中序遍历的算法分别输出每一个非空节点。</p><h3 id="输入">输入</h3><p>输入只有一行，包含一个字符串S，用来建立二叉树。保证S为合法的二叉树先序遍历字符串，节点内容只有大写字母，且S的长度不超过100。</p><h3 id="输出">输出</h3><p>共有三行，每一行包含一串字符，表示分别按先序、中序、中序得出的节点内容，每个字母后输出一个空格。请注意行尾输出换行。</p><h3 id="样例输入">样例输入</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ABC  DE <span class="hljs-selector-tag">G</span>  F <br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">B</span> C D E <span class="hljs-selector-tag">G</span> F <br>C <span class="hljs-selector-tag">B</span> E <span class="hljs-selector-tag">G</span> D F <span class="hljs-selector-tag">A</span> <br>C <span class="hljs-selector-tag">B</span> E <span class="hljs-selector-tag">G</span> D F <span class="hljs-selector-tag">A</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="提示">提示</h3><p>遍历是二叉树各种操作的基础，可以在遍历的过程中对节点进行各种操作。通过二叉树的遍历，可以建立二叉树。而先序、中序和后序遍历分别具有各自的特点，是探索二叉树性质的绝佳“武器”。</p><h3 id="问题分析">问题分析</h3><p>本题依照题目使用二叉树链式存储结构进行二叉树的建立和遍历。</p><ol><li>设计二叉树的<code>struct</code>的节点结构，包含数据元素和左子叶节点和右子叶节点（使用构造函数给结点赋初值和初始化节点指针）。</li><li>用递归的思想实现二叉树的构建，若索引值<code>index</code>非空，则构建节点，再依次递归构建左子树，递归构建右子树。</li><li>递归遍历注意访问和递归的调用顺序即可。</li></ol><table><thead><tr><th>遍历方式</th><th>访问顺序</th><th>递归调用顺序</th></tr></thead><tbody><tr><td>先序遍历</td><td>根 → 左 → 右</td><td>访问 → 左递归 → 右递归</td></tr><tr><td>中序遍历</td><td>左 → 根 → 右</td><td>左递归 → 访问 → 右递归</td></tr><tr><td>后序遍历</td><td>左 → 右 → 根</td><td>左递归 → 右递归 → 访问</td></tr></tbody></table><h3 id="完整代码">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinaryTreeNode</span> {<br><span class="hljs-type">char</span> data;<br>BinaryTreeNode* left;<br>BinaryTreeNode* right;<br><span class="hljs-built_in">BinaryTreeNode</span>(<span class="hljs-type">char</span> x):<span class="hljs-built_in">data</span>(x),<span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>){}<br>};<br><span class="hljs-comment">//若不构造函数则创建节点时需要:</span><br><span class="hljs-comment">//BinaryTreeNode* node = new BinaryTreeNode{'A', nullptr, nullptr};</span><br><span class="hljs-function">BinaryTreeNode* <span class="hljs-title">buildtree</span><span class="hljs-params">(string str, <span class="hljs-type">int</span>&amp; index)</span> </span>{<br><span class="hljs-keyword">if</span> (index &gt;= str.<span class="hljs-built_in">size</span>() || str[index] == <span class="hljs-string">' '</span>) {<br><span class="hljs-comment">//若索引值超出范围或者为空</span><br>index++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>}<br>BinaryTreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BinaryTreeNode</span>(str[index++]);<br><span class="hljs-comment">//创建新节点，递归构建左右子树</span><br>node-&gt;left = <span class="hljs-built_in">buildtree</span>(str, index);<br>node-&gt;right = <span class="hljs-built_in">buildtree</span>(str, index);<br><span class="hljs-keyword">return</span> node;<br>};<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BinaryTreeNode* root)</span> </span>{<span class="hljs-comment">//前序遍历</span><br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) {<br><span class="hljs-keyword">return</span>;<br>}<br>cout &lt;&lt; root-&gt;data &lt;&lt; <span class="hljs-string">" "</span>;<br><span class="hljs-built_in">preOrder</span>(root-&gt;left);<br><span class="hljs-built_in">preOrder</span>(root-&gt;right);<br>};<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(BinaryTreeNode* root)</span> </span>{<span class="hljs-comment">//中序遍历</span><br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) {<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-built_in">inOrder</span>(root-&gt;left);<br>cout &lt;&lt; root-&gt;data &lt;&lt; <span class="hljs-string">" "</span>;<br><span class="hljs-built_in">inOrder</span>(root-&gt;right);<br>};<br><span class="hljs-comment">//void postOrder(BinaryTreeNode* root) {后序遍历</span><br><span class="hljs-comment">//if (root == nullptr) {</span><br><span class="hljs-comment">//return;</span><br><span class="hljs-comment">//}</span><br><span class="hljs-comment">//postOrder(root-&gt;left);</span><br><span class="hljs-comment">//postOrder(root-&gt;right);</span><br><span class="hljs-comment">//cout &lt;&lt; root-&gt;data &lt;&lt; " ";</span><br><span class="hljs-comment">//};</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>string str;<br><span class="hljs-built_in">getline</span>(cin,str);<br><span class="hljs-comment">//注意用getline需要读取空格</span><br><span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>BinaryTreeNode* root=<span class="hljs-built_in">buildtree</span>(str, index);<br><span class="hljs-built_in">preOrder</span>(root);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">inOrder</span>(root);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">inOrder</span>(root);<br>cout &lt;&lt; endl;<br><span class="hljs-comment">//postOrder(root);</span><br><span class="hljs-comment">//cout &lt;&lt; endl;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="B题：哈夫曼树">B题：哈夫曼树</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-f47957e7" role="button" aria-expanded="false" aria-controls="collapse-f47957e7">        <div class="fold-arrow">▶</div> B题：哈夫曼树      </div>      <div class="fold-collapse collapse" id="collapse-f47957e7">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>哈夫曼树，第一行输入一个数n，表示叶结点的个数。需要用这些叶结点生成哈夫曼树，根据哈夫曼树的概念，这些结点有权值，即weight，题目需要输出所有叶子结点的路径长度与权值的乘积之和。</p><h3 id="输入">输入</h3><p>输入有多组数据。<br>每组第一行输入一个数n，接着输入n个叶节点（叶节点权值不超过100，2&lt;=n&lt;=1000）。</p><h3 id="输出">输出</h3><p>输出权值。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">8</span> <br><span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">11</span> <span class="hljs-number">30</span> <br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">10<br>62<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v2">问题分析</h3><ol><li>将所有权值作为单独的树（每个树只有一个节点）</li><li>每次选择权值最小的两棵树合并，形成新的子树，新树的权值为两子树权值之和</li><li>将新树根节点作为新的子树，重复上述过程，直到只剩下一棵树</li><li>计算合并过程中所有中间结果的累加和</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">huffman</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>{<br>priority_queue &lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; minqueue;<br><span class="hljs-comment">//创建最小优先队列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br>minqueue.<span class="hljs-built_in">push</span>(a);<br>}   <span class="hljs-comment">// 读取n个权值并存入最小堆</span><br><span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<span class="hljs-comment">//带权路径长度</span><br><span class="hljs-comment">// 隐式构建哈夫曼树</span><br><span class="hljs-keyword">while</span> (!minqueue.<span class="hljs-built_in">empty</span>()) {<br><span class="hljs-type">int</span> parent = minqueue.<span class="hljs-built_in">top</span>();<br>minqueue.<span class="hljs-built_in">pop</span>();<br><span class="hljs-comment">//取出当前最小值</span><br><span class="hljs-keyword">if</span> (minqueue.<span class="hljs-built_in">empty</span>()) {<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//当队列中只有一个元素时退出循环</span><br>}<br>parent += minqueue.<span class="hljs-built_in">top</span>();<br>minqueue.<span class="hljs-built_in">pop</span>();<br><span class="hljs-comment">//取出次小值</span><br>total +=  parent;<br>minqueue.<span class="hljs-built_in">push</span>(parent);<br>}<br>cout &lt;&lt; total &lt;&lt; endl;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) {<br><span class="hljs-built_in">huffman</span>(n);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="注释">注释</h3><p><strong>优先队列：</strong> 这是一种特殊的队列，每次<code>push</code>进去一个数，它就会自动按照大小排好队，<code>top</code>就能得到队首元素（最大值），<code>pop</code>就会弹出队首元素（队列中最大值）。定义方法如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">priority_queue&lt;<span class="hljs-type">int</span>&gt; pq;<span class="hljs-comment">//int型优先队列</span><br></code></pre></td></tr></tbody></table></figure><p>若我们不满足其降序排列我们还可以将其调整为升序排列：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">priority_queue &lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;<span class="hljs-comment">//int型逆序优先队列</span><br></code></pre></td></tr></tbody></table></figure><h2 id="C题：树的遍历">C题：树的遍历</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-a926a9e9" role="button" aria-expanded="false" aria-controls="collapse-a926a9e9">        <div class="fold-arrow">▶</div> C题：树的遍历      </div>      <div class="fold-collapse collapse" id="collapse-a926a9e9">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>  假设二叉树中的所有键值都是不同的正整数。唯一的二元树可以通过给定的后序和顺序遍历序列，或前序和顺序遍历序列来确定。但是，如果仅给出后序和前序遍历序列，则相应的树可能不再是唯一的。<br>  现在给出一对后序和前序遍历序列，您应该输出树的相应的中序遍历序列。如果树不是唯一的，只需输出其中任何一个。</p><h3 id="输入">输入</h3><p>每个输入文件包含一个测试用例。对于每种情况，第一行给出正整数N（≤30），即二叉树中的节点总数。第二行给出预订序列，第三行给出后序序列。一行中的所有数字都用空格分隔。</p><h3 id="输出">输出</h3><p>对于每个测试用例，如果树是唯一的，则首先是行中的Yes，否则是No。然后在下一行中打印相应二叉树的中序遍历序列。如果解决方案不是唯一的，那么任何答案都可以。保证至少存在一种解决方案。一行中的所有数字必须用一个空格分隔，并且行的末尾不能有额外的空格。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Yes</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v3">问题分析</h3><p>  已知前序、中序二叉树唯一确定，已知中序、后序二叉树唯一确定，而一直前序和后序二叉树无法唯一确定。<br>  前序序列的第一个节点必于后续序列最后一个节点相同，为根节点；前序序列的第二个节点为左子树的根节点（如果有左子树的话），在后续序列中寻找该节点，则划分了左右子树，其左边的所有节点属于左子树，右边的节点（直到根节点之前）属于右子树。<br>  因而我们可以使用前序和后序序列递归地分割左右子树，并直接生成中序序列。<br>而如果前序的第二个节点在后序中位于根节点前的位置，说明该节点可以是左子树或右子树的根，此时树不唯一，可以任意选择左右子树。</p><h3 id="完整代码-v2">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; in, pre, post;<br><span class="hljs-comment">//定义全局变量，分别为前序、中序、后序序列</span><br><span class="hljs-type">bool</span> unique = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记二叉树是否唯一</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> preL, <span class="hljs-type">int</span> preR, <span class="hljs-type">int</span> postL, <span class="hljs-type">int</span> postR)</span> </span>{<br><span class="hljs-comment">//分别标记了前序和后序序列的左右边界</span><br>    <span class="hljs-keyword">if</span> (preL == preR) {<br>        in.<span class="hljs-built_in">push_back</span>(pre[preL]);<br>        <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-keyword">if</span> (pre[preL] == post[postR]) {<br>        <span class="hljs-type">int</span> i = preL + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= preR &amp;&amp; pre[i] != post[postR - <span class="hljs-number">1</span>]) i++;<br>        <span class="hljs-comment">//在后序序列中寻找左子树的根节点</span><br>        <span class="hljs-keyword">if</span> (i - preL &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">build</span>(preL + <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>, postL, postL + (i - preL - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>            unique = <span class="hljs-literal">false</span>;<br>        in.<span class="hljs-built_in">push_back</span>(post[postR]);<br>        <span class="hljs-built_in">build</span>(i, preR, postL + (i - preL - <span class="hljs-number">1</span>), postR - <span class="hljs-number">1</span>);<br>    }<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    pre.<span class="hljs-built_in">resize</span>(n);<br>    post.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-comment">//为全局变量重新分配空间</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>&amp; val : pre) cin &gt;&gt; val;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>&amp; val : post) cin &gt;&gt; val;<br>    <span class="hljs-comment">//读入数据（注意是&amp;索引值）</span><br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    cout &lt;&lt; (unique ? <span class="hljs-string">"Yes"</span> : <span class="hljs-string">"No"</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!in.<span class="hljs-built_in">empty</span>()) {<br>        cout &lt;&lt; in[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; in.<span class="hljs-built_in">size</span>(); ++i)<br>            cout &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; in[i];<br>    }<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="D题：最短路径">D题：最短路径</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-aa984d44" role="button" aria-expanded="false" aria-controls="collapse-aa984d44">        <div class="fold-arrow">▶</div> D题：最短路径      </div>      <div class="fold-collapse collapse" id="collapse-aa984d44">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>一个迷宫地图中，多个房间由单向通道相连，房间号从1到N依次编号。你能编程求解任意房间间的最短路径长度吗？</p><h3 id="输入">输入</h3><p>第一行是迷宫中的房间数N和单项通道数M（0&lt;N,M&lt;100），接下来M行，每行三个数x,y,z，表示一个通道是从x到y,且通道长度是z(z&lt;1000）。<br>最后一行是start和end，分别是起点房间号和终点房间号。</p><h3 id="输出">输出</h3><p>输出起点房间号和终点房间号间的最短路径长度。如果没有通路，输出STOP。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">7</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">7</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">12<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v4">问题分析</h3><p>最短路径路径问题，我们这里采用<strong>Dijkstra算法</strong>进行求解。</p><ol><li>构造邻接矩阵<code>graph</code>存储带权有向图。</li><li>将起始顶点的距离设为0，其他所有顶点的距离<code>distance</code>设为无穷大（即从<code>start</code>到<code>i</code>的最短路径长度）。</li><li>将起始顶点加入已访问集合<code>visited</code>。</li><li>遍历未访问顶点，找出距离起始点最短的顶点，将其加入已访问集合。</li><li>更新<code>distance</code>的距离，如果新计算的距离小于当前距离，则更新距离。</li><li>重复步骤3和4，直到所有顶点都被访问过。</li></ol><h3 id="完整代码-v3">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> M, N;<br>cin &gt;&gt; N &gt;&gt; M;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">distance</span>(N, INT_MAX);<span class="hljs-comment">//存放start到i点的最短路径长度</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(N, <span class="hljs-literal">false</span>)</span></span>;<span class="hljs-comment">//记录当前顶点是否已被访问过</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">graph</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">0</span>));<br><span class="hljs-comment">//有向图的邻接矩阵（二维数组）</span><br><span class="hljs-type">int</span> p, q, length;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; M;i++){<br>cin &gt;&gt; p &gt;&gt; q &gt;&gt; length;<br>graph[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>] = length;<br><span class="hljs-comment">//均采用 0-based索引</span><br>}<br><span class="hljs-type">int</span> start, end;<br>cin &gt;&gt; start &gt;&gt; end;<br>visited[start - <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>distance[start - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++) {<br><span class="hljs-keyword">if</span> (graph[start - <span class="hljs-number">1</span>][i] != <span class="hljs-number">0</span>) {<br>distance[i] = graph[start - <span class="hljs-number">1</span>][i];<br><span class="hljs-comment">//用start的邻接矩阵对distance数组进行初始化</span><br>}<br>}<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j &lt;N;j++){<br><span class="hljs-type">int</span> small = INT_MAX;<br><span class="hljs-type">int</span> tag = <span class="hljs-number">-1</span>;<span class="hljs-comment">//标记最小顶点的索引</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= N;i++) {<br><span class="hljs-keyword">if</span> (distance[i - <span class="hljs-number">1</span>] &lt; small &amp;&amp; !visited[i - <span class="hljs-number">1</span>]) {<br>small = distance[i - <span class="hljs-number">1</span>];<br>tag = i;<br>}<br>}<br><span class="hljs-keyword">if</span> (tag == <span class="hljs-number">-1</span>) {<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//若没有找到最小索引</span><br><span class="hljs-comment">//邻接矩阵已经全部遍历完成</span><br><span class="hljs-comment">//退出循环</span><br>}<br>visited[tag - <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记已访问</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= N;i++) {<br><span class="hljs-keyword">if</span> (graph[tag - <span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>]!=<span class="hljs-number">0</span> &amp;&amp; <br>distance[tag - <span class="hljs-number">1</span>] + graph[tag - <span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>] &lt; distance[i - <span class="hljs-number">1</span>]) {<br>distance[i - <span class="hljs-number">1</span>] = distance[tag - <span class="hljs-number">1</span>] + graph[tag - <span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>];<br><span class="hljs-comment">//如果当前路径为最短路径则进行更新</span><br>}<br>}<br>}<br><span class="hljs-keyword">if</span> (distance[end - <span class="hljs-number">1</span>] != INT_MAX) {<br>cout &lt;&lt; distance[end<span class="hljs-number">-1</span>] &lt;&lt; endl;<br>}<br><span class="hljs-comment">//若distance==INT_MAX，则没有通路</span><br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">"STOP"</span> &lt;&lt; endl;<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="E题：最小生成树">E题：最小生成树</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-3f175be7" role="button" aria-expanded="false" aria-controls="collapse-3f175be7">        <div class="fold-arrow">▶</div> E题：最小生成树      </div>      <div class="fold-collapse collapse" id="collapse-3f175be7">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>最小生成树问题是实际生产生活中十分重要的一类问题。假设需要在n个城市之间建立通信联络网，则连通n个城市只需要n-1条线路。这时，自然需要考虑这样一个问题，即如何在最节省经费的前提下建立这个通信网。<br>可以用连通网来表示n个城市以及n个城市之间可能设置的通信线路，其中网的顶点表示城市，边表示两个城市之间的线路，赋于边的权值表示相应的代价。对于n个顶点的连通网可以建立许多不同的生成树，每一棵生成树都可以是一个通信网。现在，需要选择一棵生成树，使总的耗费最小。这个问题就是构造连通网的最小代价生成树，简称最小生成树。一棵生成树的代价就是树上各边的代价之和。<br>而在常用的最小生成树构造算法中，普里姆（Prim）算法是一种非常常用的算法。<br>在本题中，读入一个无向图的邻接矩阵（即数组表示），建立无向图并按照以上描述中的算法建立最小生成树，并输出最小生成树的代价。</p><h3 id="输入">输入</h3><p>输入的第一行包含一个正整数n，表示图中共有n个顶点。其中n不超过50。<br>以后的n行中每行有n个用空格隔开的整数，对于第i行的第j个整数，如果不为0，则表示第i个顶点和第j个顶点有直接连接且代价为相应的值，0表示没有直接连接。当i和j相等的时候，保证对应的整数为0。<br>输入保证邻接矩阵为对称矩阵，即输入的图一定是无向图，且保证图中只有一个连通分量。</p><h3 id="输出">输出</h3><p>只有一个整数，即最小生成树的总代价。请注意行尾输出换行。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="提示-v2">提示</h3><p>在本题中，需要掌握图的深度优先遍历的方法，并需要掌握无向图的连通性问题的本质。通过求出无向图的连通分量和对应的生成树，应该能够对图的连通性建立更加直观和清晰的概念。</p><h3 id="问题分析-v5">问题分析</h3><p>完成本题首先要掌握要掌握两种计算最小生成树的方法：普利姆（Prim）算法、克鲁斯卡尔（Kruskal）算法。（当然本题只要求使用普利姆算法）</p><ul><li>普利姆算法（+点）</li></ul><ol><li>选择任意一个顶点作为起始点，将其加入最小生成树中</li><li>从未选择的顶点中选择与现有生成树连线权重最小的顶点，将其加入到现有生成树中</li><li>重复上述步骤，直到最小生成树包含了图中的所有顶点。</li></ol><ul><li>克鲁斯卡尔算法（+边）</li></ul><ol><li>从不属于最小生成树的边中找到权值最小的边，判断最小边及其连接的两个顶点加入到最小生成树是否会形成环路。</li><li>若不形成环路，则将此最小边及其连接的顶点并入最小生成树。</li><li>若形成环路，则永远不再看此边，然后从剩下的且不属于最小生成树的边中，寻找权值最小的边。</li><li>重复上述步骤，直至所有顶点均连接在一起，并没有形成环路时，最小生成树就找到了。</li></ol><p>根据题意这里使用普利姆算法进行编程求解，用<code>key</code>记录当前生成树与各个顶点的最小值，<code>visited</code>记录当前顶点是否被访问，外循环<code>n</code>次，每次将一个顶点加入最小生成树中。</p><h3 id="完整代码-v4">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span><span class="hljs-comment">//用于INT_MAX的数组初始化</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">matrix</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; n;j++) {<br>cin &gt;&gt; matrix[i][j];<span class="hljs-comment">//读入邻接矩阵</span><br>}<br>}<br>vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">key</span>(n,INT_MAX);<br><span class="hljs-comment">//记录当前生成树与各顶点的最小值并不断更新</span><br>vector &lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-built_in">visited</span>(n, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">//记录当前顶点是否已经被访问过</span><br>key[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录最小生成树的总权值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br><span class="hljs-type">int</span> u = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; n;j++) {<br><span class="hljs-keyword">if</span> (!visited[j] &amp;&amp; (u == <span class="hljs-number">-1</span> || key[j] &lt; key[u])) {<br>u = j;<span class="hljs-comment">//找到当前与生成树的最小权值点顶点</span><br>}<br>}<br>visited[u] = <span class="hljs-literal">true</span>;<br>total += key[u];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>;v &lt; n;v++) {<br><span class="hljs-keyword">if</span> (!visited[v] &amp;&amp; matrix[u][v]!=<span class="hljs-number">0</span> &amp;&amp; matrix[u][v] &lt; key[v]) {<br>key[v] = matrix[u][v];<br><span class="hljs-comment">//对key生成树到顶点的最小值进行更新</span><br>}<br>}<br><br>}<br>cout &lt;&lt; total &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="注释-v2">注释</h3><p><code>&lt;climits&gt;</code>头文件，定义了与整数类型的大小和范围相关的宏常量，常用<code>INT_MAX</code>和<code>INT_MIN</code>对数组变量进行初始化。</p><p>封面来源: <a href="https://www.youtube.com/watch?v=j0OUwduDOS0">Shortest Path Algorithms Explained (Dijkstra’s &amp; Bellman-Ford)</a></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary tree</tag>
      
      <tag>huffman tree</tag>
      
      <tag>queue</tag>
      
      <tag>Dijkstra</tag>
      
      <tag>Kruskal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMT-Datastructure-Assignment 2</title>
    <link href="/2025/06/18/Data%20structure/CUMT-Datastructure-Assignment-2/"/>
    <url>/2025/06/18/Data%20structure/CUMT-Datastructure-Assignment-2/</url>
    
    <content type="html"><![CDATA[<h2 id="A题：统计回文字符串">A题：统计回文字符串</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-5516a047" role="button" aria-expanded="false" aria-controls="collapse-5516a047">        <div class="fold-arrow">▶</div> A题：统计回文字符串      </div>      <div class="fold-collapse collapse" id="collapse-5516a047">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>现在给你一个字符串S，请你计算S中有多少连续子串是回文串。</p><h3 id="输入">输入</h3><p>输入包含多组测试数据。每组输入是一个非空字符串，长度不超过5000。</p><h3 id="输出">输出</h3><p>对于每组输入，输出回文子串的个数。</p><h3 id="样例输入">样例输入</h3><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">aba</span><br><span class="hljs-attribute">aa</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>3<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析">问题分析</h3><p>先读取字符串<code>s</code>，采取从中心向两边进行扩展的方法，若回文字符串为奇数个字符则起始时中心均为<code>i</code>；若回文字符串为偶数个字符则起始时中心<code>i</code>和<code>i+1</code>，直至字符不匹配或者数组越界。</p><h3 id="注意点">注意点</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; n &amp;&amp; s[left] == s[right])<br></code></pre></td></tr></tbody></table></figure><p>和</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> (s[left] == s[right]&amp;&amp;left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; n )<br></code></pre></td></tr></tbody></table></figure><p>在编译器中并不等同：应该先检查是否越界，否则可能出现未定义行为而报错<br><strong>短路求值规则</strong>：逻辑运算符 &amp;&amp; 会从左到右依次求值，如果前面的条件为 false，后面的条件不会被计算。第一种写法利用了短路规则，避免了非法内存访问；第二种写法则可能引发问题。</p><h3 id="完整代码">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countnumber</span><span class="hljs-params">(string s)</span> </span>{<br><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br><span class="hljs-type">int</span> left = i;<br><span class="hljs-type">int</span> right = i;<br><br><span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; n &amp;&amp; s[left] == s[right]) {<br>num++;<br>--left;<br>++right;<br>}<br>left = i, right = i + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; n &amp;&amp; s[left] == s[right]) {<br>num++;<br>--left;<br>++right;<br>}<br>}<br><span class="hljs-keyword">return</span> num;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>string s;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; s) {<br>cout &lt;&lt; <span class="hljs-built_in">countnumber</span>(s) &lt;&lt; endl;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="B题：构建矩阵">B题：构建矩阵</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-e5e15715" role="button" aria-expanded="false" aria-controls="collapse-e5e15715">        <div class="fold-arrow">▶</div> B题：构建矩阵      </div>      <div class="fold-collapse collapse" id="collapse-e5e15715">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>现请你构建一个N*N的矩阵，第i行j列的元素为i与j的乘积。（i，j均从1开始）</p><h3 id="输入">输入</h3><p>输入的第一行为一个正整数C，表示测试样例的个数。<br>然后是C行测试样例，每行为一个整数N（1&lt;=N&lt;=9），表示矩阵的行列数。</p><h3 id="输出">输出</h3><p>对于每一组输入，输出构建的矩阵。</p><h3 id="样例输入">样例输入</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>1<br>4<br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">12</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">8</span> <span class="hljs-number">12</span> <span class="hljs-number">16</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v2">问题分析</h3><ol><li>构造<code>printmatrix</code>的函数，主函数中每读入一个数，调用一次函数</li><li>观察矩阵，相当于每行是一个等差数列，公差等于所在行行数，每换一次行其公差+1即可。</li></ol><h3 id="完整代码-v2">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">matrix</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>{<br><span class="hljs-type">int</span> d = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;n &lt;= i * i &amp;&amp; d&lt;=i;n += d) {<br>cout &lt;&lt; n &lt;&lt; <span class="hljs-string">" "</span>;<br><span class="hljs-keyword">if</span> (n == i * d) {<br>cout &lt;&lt; endl;<br>d++;<br>n = <span class="hljs-number">0</span>;<br>}<br>}<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; n;j++) {<br>cin &gt;&gt; i;<br><span class="hljs-built_in">matrix</span>(i);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>构造打印矩阵函数的另外一种做法，双层嵌套<strong>for</strong>循环，这个方法显然更加直观:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= N; ++j) {<br>            cout &lt;&lt; i * j;<br>            <span class="hljs-keyword">if</span> (j &lt; N) {<br>                cout &lt;&lt; <span class="hljs-string">" "</span>;<br>            }<br>        }<br>        cout &lt;&lt; endl;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="C题：找规律填数字">C题：找规律填数字</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-08e013ca" role="button" aria-expanded="false" aria-controls="collapse-08e013ca">        <div class="fold-arrow">▶</div> C题：找规律填数字      </div>      <div class="fold-collapse collapse" id="collapse-08e013ca">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>小宇正在读小学，今天老师布置了几道数学题目。小宇平时上课经常不专心，这些他可发愁了，怎么办呢？看看你能不能帮帮他。<br>题目是给你一组有规律序列的前面5个整数，请你给出它后面跟着的5个整数，如：1,2,3,4,5,_, _, _, _, _, _。这是个等差数列，后面应该是6,7,8,9,10，就这么简单。而且现在小宇已经知道这串序列要么是等差数列，要么是等比数列或者是斐波那契数列。</p><h3 id="输入">输入</h3><p>输入包含多组测试数据。每组输入5个整数，每个数字之间隔一个空格，当5个数字都为0时输入结束。</p><h3 id="输出">输出</h3><p>对于每组输入，输出这串数列的后面5个数字，每个数字之间隔一个空格。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">16</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">32 </span><span class="hljs-number">64</span> <span class="hljs-number">128</span> <span class="hljs-number">256</span> <span class="hljs-number">512</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">21</span> <span class="hljs-number">34</span> <span class="hljs-number">55</span> <span class="hljs-number">89</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="注意点-v2">注意点</h3><p>参数变量较多，在<code>if</code>条件判断语句中要尽可能的将每个参数都包含进去，减小数据巧合而错判数列类型发生的可能性，博主一开始只通过三个参数就判断了数列的类型，就被特殊情况爆破了。</p><h3 id="完整代码-v3">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predictNext</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> e)</span> </span>{<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> &amp;&amp; b == <span class="hljs-number">0</span> &amp;&amp; c == <span class="hljs-number">0</span> &amp;&amp; d == <span class="hljs-number">0</span> &amp;&amp; e == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> d = b - a;<br>    <span class="hljs-keyword">if</span> (b + d == c &amp;&amp; c + d == d &amp;&amp; d + d == e) {<br>        cout &lt;&lt; e + d &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; e + <span class="hljs-number">2</span> * d &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; e + <span class="hljs-number">3</span> * d<br>            &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; e + <span class="hljs-number">4</span> * d &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; e + <span class="hljs-number">5</span> * d &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    }<br><br>    <span class="hljs-keyword">if</span> (a != <span class="hljs-number">0</span> &amp;&amp; b != <span class="hljs-number">0</span> &amp;&amp; c != <span class="hljs-number">0</span> &amp;&amp; d != <span class="hljs-number">0</span> &amp;&amp; e != <span class="hljs-number">0</span>) {<br>        <span class="hljs-type">int</span> q = b / a;<br>        <span class="hljs-keyword">if</span> (a * q == b &amp;&amp; b * q == c &amp;&amp; c * q == d &amp;&amp; d * q == e) {<br>            <span class="hljs-type">int</span> next = e;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) {<br>                next *= q;<br>                cout &lt;&lt; next &lt;&lt; <span class="hljs-string">" "</span>;<br>            }<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>    }<br><br>    <span class="hljs-keyword">if</span> (a + b == c &amp;&amp; b + c == d &amp;&amp; c + d == e) {<br>        <span class="hljs-type">int</span> x = d, y = e;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) {<br>            <span class="hljs-type">int</span> z = x + y;<br>            cout &lt;&lt; z &lt;&lt; <span class="hljs-string">" "</span>;<br>            x = y;<br>            y = z;<br>        }<br>        cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    }<br><br>    <span class="hljs-type">int</span> x = d, y = e;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) {<br>        <span class="hljs-type">int</span> z = x + y;<br>        cout &lt;&lt; z &lt;&lt; <span class="hljs-string">" "</span>;<br>        x = y;<br>        y = z;<br>    }<br>    cout &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> a, b, c, d, e;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) {<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> &amp;&amp; b == <span class="hljs-number">0</span> &amp;&amp; c == <span class="hljs-number">0</span> &amp;&amp; d == <span class="hljs-number">0</span> &amp;&amp; e == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">predictNext</span>(a, b, c, d, e);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="D题：复原二叉树">D题：复原二叉树</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-6292b2b8" role="button" aria-expanded="false" aria-controls="collapse-6292b2b8">        <div class="fold-arrow">▶</div> D题：复原二叉树      </div>      <div class="fold-collapse collapse" id="collapse-6292b2b8">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>小明在做数据结构的作业，其中一题是给你一棵二叉树的前序遍历和中序遍历结果，要求你写出这棵二叉树的后序遍历结果。</p><h3 id="输入">输入</h3><p>输入包含多组测试数据。每组输入包含两个字符串，分别表示二叉树的前序遍历和中序遍历结果。每个字符串由不重复的大写字母组成。</p><h3 id="输出">输出</h3><p>对于每组输入，输出对应的二叉树的后续遍历结果。</p><h3 id="样例输入">样例输入</h3><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DBACEGF ABCDEFG</span><br><span class="hljs-attribute">BCAD CBAD</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ACBFGED</span><br><span class="hljs-attribute">CDAB</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v3">问题分析</h3><p>题目给前序和中序求后序遍历结果，前序是根左右（NLR），中序是左根右（LNR），也就是说前序遍历的第一个字母是二叉树的根节点，在中序遍历根节点前面的是根的左子树，后面的是右子树，这样我们可以不断找到树的前序遍历和中序遍历结果，从而进行递归。</p><h3 id="完整代码-v4">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(string pre, string in)</span> </span>{<br><span class="hljs-keyword">if</span> (pre.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">char</span> root;<br>root = pre[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> position;<br>position = in.<span class="hljs-built_in">find</span>(root);<br><span class="hljs-built_in">postOrder</span>(pre.<span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>, position), in.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, position));<br><span class="hljs-built_in">postOrder</span>(pre.<span class="hljs-built_in">substr</span>(position + <span class="hljs-number">1</span>), in.<span class="hljs-built_in">substr</span>(position + <span class="hljs-number">1</span>));<br>cout &lt;&lt; root;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>string pre, in;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; pre &gt;&gt; in) {<br><span class="hljs-built_in">postOrder</span>(pre, in);<br>cout &lt;&lt; endl;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="E题：子树的后序遍历">E题：子树的后序遍历</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-358d20c0" role="button" aria-expanded="false" aria-controls="collapse-358d20c0">        <div class="fold-arrow">▶</div> E题：子树的后序遍历      </div>      <div class="fold-collapse collapse" id="collapse-358d20c0">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>给你一颗二叉树的中序和后序遍历序列，请编程输出该二叉树左子树或右子树的后序遍历序列。</p><h3 id="输入">输入</h3><p>占三行，第一行表示二叉树的中序遍历序列，第二行表示后序遍历序列。用大写字母标识结点，二叉树的结点最多26个。<br>第三行是单个字母，L表示要求输出该二叉树的左子树的后序遍历序列，R表示要求输出该二叉树的右子树的后序遍历序列。</p><h3 id="输出">输出</h3><p>按要求输出该二叉树左子树或右子树的后序遍历序列。</p><h3 id="样例输入">样例输入</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">BDCEAFHG<br>DECBHGFA<br><span class="hljs-attribute">R</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">HGF</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v4">问题分析</h3><p>题目给中序和后序遍历，中序是左根右（LNR），后序是左右根（LRN），后序遍历的最后一个即为二叉树的根结点，从而在中序遍历中，根结点前面的是的左子树，后面的是右子树；由于本题输出后序遍历结果，而后序遍历结果题目已经给出，现只需计算左、右子树长度，从后序遍历中提取相应字符串长度即可。</p><h3 id="完整代码-v5">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>string in, post;<br>cin &gt;&gt; in &gt;&gt; post;<br><span class="hljs-type">char</span> side, root;<br>cin &gt;&gt; side;<br>root=post.<span class="hljs-built_in">back</span>();<span class="hljs-comment">// 后序最后一个字符是根节点</span><br><span class="hljs-type">int</span> position = in.<span class="hljs-built_in">find</span>(root);<br><span class="hljs-type">int</span> length;<br><span class="hljs-keyword">if</span> (side == <span class="hljs-string">'R'</span>) { <br>length = in.<span class="hljs-built_in">size</span>() - position - <span class="hljs-number">1</span>;<br>cout &lt;&lt; post.<span class="hljs-built_in">substr</span>(post.<span class="hljs-built_in">size</span>() - length - <span class="hljs-number">1</span>,length) &lt;&lt; endl; }<br><span class="hljs-keyword">else</span> { <br>length = position;<br>cout &lt;&lt; post.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,length); }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="注意">注意</h3><ol><li>提取字符串最后一个字符时用 <code>post.back()</code>或<code>post[post.size() - 1]</code><br>获取最后一个字符（而不是 <code>post[-1]</code>，C++不支持负数索引）。</li><li>有关字符串<code>string</code>的函数：</li></ol><table><thead><tr><th>用法示例</th><th>作用</th><th>注意事项</th></tr></thead><tbody><tr><td><code>str.find()</code></td><td>查找字符或子串</td><td>返回首次出现字符的位置（size_t）</td></tr><tr><td><code>str.substr()</code></td><td>提取字符串</td><td>参数1：起始位置；参数2：长度（可选）</td></tr><tr><td><code>str.size()</code></td><td>获取字符串长度</td><td>返回字符数量（size_t）</td></tr><tr><td><code>str.empty()</code></td><td>判断是否为空</td><td>返回值bool类型</td></tr><tr><td><code>str.front()</code></td><td>获取首字符</td><td>返回char引用</td></tr><tr><td><code>str.back()</code></td><td>获取末尾字符</td><td>返回char引用</td></tr></tbody></table><h2 id="F题：迷宫问题">F题：迷宫问题</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-b481677a" role="button" aria-expanded="false" aria-controls="collapse-b481677a">        <div class="fold-arrow">▶</div> F题：迷宫问题      </div>      <div class="fold-collapse collapse" id="collapse-b481677a">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br>小明只能向上下左右四个方向移动。</p><h3 id="输入">输入</h3><p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br>每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br>接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br>字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br>输入数据保证有且仅有一个起点和终点。</p><h3 id="输出">输出</h3><p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p><h3 id="样例输入">样例输入</h3><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1<br>5 5<br><span class="hljs-section">S-###</span><br><span class="hljs-section">-----</span><br>##---<br>E#---<br>---##<br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="完整代码-v6">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">100</span>;<br><span class="hljs-type">char</span> grid[MAX][MAX];<br><span class="hljs-type">int</span> dist[MAX][MAX];<br><span class="hljs-type">int</span> dx[] = {<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>};<br><span class="hljs-type">int</span> dy[] = {<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>};<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; start, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; end)</span> </span>{<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br>    q.<span class="hljs-built_in">push</span>(start);<br>    dist[start.first][start.second] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) {<br>        <span class="hljs-keyword">auto</span> [x, y] = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (x == end.first &amp;&amp; y == end.second)<br>            <span class="hljs-keyword">return</span> dist[x][y];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) {<br>            <span class="hljs-type">int</span> nx = x + dx[i], ny = y + dy[i];<br>            <span class="hljs-keyword">if</span> (nx &gt;= <span class="hljs-number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class="hljs-number">0</span> &amp;&amp; ny &lt; m &amp;&amp; grid[nx][ny] != <span class="hljs-string">'#'</span> &amp;&amp; dist[nx][ny] == <span class="hljs-number">-1</span>) {<br>                dist[nx][ny] = dist[x][y] + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>({nx, ny});<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) {<br>        cin &gt;&gt; n &gt;&gt; m;<br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; start, end;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) {<br>                cin &gt;&gt; grid[i][j];<br>                <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">'S'</span>) start = {i, j};<br>                <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">'E'</span>) end = {i, j};<br>            }<br>        }<br><br>        <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(dist));<br>        cout &lt;&lt; <span class="hljs-built_in">bfs</span>(start, end) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stack</tag>
      
      <tag>binary tree</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMT-Datastructure-Practice 2</title>
    <link href="/2025/06/18/Data%20structure/CUMT-Datastructure-Practice-2/"/>
    <url>/2025/06/18/Data%20structure/CUMT-Datastructure-Practice-2/</url>
    
    <content type="html"><![CDATA[<h2 id="A题：无向图的深度优先搜索">A题：无向图的深度优先搜索</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-54b8fa86" role="button" aria-expanded="false" aria-controls="collapse-54b8fa86">        <div class="fold-arrow">▶</div> A题：无向图的深度优先搜索      </div>      <div class="fold-collapse collapse" id="collapse-54b8fa86">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>已知一个无向图G的顶点和边，顶点从0依次编号，现在需要深度优先搜索，访问任一邻接顶点时编号小的顶点优先，请编程输出图G的深度优先搜索序列。</p><h3 id="输入">输入</h3><p>第一行是整数m和n（1&lt;m,n&lt;100），分别代表顶点数和边数。后边n行，每行2个数，分别表示一个边的两个顶点。</p><h3 id="输出">输出</h3><p>该图从0号顶点开始的深度优先搜索序列。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析">问题分析</h3><p>使用邻接表存储图结构，读取数据后，为了保证小编号顶点优先访问，使用<code>sort()</code>将每个邻接表中的数据升序排列，函数调用中使用栈实现非递归DFS：<br>将<code>start</code>压入栈内，若有邻接的顶点未被访问，将其输出，使用<code>visited</code>数组记录访问过的顶点并将其压入栈内；若其邻接的顶点均被访问，则回溯，弹出栈顶元素。</p><h3 id="完整代码">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span><span class="hljs-comment">//sort()函数的调用</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//深度优先搜索DFS函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph, vector&lt;<span class="hljs-type">bool</span>&gt; visited, <span class="hljs-type">int</span> start)</span> </span>{<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br>s.<span class="hljs-built_in">push</span>(start);<span class="hljs-comment">//将起始点压入栈内</span><br>visited[start] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记起始点已访问</span><br>cout &lt;&lt; start &lt;&lt; <span class="hljs-string">" "</span>;<br><br><span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>()) {<br><span class="hljs-type">int</span> current = s.<span class="hljs-built_in">top</span>();<br><span class="hljs-type">bool</span> found = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor:graph[current]) {<br><span class="hljs-keyword">if</span> (!visited[neighbor]) {<span class="hljs-comment">//如果邻接顶点未被访问</span><br>visited[neighbor] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记为已访问</span><br>cout &lt;&lt; neighbor &lt;&lt; <span class="hljs-string">" "</span>;<br>s.<span class="hljs-built_in">push</span>(neighbor);<span class="hljs-comment">//将该顶点压入栈内</span><br>found = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记已访问过的顶点</span><br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//跳出循环，优先处理该顶点的邻接顶点</span><br>}<br>}<br><span class="hljs-keyword">if</span> (!found) {<span class="hljs-comment">//若果该顶点没有未被访问的邻接顶点</span><br>s.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出栈顶元素，回溯</span><br>}<br>}<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> m, n;<br>cin &gt;&gt; m &gt;&gt; n;<span class="hljs-comment">//读入定点数和边数</span><br><span class="hljs-type">int</span> a, b;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">graph</span>(m);<br><span class="hljs-comment">//初始化邻接表，大小为m，每个元素是vector&lt;int&gt;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br>cin &gt;&gt; a &gt;&gt; b;<br>graph[a].<span class="hljs-built_in">push_back</span>(b);<br>graph[b].<span class="hljs-built_in">push_back</span>(a);<br><span class="hljs-comment">//用读入的数据构建邻接表，注意两边都要处理</span><br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++) {<br><span class="hljs-built_in">sort</span>(graph[i].<span class="hljs-built_in">begin</span>(), graph[i].<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">//对每个邻接表进行排序，确保DFS优先访问编号小的元素</span><br>}<br><span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(m, <span class="hljs-literal">false</span>)</span></span>;<br><span class="hljs-comment">//初始化访问标记数组，大小为m，初始值为false（未被访问状态）</span><br><span class="hljs-built_in">DFS</span>(graph, visited, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="注释">注释</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; graph<br></code></pre></td></tr></tbody></table></figure><p>相当于一个<code>graph[][]</code>的二维数组，外层的<code>vector</code>存储所有的顶点，内层的<code>vector&lt;int&gt;</code>存储每个顶点的邻接顶点列表</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor:graph[current])<br></code></pre></td></tr></tbody></table></figure><p>这是C++11 引入了范围<code>for</code>循环语法，专门用于遍历容器（如 <code>vector</code>、<code>list</code>等），每次循环时变量会自动依次选取容器中的下一个元素。（注意中间是<code>:</code>）</p><h2 id="B题：最小堆的形成">B题：最小堆的形成</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-854a53f5" role="button" aria-expanded="false" aria-controls="collapse-854a53f5">        <div class="fold-arrow">▶</div> B题：最小堆的形成      </div>      <div class="fold-collapse collapse" id="collapse-854a53f5">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>现在给你n个结点的完全二叉树数组存储序列，请编程调整为最小堆，并输出相应最小堆的存储序列。</p><h3 id="输入">输入</h3><p>第一行是n，第二行是n个结点的完全二叉树数组存储序列。</p><h3 id="输出">输出</h3><p>输出相应最小堆的存储序列。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">53 </span><span class="hljs-number">17</span> <span class="hljs-number">78</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">65</span> <span class="hljs-number">87</span> <span class="hljs-number">9</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">9 </span><span class="hljs-number">17</span> <span class="hljs-number">65</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">78</span> <span class="hljs-number">87</span> <span class="hljs-number">53</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v2">问题分析</h3><p>解决问题前首先要了解什么是完全二叉树、什么是最小堆以及完全二叉树有什么性质。<strong>完全二叉树</strong>就是除了最后一层外，其他层的节点都是满的，并且最后一层的节点都尽可能靠左排列的二叉树（从上到下、从左到右的顺序进行填充）。<strong>最小堆</strong>就是满足节点的值&lt;=其子叶节点的值的完全二叉树（给定完全二叉树求最小堆时不可直接升序排列，其有特定的存储结构）。<br>假设完全二叉树某节点编号为<code>i</code>,则其父节点为<code>i/2</code>，其左子叶节点为<code>2*i</code>，其右子叶节点为<code>2*i+1</code>。而对于最小堆，其根节点为其全局最小值。有了这些简单的前置知识我们就可以开始解决这道题目了。<br>由于<strong>下沉法</strong>相对于<strong>上浮法</strong>具有更高的效率，因此本题先选择自底向上的下沉法递归求解。</p><h3 id="完整代码-v2">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; tree, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> parent)</span> </span>{<br><span class="hljs-comment">//完全二叉树的性质</span><br><span class="hljs-type">int</span> left = <span class="hljs-number">2</span> * parent;<span class="hljs-comment">//左子叶节点</span><br><span class="hljs-type">int</span> right = <span class="hljs-number">2</span> * parent + <span class="hljs-number">1</span>;<span class="hljs-comment">//右子叶节点</span><br><span class="hljs-type">int</span> smallest = parent;<span class="hljs-comment">//初始化最小值为顶点</span><br><span class="hljs-keyword">if</span> (left &lt;= n &amp;&amp; tree[left] &lt; tree[smallest]) {<br>smallest = left;<br>}<br><span class="hljs-keyword">if</span> (right &lt;= n &amp;&amp; tree[right] &lt; tree[smallest]) {<br>smallest = right;<br>}<span class="hljs-comment">//找出三个节点中的最小值，将其交换至父节点</span><br>    <span class="hljs-keyword">if</span>(smallest!=parent){<br><span class="hljs-type">int</span> temp = tree[smallest]; <br>tree[smallest] = tree[parent];<br>tree[parent] = temp;<br><span class="hljs-comment">//交换 也可以使用swap()更简便</span><br><span class="hljs-built_in">down</span>(tree, n, smallest);<br><span class="hljs-comment">//由于最小值上移，原位置需要递归重新确保其子树为最小堆</span><br>}<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br>vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">tree</span>(n<span class="hljs-number">+1</span>);<br><span class="hljs-comment">//提前为tree分配空间为n+1</span><br>    <span class="hljs-comment">//（由于从1开始索引）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) {<br>cin &gt;&gt; tree[i];<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>;i &gt;= <span class="hljs-number">1</span>;i--){<br><span class="hljs-built_in">down</span>(tree, n, i);<br>}<br><span class="hljs-comment">//从最小的非子叶结点开始递归</span><br><span class="hljs-comment">//反向遍历，确保处理父节点是，其子树已是最小堆结构</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++){<br>cout &lt;&lt; tree[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="C题：折半查找次数">C题：折半查找次数</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-33671f20" role="button" aria-expanded="false" aria-controls="collapse-33671f20">        <div class="fold-arrow">▶</div> C题：折半查找次数      </div>      <div class="fold-collapse collapse" id="collapse-33671f20">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>给你一个无重复数的有序序列，如果采用折半查找的方式，对于给定的数，需要比较几次找到，请编程实现。</p><h3 id="输入">输入</h3><p>第一行是N，表示序列中数的个数，序列最长1000，第二行是一个有序序列，第三行是要找的数x。</p><h3 id="输出">输出</h3><p>如果找到x，输出折半比较的次数，否则输出NO。</p><h3 id="样例输入">样例输入</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11</span><br><span class="hljs-attribute">5</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span> <span class="hljs-number">21</span> <span class="hljs-number">37</span> <span class="hljs-number">56</span> <span class="hljs-number">64</span> <span class="hljs-number">75</span> <span class="hljs-number">80</span> <span class="hljs-number">88</span> <span class="hljs-number">92</span><br><span class="hljs-attribute">19</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="完整代码-v3">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        cin &gt;&gt; arr[i];<br>    }<br>    <span class="hljs-type">int</span> x;<br>    cin &gt;&gt; x;<br>    <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>, high = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> found = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (low &lt;= high) {<br>        <span class="hljs-type">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>        cnt++; <br>        <span class="hljs-keyword">if</span> (arr[mid] == x) {<br>            found = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; x) {<br>            low = mid + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">else</span> {<br>            high = mid - <span class="hljs-number">1</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">if</span> (found)<br>        cout &lt;&lt; cnt &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">"NO"</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="D题：N个数的排序">D题：N个数的排序</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-55dc16e1" role="button" aria-expanded="false" aria-controls="collapse-55dc16e1">        <div class="fold-arrow">▶</div> D题：N个数的排序      </div>      <div class="fold-collapse collapse" id="collapse-55dc16e1">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>给你N个自然数，编程输出排序后的这N个数。</p><h3 id="输入">输入</h3><p>第一行是整数的个数N（N&lt;=100）。第二行是用空格隔开的N个数。</p><h3 id="输出">输出</h3><p>排序输出N个数，每个数间用一个空格间隔。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v3">问题分析</h3><p>本题是最基础的的排序问题，这里采用冒泡排序、选择排序、c++封装的<code>sort()</code>排序函数三种方法进行求解。</p><h3 id="完整代码-v4">完整代码</h3><p>冒泡排序算法求解：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubblesort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>{<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; n - i - <span class="hljs-number">1</span>;j++) {<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) {<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>}<br>}<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br>cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>}<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> arr[<span class="hljs-number">100</span>], n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br>cin &gt;&gt; arr[i];<br>}<br><span class="hljs-built_in">bubblesort</span>(arr, n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>选择排序算法求解：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selectsort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>{<br>    <span class="hljs-type">int</span> begin = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (begin &lt; n) {<br>        <span class="hljs-type">int</span> min = INT_MAX; <br>        <span class="hljs-type">int</span> tag = begin; <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = begin; i &lt; n; i++) {<br>            <span class="hljs-keyword">if</span> (arr[i] &lt; min) {<br>                tag = i;<br>                min = arr[tag];<br>            }<br>        }<br>        <span class="hljs-type">int</span> temp = arr[begin];<br>        arr[begin] = arr[tag];<br>        arr[tag] = temp;<br>        begin++; <br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>    }<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> arr[<span class="hljs-number">100</span>], n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br>cin &gt;&gt; arr[i];<br>}<br><span class="hljs-built_in">selectsort</span>(arr, n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>STL封装的 <code>sort()</code>排序函数求解：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>vector &lt;<span class="hljs-type">int</span>&gt; arr;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br>arr.<span class="hljs-built_in">push_back</span>(a);<br>}<br><span class="hljs-built_in">sort</span>(arr.<span class="hljs-built_in">begin</span>(), arr.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) {<br>cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">" "</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>封面来源：<a href="https://www.youtube.com/watch?v=Etpc_-br5rI&amp;t=21s">Tree data structures in 2 minutes</a></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary tree</tag>
      
      <tag>DFS</tag>
      
      <tag>search，graph，sort</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMT-Datastructure-Assignment 1</title>
    <link href="/2025/06/08/Data%20structure/CUMT-Datastructure-Assignment-1/"/>
    <url>/2025/06/08/Data%20structure/CUMT-Datastructure-Assignment-1/</url>
    
    <content type="html"><![CDATA[<h2 id="E题：-约瑟夫问题">E题： 约瑟夫问题</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-c86b7b1f" role="button" aria-expanded="false" aria-controls="collapse-c86b7b1f">        <div class="fold-arrow">▶</div> E题：约瑟夫问题      </div>      <div class="fold-collapse collapse" id="collapse-c86b7b1f">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>编写一个程序求解约瑟夫（Joseph）问题。有n个小孩围成一圈，给他们从1开始依次编号，从编号为1的小孩开始报数，数到第m（0&lt;m&lt;n）个小孩出列，然后从出列的下一个小孩重新开始报数，数到第m个小孩又出列，…，如此反复直到所有的小孩全部出列为止，求整个出列序列。</p><h3 id="输入">输入</h3><p>占一行为n和m（n&lt;100）。</p><h3 id="输出">输出</h3><p>整个出列序列。</p><h3 id="样例输入">样例输入</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">5</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析">问题分析</h3><p>约瑟夫问题是一个经典的使用循环链表的问题，<strong>解题思路</strong>如下：</p><ol><li><strong>创建循环链表</strong>：通过结构体<code>struct</code>创建孩子结点，创建<code>head</code><strong>头结点</strong>和指向当前结点<strong>可供遍历进行移动</strong>的指针<code>cur</code>，再通过<code>for</code>循环遍历，用<code>new</code>运算<strong>动态分配内存</strong>，给每个孩子结点的<code>num</code>域赋上编号的初值，最后<strong>将尾结点的指针域指向头结点</strong>，完成链表的闭合，实现循环链表的功能。</li><li><strong>模拟报数过程</strong>：通过<code>cur</code>指针，计数<code>m-1</code>个孩子后，<code>delete</code><strong>删除下一个结点释放内存</strong>。</li><li><strong>重复过程</strong>：重复执行，直至有<code>cur==cur-&gt;next</code>时，即链表中只剩下一个孩子时终止遍历。</li></ol><h3 id="完整代码">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//定义孩子结点的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Child</span>{<br><span class="hljs-type">int</span> num;<span class="hljs-comment">//孩子编号</span><br>Child* next;<span class="hljs-comment">//指向下一个孩子的指针</span><br>};<br><span class="hljs-comment">//约瑟夫问题解决主函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Joseph</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span> </span>{<br>Child* head = <span class="hljs-keyword">new</span> Child;<span class="hljs-comment">//创建第一个孩子的头结点</span><br>head-&gt;num = <span class="hljs-number">1</span>;<span class="hljs-comment">//头结点的编号</span><br>   head-&gt;next = <span class="hljs-literal">nullptr</span>;<span class="hljs-comment">//定义头结点的指针为空</span><br>Child* cur = head;<span class="hljs-comment">//当前指针指向头结点</span><br><span class="hljs-comment">//构建循环链表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;i++) {<br>Child* node = <span class="hljs-keyword">new</span> Child;<span class="hljs-comment">//创建后续新的孩子结点</span><br>node-&gt;num = i;<span class="hljs-comment">//给后续孩子孩子结点编号</span><br>cur-&gt;next = node;<span class="hljs-comment">//指针指向新的结点</span><br>cur = cur-&gt;next;<span class="hljs-comment">//指针向后移动</span><br>}<span class="hljs-comment">//链表构建完成</span><br>cur-&gt;next = head;<span class="hljs-comment">//将链表首尾相接形成循环</span><br><span class="hljs-keyword">while</span> (cur != cur-&gt;next) {<span class="hljs-comment">//当剩下的孩子不止一个时</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; m;i++) {<span class="hljs-comment">//数m-1个孩子</span><br>cur = cur-&gt;next;<br>}<br>Child* victim = cur-&gt;next;<span class="hljs-comment">//用新的victim记录删除的节点</span><br>cout &lt;&lt; victim-&gt;num &lt;&lt; <span class="hljs-string">" "</span>;<br>cur-&gt;next = victim-&gt;next;<span class="hljs-comment">//跳过第m个结点，指针域进行连接</span><br><span class="hljs-keyword">delete</span> victim;<span class="hljs-comment">//释放内存</span><br>}<br>cout &lt;&lt; cur-&gt;num &lt;&lt; <span class="hljs-string">" "</span>;<br><span class="hljs-keyword">delete</span> cur;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">//执行主函数</span><br><span class="hljs-type">int</span> n, m;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-built_in">Joseph</span>(n, m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="F题：括号配对">F题：括号配对</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-0515e248" role="button" aria-expanded="false" aria-controls="collapse-0515e248">        <div class="fold-arrow">▶</div> F题：括号配对      </div>      <div class="fold-collapse collapse" id="collapse-0515e248">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>设计一个算法利用顺序栈检查用户输入的表达式中括号是否配对（假设表达式中可能含有圆括号()、中括号[]和大括号{}）。</p><h3 id="输入">输入</h3><p>占一行为含有三种括号的表达式（最长100个符号）。</p><h3 id="输出">输出</h3><p>匹配时输出YES，小括号不匹配输出NO1，中括号不匹配时输出NO2，大括号不匹配时输出NO3。</p><h3 id="样例输入">样例输入</h3><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">{([a])}<br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">YES</span><br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v2">问题分析</h3><p>栈"后进先出"(LIFO)的特性正好匹配括号嵌套的顺序，<strong>解题思路</strong>如下：</p><ul><li>如果检测输入为<strong>左括号</strong>，压入栈中；</li><li>如果检测输入为<strong>右括号</strong>：检测栈是否为空、如果相匹配则弹出栈，不匹配则输出错误。</li></ul><h3 id="注意点">注意点</h3><ol><li>执行有关栈的操作，如<code>.top()</code>、<code>.pop()</code>时，需要<strong>先检查栈非空</strong>，否则会导致未定义行为。输入遍历结束后也需要检查是否非空。</li><li>需要考虑输入的<strong>特殊情况</strong>，如只有左、右括号，左括号多余，无输入的情况。</li><li>根据左括号是否匹配进行输出NO，而不是根据右括号匹配判断。</li><li>注意处理<strong>当输入字符为非括号时</strong>的情况。</li></ol><h3 id="完整代码-v2">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">char</span> a;<br>    stack&lt;<span class="hljs-type">char</span>&gt; match;<span class="hljs-comment">//用于存储左括号的栈</span><br>    <span class="hljs-type">bool</span> hasInput = <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记是否有输入</span><br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a) {<br>        hasInput = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-string">'('</span> || a == <span class="hljs-string">'['</span> || a == <span class="hljs-string">'{'</span>) {<br>            match.<span class="hljs-built_in">push</span>(a);<br>        }<span class="hljs-comment">//处理左括号，输入后压进栈内</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-string">')'</span> || a == <span class="hljs-string">']'</span> || a == <span class="hljs-string">'}'</span>) {<br>            <span class="hljs-keyword">if</span> (match.<span class="hljs-built_in">empty</span>()) {<br>                <span class="hljs-keyword">if</span> (a == <span class="hljs-string">')'</span>) cout &lt;&lt; <span class="hljs-string">"NO1"</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-string">']'</span>) cout &lt;&lt; <span class="hljs-string">"NO2"</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-string">'}'</span>) cout &lt;&lt; <span class="hljs-string">"NO3"</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            }<br>            <span class="hljs-type">char</span> top = match.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//查看栈顶元素</span><br>            <span class="hljs-keyword">if</span> ((a == <span class="hljs-string">')'</span> &amp;&amp; top == <span class="hljs-string">'('</span>) ||<br>                (a == <span class="hljs-string">']'</span> &amp;&amp; top == <span class="hljs-string">'['</span>) ||<br>                (a == <span class="hljs-string">'}'</span> &amp;&amp; top == <span class="hljs-string">'{'</span>)) {<br>                match.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//匹配则弹出栈顶</span><br>            }<br>            <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'('</span>) cout &lt;&lt; <span class="hljs-string">"NO1"</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'['</span>) cout &lt;&lt; <span class="hljs-string">"NO2"</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'{'</span>) cout &lt;&lt; <span class="hljs-string">"NO3"</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">if</span> (!hasInput) {<br>        cout &lt;&lt; <span class="hljs-string">"YES"</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>    <span class="hljs-keyword">if</span> (match.<span class="hljs-built_in">empty</span>()) {<br>        cout &lt;&lt; <span class="hljs-string">"YES"</span> &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">else</span> {<br>        <span class="hljs-type">char</span> top = match.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'('</span>) cout &lt;&lt; <span class="hljs-string">"NO1"</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'['</span>) cout &lt;&lt; <span class="hljs-string">"NO2"</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'{'</span>) cout &lt;&lt; <span class="hljs-string">"NO3"</span> &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="G题：后缀表达式">G题：后缀表达式</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-a987457e" role="button" aria-expanded="false" aria-controls="collapse-a987457e">        <div class="fold-arrow">▶</div> G题：后缀表达式      </div>      <div class="fold-collapse collapse" id="collapse-a987457e">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>给出一个中缀表达式，输出该表达式的后缀表达式。</p><h3 id="输入">输入</h3><p>占一行，一个中缀表达式（运算符只有+ - * /，最多1000个字符），输出后缀表达式。</p><h3 id="输出">输出</h3><p>输出后缀表达式。</p><h3 id="样例输入">样例输入</h3><figure class="highlight lisp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-number">56</span><span class="hljs-number">-20</span>)/(<span class="hljs-number">4</span><span class="hljs-number">+2</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">56 </span><span class="hljs-number">20</span> - <span class="hljs-number">4</span> <span class="hljs-number">2</span> + /<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v3">问题分析</h3><p>本题也是栈的经典问题，<strong>解题思路</strong>如下：</p><ol><li><p>根据<strong>先乘除后加减的原则</strong>，<strong>数字划分优先级</strong></p></li><li><p>对不同的输入<strong>分类处理</strong>：</p></li></ol><ul><li><p>若读入的输入是<strong>数字</strong>时，直接将其输出</p></li><li><p>若读入的是<strong>运算符</strong>，则先检查栈内：</p><ul><li><strong>栈空</strong>，则压入栈内；</li><li><strong>栈非空</strong>，则与栈顶元素比较：将栈中<strong>优先级不低于</strong>当前运算符的运算符弹出并输出，然后将当前运算符入栈</li></ul></li></ul><div class="note note-danger">            <ol><li>遇到左括号时<strong>直接入栈</strong>；遇到右括号时，<strong>不断弹出栈顶运算符并输出</strong>，直到遇到左括号（左括号弹出但不输出）</li><li>表达式扫描完毕后，将<strong>栈中剩余运算符全部弹出并输出</strong></li></ol>          </div><h3 id="完整代码-v3">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//定义运算符优先级函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span> </span>{<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'+'</span> || ch == <span class="hljs-string">'-'</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'*'</span> || ch == <span class="hljs-string">'/'</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    stack&lt;<span class="hljs-type">char</span>&gt; cal;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">bool</span> read = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; noskipws &gt;&gt; ch) { <span class="hljs-comment">//不跳过空格读入</span><br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">' '</span> || ch == <span class="hljs-string">'\n'</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(ch)) {<span class="hljs-comment">//如果是数字</span><br>            cout &lt;&lt; ch;<br>            read = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记读入的是数字</span><br>        }<br>        <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">if</span> (read) {<br>                cout &lt;&lt; <span class="hljs-string">" "</span>;<br>                read = <span class="hljs-literal">false</span>;<br>            }<br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'('</span>) {<span class="hljs-comment">//左括号直接入栈</span><br>                cal.<span class="hljs-built_in">push</span>(ch);<br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">')'</span>) {<span class="hljs-comment">//处理读入的右括号</span><br>            <span class="hljs-comment">//弹出栈顶元素直至栈顶为左括号</span><br>                <span class="hljs-keyword">while</span> (!cal.<span class="hljs-built_in">empty</span>() &amp;&amp; cal.<span class="hljs-built_in">top</span>() != <span class="hljs-string">'('</span>) {<br>                    cout &lt;&lt; cal.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">" "</span>;<br>                    cal.<span class="hljs-built_in">pop</span>();<br>                }<br>                <span class="hljs-keyword">if</span> (!cal.<span class="hljs-built_in">empty</span>()) cal.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出左括号但不输出</span><br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'+'</span> || ch == <span class="hljs-string">'-'</span> || ch == <span class="hljs-string">'*'</span> || ch == <span class="hljs-string">'/'</span>) {<br>                <span class="hljs-keyword">while</span> (!cal.<span class="hljs-built_in">empty</span>() &amp;&amp; cal.<span class="hljs-built_in">top</span>() != <span class="hljs-string">'('</span> &amp;&amp; <span class="hljs-built_in">pre</span>(cal.<span class="hljs-built_in">top</span>()) &gt;= <span class="hljs-built_in">pre</span>(ch)) {<br>                    cout &lt;&lt; cal.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">" "</span>;<br>                    cal.<span class="hljs-built_in">pop</span>();<br>                }<br>                cal.<span class="hljs-built_in">push</span>(ch);<br>            }<br>        }<br>    }<br>    <span class="hljs-comment">//弹出栈内所有运算符</span><br>    <span class="hljs-keyword">while</span> (!cal.<span class="hljs-built_in">empty</span>()) {<br>        cout &lt;&lt; cal.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">" "</span>;<br>        cal.<span class="hljs-built_in">pop</span>();<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="注释">注释</h3><p><code>&lt;cctype&gt;</code> 是 C++ 标准库中的头文件，提供了一系列用于字符分类和处理的函数（通常传入的参数类型为 <code>char</code>）。</p><table><thead><tr><th>字符分类函数</th><th>作用</th></tr></thead><tbody><tr><td><code>isalpha()</code></td><td>检查是否是字母（a-z, A-Z）</td></tr><tr><td><code>isdigit()</code></td><td>检查是否是数字（0-9）</td></tr><tr><td><code>isalnum()</code></td><td>检查是否是字母或数字</td></tr><tr><td><code>isspace()</code></td><td>检查是否是空白字符（空格、制表符、换行等）</td></tr><tr><td><code>islower()</code></td><td>检查是否是小写字母</td></tr><tr><td><code>isupper()</code></td><td>检查是否是大写字母</td></tr></tbody></table><table><thead><tr><th>字符转换函数</th><th>作用</th></tr></thead><tbody><tr><td><code>tolower()</code></td><td>将字符转换为小写</td></tr><tr><td><code>toupper()</code></td><td>将字符转换为大写</td></tr></tbody></table><p><strong>字符串翻转函数</strong>：<code>reverse(s.begin(),s.end())</code></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{ <br>    string s=<span class="hljs-string">"hello world"</span>;<br>    <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;s&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><div class="note note-danger">            <p><code>reverse()</code><strong>返回值</strong>为<code>void</code>，而不是<code>string</code></p>          </div><div class="note note-info">            <p>若是想<strong>保留原字符串</strong>：</p><ul><li>复制<strong>原字符串</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string rev=s;<br><span class="hljs-built_in">reverse</span>(rev.<span class="hljs-built_in">begin</span>(),rev.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></tbody></table></figure><ul><li>调用<strong>字符翻转迭代器</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">rev</span><span class="hljs-params">(s.rbegin(),s.rend())</span></span>;<br></code></pre></td></tr></tbody></table></figure>          </div><p><code>noskipws</code>是定义在 <code>&lt;iomanip&gt;</code>头文件中的一个 I/O 操纵符（manipulator），全称是 <strong>“no skip whitespace”</strong>。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> ch;<br>cin &gt;&gt; ch;       <span class="hljs-comment">// 自动跳过空白，读取第一个非空白字符</span><br>cin &gt;&gt; noskipws &gt;&gt; ch;  <span class="hljs-comment">// 不跳过空白，读取下一个字符（可能是空白）</span><br></code></pre></td></tr></tbody></table></figure><p>如果需要恢复默认的跳过空白行为（作用相当于一个开关激活函数）：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cin &gt;&gt; noskipws;  <span class="hljs-comment">// 关闭跳过空白</span><br><span class="hljs-comment">// ... 读取包含空格的输入 ...</span><br>cin &gt;&gt; skipws;    <span class="hljs-comment">// 恢复默认行为</span><br></code></pre></td></tr></tbody></table></figure><p>与<code>cin.get</code>相比更加灵活可控：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cin.<span class="hljs-built_in">get</span>(ch);  <span class="hljs-comment">// 总是读取下一个字符（包括空白），不需要 noskipws</span><br></code></pre></td></tr></tbody></table></figure><h2 id="H题：字符串反转">H题：字符串反转</h2>    <div class="fold">      <div class="fold-title fold-into collapsed" data-toggle="collapse" href="#collapse-e8ab38ca" role="button" aria-expanded="false" aria-controls="collapse-e8ab38ca">        <div class="fold-arrow">▶</div> H题：字符串反转      </div>      <div class="fold-collapse collapse" id="collapse-e8ab38ca">        <div class="fold-content">          <h3 id="题目描述">题目描述</h3><p>小C很喜欢倒着写单词，现在给你一行小C写的文本，你能把每个单词都反转并输出它们吗？</p><h3 id="输入">输入</h3><p>输入包含多组测试样例。第一行为一个整数T，代表测试样例的数量，后面跟着T个测试样例。每个测试样例占一行，包含多个单词。一行最多有1000个字符。</p><h3 id="输出">输出</h3><p>对于每一个测试样例，你应该输出转换后的文本。</p><h3 id="样例输入">样例输入</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br>olleh !dlrow<br><span class="hljs-selector-tag">I</span> ekil <span class="hljs-selector-class">.bulcmca</span><br><span class="hljs-selector-tag">I</span> evol <span class="hljs-selector-class">.mca</span><br></code></pre></td></tr></tbody></table></figure><h3 id="样例输出">样例输出</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hello world!<br><span class="hljs-selector-tag">I</span> like acmclub.<br><span class="hljs-selector-tag">I</span> love acm.<br></code></pre></td></tr></tbody></table></figure>        </div>      </div>    </div><h3 id="问题分析-v4">问题分析</h3><p>本题适合用栈“先进后出”的特性来进行字符串的反转，<strong>解题思路</strong>如下：</p><ol><li>逐个字符处理进行读入，压入栈内</li><li>当遇到<strong>空格</strong>时，将栈内的字符全部弹出</li><li>循环结束后单独处理栈内剩余元素</li></ol><div class="note note-danger">            <p>⚠️注意：是<strong>逐个单词进行逆序</strong>，不是<strong>整段文本所有字母的逆序</strong>，因此需要<strong>根据输入的空格和回车来确定分段点</strong>。</p>          </div><h3 id="完整代码-v4">完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseWords</span><span class="hljs-params">()</span> </span>{<br>    string line;<br>    <span class="hljs-built_in">getline</span>(cin, line);<span class="hljs-comment">//整行读入输入</span><br>    stack&lt;<span class="hljs-type">char</span>&gt; st;<span class="hljs-comment">//用于反转字符的栈</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : line) {<span class="hljs-comment">//遍历每一个字符</span><br>    <span class="hljs-comment">//line可以是字符串也可以是字符数组</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">' '</span>) {<span class="hljs-comment">//遇到空格，开始输出字符</span><br>            <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) {<br>                cout &lt;&lt; st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            }<br>            cout &lt;&lt; <span class="hljs-string">' '</span>;<br>        }<br>        <span class="hljs-keyword">else</span> {<br>            st.<span class="hljs-built_in">push</span>(c);<br>        }<br>    }<br>    <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) {<span class="hljs-comment">//循环结束，处理最后一个没有空格的单词</span><br>        cout &lt;&lt; st.<span class="hljs-built_in">top</span>();<br>        st.<span class="hljs-built_in">pop</span>();<br>    }<br>    cout &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cin.<span class="hljs-built_in">ignore</span>(); <span class="hljs-comment">//忽略换行符</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        <span class="hljs-built_in">reverseWords</span>();<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="注释-v2">注释</h3><table><thead><tr><th>特性</th><th>getline(cin, line)</th><th>cin.get()</th></tr></thead><tbody><tr><td>读取方式</td><td>读取整行直到<code>\n</code></td><td>可读取单个字符或一行</td></tr><tr><td>存储类型</td><td><code>string</code></td><td><code>char</code>或<code>char[]</code></td></tr><tr><td>是否跳过空白字符</td><td>不会跳过（读取所有字符）</td><td>不会跳过（读取所有字符）</td></tr><tr><td>换行符处理</td><td>丢弃’\n’（不存储）</td><td>可以读取’\n’</td></tr></tbody></table><p>封面来源：<a href="https://www.youtube.com/watch?v=DuDz6B4cqVc&amp;t=92s">Data Structures: Crash Course Computer Science #14</a></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linear List，stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About Me and My Blog</title>
    <link href="/2025/06/04/other/About%20Me%20and%20My%20Blog/"/>
    <url>/2025/06/04/other/About%20Me%20and%20My%20Blog/</url>
    
    <content type="html"><![CDATA[<h2 id="Before-The-Blog">Before The Blog</h2><p>  从高中到大学，我一直保持着系统化记笔记的学习习惯。然而，计算机专业的独特性让我一度感到不适应——知识的海洋如此浩瀚，技术栈的广度令人惊叹，传统的应试学习方法在这里显得捉襟见肘。</p><p>  机缘巧合之下我在牛客等招聘网站上看到优秀求职者的技术博客链接，又注意到同学在朋友圈分享的博客文章，相互交换博客链接，相互学习。这些见闻就像一粒种子，在我心中悄然生根发芽。</p><p>  但向来语文表达能力欠佳的我，对于博客撰写还是稍有抵触态度的，只是在CSDN上慢慢开始了尝试，逐渐发现在<strong>AI大模型</strong>语言润色写作的支持下，或许并不困难。甚至这种<strong>将知识咀嚼在二次消化的“反刍”过程</strong>，使我内心产生了巨大的<strong>成就感</strong>！</p><p>这里引用一下我的这位同学博客里的原话：</p><div class="note note-info">            <p>  “无论是解题、写作，还是费曼学习法，其本质都是<strong>通过输出来强化知识</strong>的吸收。当你能够流畅地演绎一道数学题的多种解法，或是将庞杂的知识梳理成清晰的逻辑链条，甚至写成一篇能让读者受益的博客时，你便完成了<strong>从输入到输出</strong>的有效做功。而这一过程，不仅让知识真正内化，更赋予人莫大的成就感。”</p>          </div><div class="note note-info">            <p>  “然而，写作——尤其是高质量的博客写作——远非简单的文字堆砌。回想高中写议论文时的经历，你是否也曾感到一种“言不尽意”的挫败？<strong>灵感的闪现 ≠ 逻辑的成型 ≠ 语言的表达 ≠ 理想的呈现</strong>。很多时候，我们脑海中的所谓“灵感”，不过是零星的思维火花，距离一篇结构严谨、论证充分、兼具深度与可读性的文章，仍有漫长的路要走。”</p>          </div><div class="note note-info">            <p>  “而这，正是博客写作的真正挑战，也是它最珍贵的训练价值——<strong>如何将飘忽的灵感锤炼成扎实的文字，在逻辑与专业之间找到平衡，最终实现清晰而有力的表达。</strong>”</p>          </div><p>  在CSDN的简单试水中，我收获了莫大的自信，遂趁着期末周刚结束，全身心地投入到Github个人博客的创建中来！<br><img src="https://raw.githubusercontent.com/Richard110206/blog-image/main/article/About%20Me%20and%20My%20Blog/About-Me-and-My-Blog.png" alt="截止2025年7月13日CSDN状态图"></p><h2 id="About-Myself">About Myself</h2> <div class="note note-primary">            <p>I am <strong>Li Qinxuan (李沁轩)</strong>, a dedicated Computer Science and Technology scholar at <strong>China University of Mining and Technology (中国矿业大学)</strong>. My academic pursuits encompass diverse domains of computing, with specialized expertise and fervent enthusiasm for <strong>computer vision</strong> and <strong>algorithmic design</strong>.</p>          </div><div style="text-align: center;">  <strong style="color: red; font-size: 2em;">KEEP CODING!!!</strong></div><h3 id="Programming-Languages">Programming Languages</h3><ul><li>C++</li><li>Python</li><li>HTML</li><li>Matlab</li><li>Javascript (still learning)</li></ul><h3 id="Tools">Tools</h3><ul><li><p>Git</p></li><li><p>LaTex</p></li><li><p>Vim</p></li><li><p>Markdown</p></li><li><p>Bash</p><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/cplusplus/cplusplus-original.svg" style="height:40px;width:auto;max-width:40px;" alt="C++"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/python/python-original.svg" style="height:40px;width:auto;max-width:40px;" alt="Python"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg" style="height:40px;width:auto;max-width:40px;" alt="HTML5"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg" style="height:40px;width:auto;max-width:40px;" alt="JavaScript"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/bash/bash-original.svg" style="height:40px;width:auto;max-width:40px;" alt="Bash"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/git/git-original.svg" style="height:40px;width:auto;max-width:40px;" alt="Git"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/latex/latex-original.svg" style="height:40px;width:auto;max-width:40px;" alt="LaTeX"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/linux/linux-original.svg" style="height:40px;width:auto;max-width:40px;" alt="Linux"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/numpy/numpy-original.svg" style="height:40px;width:auto;max-width:40px;" alt="NumPy"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/pytorch/pytorch-original.svg" style="height:40px;width:auto;max-width:40px;" alt="PyTorch"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/matplotlib/matplotlib-original.svg" style="height:40px;width:auto;max-width:40px;" alt="Matplotlib"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/pandas/pandas-original.svg" style="height:40px;width:auto;max-width:40px;" alt="Pandas"></li></ul><h3 id="Currently-Learning">Currently Learning</h3><ul><li>Full-Stack Development</li><li>Python for Data Analysis and Visualization</li><li>Probability and Statistics</li></ul><h3 id="Contact-With-Me">Contact With Me</h3><ul><li><a href="mailto:lqx3222482537@qq.com">lqx3222482537@qq.com</a></li><li><a href="mailto:richardli.11.02.06@gmail.com">richardli.11.02.06@gmail.com</a></li><li><a href="mailto:08241120@cumt.edu.cn">08241120@cumt.edu.cn</a></li></ul><h3 id="My-Blog-in-CSDN">My Blog in CSDN</h3><p><a href="https://blog.csdn.net/2401_86849688?type=blog">不在了情绪的CSDN博客账号</a></p><h3 id="GitHub-Stats">GitHub Stats:</h3><p><strong>I am always an active commiter! Love Coding Everyday!</strong> 🫡😍</p><p><a href="https://github.com/Richard110206">Richard’s Github</a></p><p><a href="https://git.io/streak-stats"><img src="https://streak-stats.demolab.com/?user=Richard110206&amp;theme=radical" alt="GitHub Streak"></a></p><img src="https://ghchart.rshah.org/Richard110206" alt="Li Qinxuan's Github Contributions"><h3 id="Photos">Photos</h3><ul><li>图片多从YouTube和<a href="https://unsplash.com/">unsplash</a>上获取</li><li>使用<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here">PicGo插件</a>和Github实现<strong>图床</strong>功能</li></ul><p>可以参考这篇博客：<a href="https://richard110206.github.io/2025/08/21/Tutorial/Offload-Your-Hexo-Images/">Offload Your Hexo Images</a></p><hr><p>网站使用Github Pages 和 Hexo静态部署，fluid主题，相关链接地址如下：</p><ul><li><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Hexo Fluid 用户手册</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev for hexo theme</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">开始使用 | Hexo Fluid 用户手册</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">配置指南 | Hexo Fluid 用户手册</a></li></ul><p>如果大家有任何疑问，欢迎提issue，也欢迎通过邮箱联系我，我们一起进步！</p><p>封面来源：<a href="https://www.youtube.com/watch?v=GWGbOjlJDkU">Who are you?</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Motivation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Practical Guide to Writing Blogs！</title>
    <link href="/2025/05/29/Tutorial/Markdown%EF%BC%8CPractical%20Guide%20to%20Writing%20Blogs%EF%BC%81/"/>
    <url>/2025/05/29/Tutorial/Markdown%EF%BC%8CPractical%20Guide%20to%20Writing%20Blogs%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h2 id="个人博客搭建指南：">个人博客搭建指南：</h2><p>  正所谓“工欲善其事必先利其器”，博主之前在csdn上写过一些简单，了解也使用过一些简单的markdown语法，但是最近新部署了github博客网站，发现别人的博客网站颜色华丽，排版精美，而我的博客却只有简单的标题、正文、斜体、加粗等简单的界面，煞是寡淡，于是上网学习，发现在markdown中可以添加HTML标签和CSS样式，使得界面变得更加丰富，更加美观，下面是一些markdown的基础语法和进阶玩法，希望对大家有所帮助。</p> <div class="note note-primary">            <p><strong>前言</strong>： 不知大家是否和博主有着相同的疑惑，为什么别的博主写出来的博客排版工整、优雅美观，而自己的博客却毫无出彩之处。原先博主更多的关注点在技术博客的内容上，markdown语法仅仅靠csdn上的“语法说明”自己瞎琢磨的，现在放暑假正好有时间，再温习一下基础语法和学习一下进阶语法，来丰富自己的博客排版！这篇是我的学习笔记，博采众长，希望也能帮到大家！</p>          </div><p>  下面分为两个板块进行阐述：<strong>基础语法</strong>和<strong>进阶语法</strong>，板块一可以帮助你简单入门，版块二则是语法的升级！下面我都在代码块中展示markdown的写法，下面是对应的博客展现形式，大家可以根据自己的需求进行选择和学习！</p><h2 id="一、基础语法">一、基础语法</h2><h4 id="1-标题">1.标题</h4><p>输入<code>#</code>+<code>space（空格）</code>就是不同等级的标题（最多只有六个等级）</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></tbody></table></figure><blockquote><h1>一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><h4 id="四级标题">四级标题</h4><h5 id="五级标题">五级标题</h5><h6 id="六级标题">六级标题</h6></blockquote><h4 id="2-文本样式">2.文本样式</h4><p><strong>斜体</strong>：<code>*</code>+<code>文本内容</code>+<code>*</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mardown">*这是一个斜体*<br></code></pre></td></tr></tbody></table></figure><blockquote><p><em>这是一个斜体</em></p></blockquote><p><strong>加粗</strong>：<code>**</code>+<code>文本内容</code>+<code>**</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mardown">**这里进行了加粗**<br></code></pre></td></tr></tbody></table></figure><blockquote><p><strong>这里进行了加粗</strong></p></blockquote><p><strong>斜体加粗</strong>：<code>***</code>+<code>文本内容</code>+<code>***</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*这里是斜体加粗*</span>**</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><em><strong>这里是斜体加粗</strong></em></p></blockquote><p><strong>删除线</strong>：<code>~~</code>+<code>文本内容</code>+<code>~~</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">~~这里是删除线~~<br></code></pre></td></tr></tbody></table></figure><blockquote><p><s>这里是删除线</s></p></blockquote><p><strong>分割线</strong>：在一行中用三个以上的星号建立一个分隔线，行内不能有其他内容，也可以在星号中间插入空格。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> * <span class="hljs-emphasis">*</span><br></code></pre></td></tr></tbody></table></figure><blockquote><hr></blockquote><h4 id="3-列表">3.列表</h4><p><strong>无序列表</strong>：<code>-</code>或<code>*</code>或<code>+</code>+<code>space（空格）</code>+<code>文本内容</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 无序列表1<br><span class="hljs-bullet">-</span> 无序列表2<br><span class="hljs-bullet">-</span> 无序列表3<br></code></pre></td></tr></tbody></table></figure><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><p><strong>有序列表</strong>：<code>数字序号</code>+<code>.</code>+<code>space（空格）</code>+<code>文本内容</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 有序列表1<br><span class="hljs-bullet">2.</span> 有序列表2<br><span class="hljs-bullet">3.</span> 有序列表3<br></code></pre></td></tr></tbody></table></figure><blockquote><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol></blockquote><p><strong>嵌套列表</strong>：<br><code>-</code>+<code>space</code>+<code>第一级无序列表1</code><br><code>space*2</code>+<code>-</code>+<code>第二级无序列表2</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 嵌套列表1<br><span class="hljs-bullet">  -</span> 嵌套列表2<br><span class="hljs-bullet">    -</span> 嵌套列表3<br></code></pre></td></tr></tbody></table></figure><blockquote><ul><li>嵌套列表1<ul><li>嵌套列表2<ul><li>嵌套列表3</li></ul></li></ul></li></ul></blockquote><h4 id="4-板块">4.板块</h4><p><strong>表格</strong>：<br><code>|</code>+ <code>每列的标题</code>+<code>|</code>+<code>每列的标题</code>+<code>|</code><br><code>|</code>+ <code>----| ----</code>+<code>|</code><br><code>|</code>+ <code>每列内容</code>+<code>|</code>+<code>每列内容</code>+<code>|</code><br><code>|</code>+ <code>每列内容</code>+<code>|</code>+<code>每列内容</code>+<code>|</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|语言类型 |输出函数|<br>| --- | ----------- |<br>|c语言|printf|<br>|c++|cout|<br>|python|print|<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>语言类型</th><th>输出函数</th></tr></thead><tbody><tr><td>c语言</td><td>printf</td></tr><tr><td>c++</td><td>cout</td></tr><tr><td>python</td><td>print</td></tr></tbody></table><p>可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。</p><blockquote><p>:— 设置内容和标题栏居左对齐。<br>:----: 设置内容和标题栏居中对齐。<br>—: 设置内容和标题栏居右对齐。</p></blockquote><p><strong>代码块</strong>：前后三个```即可，可自定义选择编程语言</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"这是一个代码块"</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"这是使用的python语言"</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>cout&lt;&lt;<span class="hljs-string">"这是一个c++的代码块！"</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}<br></code></pre></td></tr></tbody></table></figure><p><strong>链接</strong>：<code>[</code>+<code>超链接显示名</code>+<code>]</code>+<code>(</code>+<code>超链接地址</code>+<code>)</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">不在了情绪的博客主页：[<span class="hljs-string">不在了情绪</span>](<span class="hljs-link">https://blog.csdn.net/2401_86849688?type=blog</span>)<br></code></pre></td></tr></tbody></table></figure><blockquote><p>不在了情绪的博客主页：<a href="https://blog.csdn.net/2401_86849688?type=blog">不在了情绪</a></p></blockquote><p>我们还可以给这个链接添加title，当鼠标悬停在链接上会出现提示。<br><code>[</code>+<code>超链接显示名</code>+<code>]</code>+<code>(</code>+<code>超链接地址</code>+<code>space</code>+<code>"链接title"</code>+<code>)</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">不在了情绪的博客主页：[<span class="hljs-string">不在了情绪</span>](<span class="hljs-link">https://blog.csdn.net/2401_86849688?type=blog "欢迎来到我的博客！"</span>)<br></code></pre></td></tr></tbody></table></figure><blockquote><p>不在了情绪的博客主页：<a href="https://blog.csdn.net/2401_86849688?type=blog" title="欢迎来到我的博客！">不在了情绪</a></p></blockquote><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml">&lt;https://blog.csdn.net/2401_86849688?type=blog&gt;</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://blog.csdn.net/2401_86849688?type=blog">https://blog.csdn.net/2401_86849688?type=blog</a></p></blockquote><p>要显示原本用于格式化 Markdown 文档的字符，需要在字符前面添加反斜杠字符 \</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\<span class="hljs-emphasis">*我想要输出的是两个星号*</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>*我想要输出的是两个星号*</p></blockquote><h2 id="二、进阶用法">二、进阶用法</h2><h4 id="1-字体与背景">1.字体与背景</h4><p><code>&lt;font face="字体"&gt;</code>+<code>文本内容</code>+<code>&lt;/font&gt;</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"黑体"</span>&gt;</span></span>这是黑体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"微软雅黑"</span>&gt;</span></span>这是微软雅黑<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"STCAIYUN"</span>&gt;</span></span>这是华文彩云<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><font face="黑体">这是黑体</font><br><font face="微软雅黑">这是微软雅黑</font><br><font face="STCAIYUN">这是华文彩云</font></p></blockquote><p><code>&lt;font size=字体大小&gt;</code>+<code>文本内容</code>+<code>&lt;/font&gt;</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">4</span>&gt;</span></span>字体大小为4的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">3</span>&gt;</span></span>字体大小为3的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">2</span>&gt;</span></span>字体大小为2的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">1</span>&gt;</span></span>字体大小为1的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><font size="4">字体大小为4的文字</font><br><font size="3">字体大小为3的文字</font><br><font size="2">字体大小为2的文字</font><br><font size="1">字体大小为1的文字</font></p></blockquote><p><code>&lt;font color=“color”&gt;</code>+<code>文本内容</code>+<code>&lt;/font&gt;</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"red"</span>&gt;</span></span>红色的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"green"</span>&gt;</span></span>绿色的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"blue"</span>&gt;</span></span>蓝色的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><font color="red">红色的文本内容</font><br><font color="green">绿色的文本内容</font><br><font color="blue">蓝色的文本内容</font></p></blockquote><p><code>&lt;mark&gt;</code>+<code>文本内容</code>+<code>&lt;/mark&gt;</code>或者<code>==</code>+<code>文本内容</code>+<code>==</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span>高亮显示的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><br>==高亮显示的文本内容==<br></code></pre></td></tr></tbody></table></figure><blockquote><p><mark>高亮显示的文本内容</mark><br>==高亮显示的文本内容==</p></blockquote><p><code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=“color”&gt;&lt;mark&gt;</code>+<code>文本内容</code>+<code>&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"green"</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span>有背景颜色的高亮文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"red"</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span>有背景颜色的高亮文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><blockquote><table><tbody><tr><td bgcolor="green"><mark>有背景颜色的高亮文本内容</mark></td></tr></tbody></table><table><tbody><tr><td bgcolor="red"><mark>有背景颜色的高亮文本内容</mark></td></tr></tbody></table></blockquote><p><code>&lt;u&gt;</code>+<code>文本内容</code>+<code>&lt;/u&gt;</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><u>下划线的文本内容</u></p></blockquote><p><code>&gt;</code>+<code>文本内容</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&gt;引用的文本内容<br></code></pre></td></tr></tbody></table></figure><blockquote><p>引用的文本内容</p></blockquote><h4 id="2-段落缩进">2.段落缩进</h4><p><strong>首行缩进</strong>：</p><ul><li>全角：<code>&amp;emsp;</code>或<code>&amp;#8195;</code></li><li>半角：<code>&amp;ensp;</code>或<code>&amp;#8194;</code></li><li>半角之半角：<code>&amp;nbsp;</code>或<code>&amp;#160;</code></li></ul><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-literal">&amp;emsp;</span><span class="hljs-literal">&amp;emsp;</span>磨刀不误砍柴工，好好学习、反复练习markdown语法，才能在日后的博客撰写中手到擒来，手拿把掐！<br></code></pre></td></tr></tbody></table></figure><blockquote><p>  磨刀不误砍柴工，好好学习、反复练习markdown语法，才能在日后的博客撰写中手到擒来，手拿把掐！</p></blockquote><h4 id="3-公式">3.公式</h4><p>  在markdown中可以使用<code>$$</code>来作为公式块，在其中进行Latex类型公式的输入！</p><p><code>$</code> + <code>公式</code> + <code>$</code></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$x^2-y^2=(x+y)(x-y)$<br>$$(x-y)^2=x^2-2xy+y^2$$<br></code></pre></td></tr></tbody></table></figure><blockquote><p>$x<sup>2-y</sup>2=(x+y)(x-y)$</p></blockquote><blockquote><p>$$(x-y)<sup>2=x</sup>2-2xy+y^2$$</p></blockquote><h4 id="4-表情">4.表情</h4><p>我们可以通过键入<code>emoji shortcodes</code>来输出表情包：<br><code>man</code>:</p><table><thead><tr><th>😄 <code>:smile:</code></th><th>😊 <code>:blush:</code></th><th>😍 <code>:heart_eyes:</code></th></tr></thead><tbody><tr><td>😘 <code>:kissing_heart:</code></td><td>😳 <code>:flushed:</code></td><td>😁 <code>:grin:</code></td></tr><tr><td>😉 <code>:wink:</code></td><td>😜 <code>:tongue_wink:</code></td><td>😀 <code>:grinning:</code></td></tr><tr><td>😴 <code>:sleeping:</code></td><td>😟 <code>:worried:</code></td><td>😮 <code>:open_mouth:</code></td></tr><tr><td>😕 <code>:confused:</code></td><td>😑 <code>:expressionless:</code></td><td>😅 <code>:sweat_smile:</code></td></tr><tr><td>😥 <code>:sad_relieved:</code></td><td>😢 <code>:cry:</code></td><td>😭 <code>:sob:</code></td></tr><tr><td>😂 <code>:joy:</code></td><td>😱 <code>:scream:</code></td><td>😠 <code>:angry:</code></td></tr><tr><td>😡 <code>:rage:</code></td><td>😷 <code>:mask:</code></td><td>😎 <code>:sunglasses:</code></td></tr><tr><td>😇 <code>:innocent:</code></td><td>❤️ <code>:heart:</code></td><td>💔 <code>:broken_heart:</code></td></tr><tr><td>✨ <code>:sparkles:</code></td><td>👍 <code>:thumbsup:</code></td><td>👎 <code>:thumbsdown:</code></td></tr><tr><td>👌 <code>:ok_hand:</code></td><td>✊ <code>:fist:</code></td><td>✌️ <code>:v:</code></td></tr><tr><td>👋 <code>:wave:</code></td><td>🙌 <code>:raised_hands:</code></td><td>🙏 <code>:pray:</code></td></tr><tr><td>👏 <code>:clap:</code></td><td>💪 <code>:muscle:</code></td><td>🏃 <code>:running:</code></td></tr><tr><td>👫 <code>:couple:</code></td><td>👪 <code>:family:</code></td><td>💃 <code>:dancer:</code></td></tr><tr><td>🙅 <code>:no_good:</code></td><td>💁 <code>:info_desk:</code></td><td>👶 <code>:baby:</code></td></tr><tr><td>👩 <code>:woman:</code></td><td>👨 <code>:man:</code></td><td>👵 <code>:grandma:</code></td></tr><tr><td>👴 <code>:grandpa:</code></td><td>👮 <code>:police:</code></td><td>😺 <code>:smile_cat:</code></td></tr><tr><td>🙈 <code>:see_no_evil:</code></td><td>💀 <code>:skull:</code></td><td>💋 <code>:kiss:</code></td></tr><tr><td>👀 <code>:eyes:</code></td><td>👄 <code>:mouth:</code></td><td>💬 <code>:speech_bubble:</code></td></tr></tbody></table><p><code>nature</code>:</p><table><thead><tr><th>☀️ <code>:sunny:</code></th><th>☔ <code>:umbrella:</code></th><th>☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td>❄️ <code>:snowflake:</code></td><td>⛄ <code>:snowman:</code></td><td>⚡ <code>:zap:</code></td></tr><tr><td>🌊 <code>:ocean:</code></td><td>🐱 <code>:cat:</code></td><td>🐶 <code>:dog:</code></td></tr><tr><td>🐭 <code>:mouse:</code></td><td>🐰 <code>:rabbit:</code></td><td>🐯 <code>:tiger:</code></td></tr><tr><td>🐨 <code>:koala:</code></td><td>🐻 <code>:bear:</code></td><td>🐷 <code>:pig:</code></td></tr><tr><td>🐮 <code>:cow:</code></td><td>🐵 <code>:monkey:</code></td><td>🐴 <code>:horse:</code></td></tr><tr><td>🐘 <code>:elephant:</code></td><td>🐼 <code>:panda:</code></td><td>🐍 <code>:snake:</code></td></tr><tr><td>🐦 <code>:bird:</code></td><td>🐤 <code>:chick:</code></td><td>🐧 <code>:penguin:</code></td></tr><tr><td>🐢 <code>:turtle:</code></td><td>🐝 <code>:bee:</code></td><td>🐙 <code>:octopus:</code></td></tr><tr><td>🐠 <code>:fish:</code></td><td>🐳 <code>:whale:</code></td><td>🐬 <code>:dolphin:</code></td></tr><tr><td>🌸 <code>:cherry_blossom:</code></td><td>🌹 <code>:rose:</code></td><td>🌻 <code>:sunflower:</code></td></tr><tr><td>🍁 <code>:maple_leaf:</code></td><td>🍄 <code>:mushroom:</code></td><td>🌵 <code>:cactus:</code></td></tr><tr><td>🌴 <code>:palm_tree:</code></td><td>🌲 <code>:tree:</code></td><td>🌞 <code>:sun_with_face:</code></td></tr><tr><td>🌙 <code>:moon:</code></td><td>🌎 <code>:earth:</code></td><td>🌋 <code>:volcano:</code></td></tr></tbody></table><p><code>objects</code>:</p><table><thead><tr><th>🎍 <code>:bamboo:</code></th><th>💝 <code>:gift_heart:</code></th><th>🎒 <code>:school_satchel:</code></th></tr></thead><tbody><tr><td>🎓 <code>:mortar_board:</code></td><td>🎏 <code>:flags:</code></td><td>🎆 <code>:fireworks:</code></td></tr><tr><td>🎇 <code>:sparkler:</code></td><td>🎃 <code>:jack_o_lantern:</code></td><td>👻 <code>:ghost:</code></td></tr><tr><td>🎅 <code>:santa:</code></td><td>🎄 <code>:christmas_tree:</code></td><td>🎁 <code>:gift:</code></td></tr><tr><td>🔔 <code>:bell:</code></td><td>🎉 <code>:tada:</code></td><td>🎊 <code>:confetti_ball:</code></td></tr><tr><td>🎈 <code>:balloon:</code></td><td>📷 <code>:camera:</code></td><td>🎥 <code>:movie_camera:</code></td></tr><tr><td>💻 <code>:computer:</code></td><td>📺 <code>:tv:</code></td><td>📱 <code>:iphone:</code></td></tr><tr><td>☎️ <code>:phone:</code></td><td>📞 <code>:telephone_receiver:</code></td><td>💡 <code>:bulb:</code></td></tr><tr><td>🔋 <code>:battery:</code></td><td>📧 <code>:email:</code></td><td>✉️ <code>:envelope:</code></td></tr><tr><td>🛀 <code>:bath:</code></td><td>🚿 <code>:shower:</code></td><td>🚽 <code>:toilet:</code></td></tr><tr><td>🔧 <code>:wrench:</code></td><td>🔨 <code>:hammer:</code></td><td>💰 <code>:moneybag:</code></td></tr><tr><td>💵 <code>:dollar:</code></td><td>💳 <code>:credit_card:</code></td><td>✂️ <code>:scissors:</code></td></tr><tr><td>📌 <code>:pushpin:</code></td><td>📎 <code>:paperclip:</code></td><td>✏️ <code>:pencil2:</code></td></tr><tr><td>📕 <code>:closed_book:</code></td><td>📚 <code>:books:</code></td><td>🔖 <code>:bookmark:</code></td></tr><tr><td>⚽ <code>:soccer:</code></td><td>🏀 <code>:basketball:</code></td><td>🎾 <code>:tennis:</code></td></tr><tr><td>🏊 <code>:swimmer:</code></td><td>🎮 <code>:video_game:</code></td><td>🎬 <code>:clapper:</code></td></tr><tr><td>📝 <code>:memo:</code></td><td>🎤 <code>:microphone:</code></td><td>🎧 <code>:headphones:</code></td></tr><tr><td>👞 <code>:shoe:</code></td><td>👠 <code>:high_heel:</code></td><td>💄 <code>:lipstick:</code></td></tr><tr><td>👕 <code>:tshirt:</code></td><td>👖 <code>:jeans:</code></td><td>👙 <code>:bikini:</code></td></tr><tr><td>👑 <code>:crown:</code></td><td>👓 <code>:eyeglasses:</code></td><td>☕ <code>:coffee:</code></td></tr><tr><td>🍵 <code>:tea:</code></td><td>🍺 <code>:beer:</code></td><td>🍕 <code>:pizza:</code></td></tr><tr><td>🍔 <code>:hamburger:</code></td><td>🍟 <code>:fries:</code></td><td>🍣 <code>:sushi:</code></td></tr><tr><td>🍚 <code>:rice:</code></td><td>🍰 <code>:cake:</code></td><td>🍫 <code>:chocolate_bar:</code></td></tr><tr><td>🍎 <code>:apple:</code></td><td>🍌 <code>:banana:</code></td><td>🍅 <code>:tomato:</code></td></tr></tbody></table><p><code>place</code>:</p><table><thead><tr><th>🏠 <code>:house:</code></th><th>🏡 <code>:house_with_garden:</code></th><th>🏫 <code>:school:</code></th></tr></thead><tbody><tr><td>🏢 <code>:office:</code></td><td>🏣 <code>:post_office:</code></td><td>🏥 <code>:hospital:</code></td></tr><tr><td>🏦 <code>:bank:</code></td><td>🏪 <code>:convenience_store:</code></td><td>🏨 <code>:hotel:</code></td></tr><tr><td>💒 <code>:wedding:</code></td><td>⛪ <code>:church:</code></td><td>🌇 <code>:city_sunrise:</code></td></tr><tr><td>🏯 <code>:japanese_castle:</code></td><td>🏰 <code>:european_castle:</code></td><td>⛺ <code>:tent:</code></td></tr><tr><td>🏭 <code>:factory:</code></td><td>🗼 <code>:tokyo_tower:</code></td><td>🗻 <code>:mount_fuji:</code></td></tr><tr><td>🌄 <code>:sunrise_over_mountains:</code></td><td>🌅 <code>:sunrise:</code></td><td>🌈 <code>:rainbow:</code></td></tr><tr><td>🎡 <code>:ferris_wheel:</code></td><td>⛲ <code>:fountain:</code></td><td>🎢 <code>:roller_coaster:</code></td></tr><tr><td>🚢 <code>:ship:</code></td><td>🚤 <code>:speedboat:</code></td><td>⛵ <code>:sailboat:</code></td></tr><tr><td>🚀 <code>:rocket:</code></td><td>✈️ <code>:airplane:</code></td><td>🚁 <code>:helicopter:</code></td></tr><tr><td>🚂 <code>:train:</code></td><td>🚊 <code>:tram:</code></td><td>🚲 <code>:bike:</code></td></tr><tr><td>🚗 <code>:car:</code></td><td>🚕 <code>:taxi:</code></td><td>🚌 <code>:bus:</code></td></tr><tr><td>🚓 <code>:police_car:</code></td><td>🚑 <code>:ambulance:</code></td><td>🚚 <code>:truck:</code></td></tr><tr><td>🚦 <code>:traffic_light:</code></td><td>⚠️ <code>:warning:</code></td><td>🚧 <code>:construction:</code></td></tr><tr><td>🏧 <code>:atm:</code></td><td>🎫 <code>:ticket:</code></td><td>♨️ <code>:hotsprings:</code></td></tr></tbody></table><p><code>number</code>&amp;&amp; <code>directions</code>:</p><table><thead><tr><th>1️⃣ <code>:one:</code></th><th>2️⃣ <code>:two:</code></th><th>3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td>4️⃣ <code>:four:</code></td><td>5️⃣ <code>:five:</code></td><td>6️⃣ <code>:six:</code></td></tr><tr><td>7️⃣ <code>:seven:</code></td><td>8️⃣ <code>:eight:</code></td><td>9️⃣ <code>:nine:</code></td></tr><tr><td>🔟 <code>:keycap_ten:</code></td><td>0️⃣ <code>:zero:</code></td><td>#️⃣ <code>:hash:</code></td></tr><tr><td>◀️ <code>:arrow_backward:</code></td><td>⬇️ <code>:arrow_down:</code></td><td>▶️ <code>:arrow_forward:</code></td></tr><tr><td>⬅️ <code>:arrow_left:</code></td><td>➡️ <code>:arrow_right:</code></td><td>⬆️ <code>:arrow_up:</code></td></tr><tr><td>🔄 <code>:arrows_counterclockwise:</code></td><td>ℹ️ <code>:information_source:</code></td><td>🆗 <code>:ok:</code></td></tr><tr><td>🆕 <code>:new:</code></td><td>🆙 <code>:up:</code></td><td>🆒 <code>:cool:</code></td></tr><tr><td>🚻 <code>:restroom:</code></td><td>🚹 <code>:mens:</code></td><td>🚺 <code>:womens:</code></td></tr><tr><td>♿ <code>:wheelchair:</code></td><td>🚇 <code>:metro:</code></td><td>🚫 <code>:no_entry_sign:</code></td></tr><tr><td>⛔ <code>:no_entry:</code></td><td>♻️ <code>:recycle:</code></td><td>🕐 <code>:clock1:</code></td></tr><tr><td>❌ <code>:x:</code></td><td>❗ <code>:exclamation:</code></td><td>⭕ <code>:o:</code></td></tr><tr><td>➕ <code>:plus:</code></td><td>➖ <code>:minus:</code></td><td>✔️ <code>:check_mark:</code></td></tr><tr><td>🔘 <code>:radio_button:</code></td><td>🔗 <code>:link:</code></td><td>✅ <code>:white_check_mark:</code></td></tr><tr><td>⚫ <code>:black_circle:</code></td><td>⚪ <code>:white_circle:</code></td><td>🔴 <code>:red_circle:</code></td></tr><tr><td>🔵 <code>:blue_circle:</code></td><td>©️ <code>:copyright:</code></td><td>®️ <code>:registered:</code></td></tr><tr><td>™️ <code>:tm:</code></td><td>🔶 <code>:orange_diamond:</code></td><td>🔷 <code>:blue_diamond:</code></td></tr></tbody></table><h4 id="5-提示">5.提示</h4><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">{%note 参数%} 文字内容 {%endnote%}<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>default</code></td><td>默认样式（灰色）</td></tr><tr><td><code>primary</code></td><td>主要样式（蓝色）</td></tr><tr><td><code>info</code></td><td>信息提示（浅蓝色）</td></tr><tr><td><code>success</code></td><td>成功提示（绿色）</td></tr><tr><td><code>warning</code></td><td>警告提示（黄色）</td></tr><tr><td><code>danger</code></td><td>危险/错误（红色）</td></tr></tbody></table><ul><li><code>default</code></li></ul><div class="note note-info">            <p>默认！</p>          </div><ul><li><code>primary</code></li></ul><div class="note note-primary">            <p>主要！</p>          </div><ul><li><code>info</code></li></ul><div class="note note-info">            <p>提示！</p>          </div><ul><li><code>success</code></li></ul><div class="note note-success">            <p>成功！</p>          </div><ul><li><code>warning</code></li></ul><div class="note note-warning">            <p>警告！</p>          </div><ul><li><code>danger</code></li></ul><div class="note note-danger">            <p>危险！</p>          </div><p>恭喜！ 看到这里你已经掌握了 Markdown 的核心语法和进阶技巧！</p><p>✨ 小建议：</p><p>精致排版 + 优质内容 = 王炸组合 💥 清晰的结构和美观的格式会让你的博客更专业、更吸睛！</p><p>立刻动手写一篇吧！ 从今天开始，用 Markdown 打造你的技术分享博客，下一个顶尖技术博主就是你！ 🚀</p><p>参考文献：<br><a href="https://blog.csdn.net/weixin_69553582/article/details/142665344">Markdown 语法详解大全(超级版)（一）——标题、字体文本式样、颜色、列表、版块区块、缩进、列表项</a><br><a href="https://blog.csdn.net/weixin_69553582/article/details/142711165">Markdown 语法详解大全(超级版)（二）——图片、表格、段落、转义字符、内嵌、注释、缩进、公式</a><br><a href="https://blog.csdn.net/weixin_69553582/article/details/142719257">Markdown 语法详解大全(超级版)（三）——甘特图语法详解</a><br><a href="https://blog.csdn.net/weixin_69553582/article/details/140277283">Markdown 语法详解大全(超级版)（四）——Markdown 使用 Emoji 表情 （附：表情符号简码列表）</a></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>blogger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World！</title>
    <link href="/2025/05/01/other/hello-world/"/>
    <url>/2025/05/01/other/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post-创建新文章">Create a new post(创建新文章)</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-启动本地服务器">Run server(启动本地服务器)</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></tbody></table></figure><p>会出现</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop<br></code></pre></td></tr></tbody></table></figure><p>这样就可以在本地服务器上进行测试了！</p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Wipe-cache-partition-清理缓存">Wipe cache partition(清理缓存)</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></tbody></table></figure><h3 id="Generate-static-files-生成静态文件">Generate static files(生成静态文件)</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites-部署到github远程站点">Deploy to remote sites(部署到github远程站点)</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Integrate-将上述步骤简化为一个命令行操作">Integrate (将上述步骤简化为一个命令行操作)</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></tbody></table></figure><p>封面来源：<a href="https://www.youtube.com/watch?v=u7JMhVI7taQ&amp;list=RDu7JMhVI7taQ&amp;start_radio=1">Alan Walker &amp; Torine - Hello World (Official Music Video)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
