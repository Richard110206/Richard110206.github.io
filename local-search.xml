<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CUMT Datastructure assignment 1</title>
    <link href="/2025/06/08/CUMT-Datastructure-assignment-1/"/>
    <url>/2025/06/08/CUMT-Datastructure-assignment-1/</url>
    
    <content type="html"><![CDATA[<h3 id="E题：-约瑟夫问题"><a href="#E题：-约瑟夫问题" class="headerlink" title="E题： 约瑟夫问题"></a>E题： 约瑟夫问题</h3><h6 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h6><p>编写一个程序求解约瑟夫（Joseph）问题。有n个小孩围成一圈，给他们从1开始依次编号，从编号为1的小孩开始报数，数到第m（0&lt;m&lt;n）个小孩出列，然后从出列的下一个小孩重新开始报数，数到第m个小孩又出列，…，如此反复直到所有的小孩全部出列为止，求整个出列序列。</p><h6 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h6><p>占一行为n和m（n&lt;100）。</p><h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><p>整个出列序列。</p><h6 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h6 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>  约瑟夫问题是一个经典的使用循环链表的问题，<strong>解题思路</strong>如下：  </p><ol><li>创建循环链表：通过结构体<code>struct</code>创建孩子结点，创建<code>head</code>头结点和指向当前结点可供遍历进行移动的指针<code>cur</code>，再通过<code>for</code>循环遍历，用<code>new</code>运算动态分配内存，给每个孩子结点的<code>num</code>域赋上编号的初值，最后将尾结点的指针域指向头结点，完成链表的闭合，实现循环链表的功能。</li><li>模拟报数过程：通过<code>cur</code>指针，计数<code>m-1</code>个孩子后，<code>delete</code>删除下一个结点释放内存。</li><li>重复过程：重复执行，直至有<code>cur==cur-&gt;next</code>时，即链表中只剩下一个孩子时终止遍历。</li></ol><h6 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//定义孩子结点的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Child</span>&#123;<br><span class="hljs-type">int</span> num;<span class="hljs-comment">//孩子编号</span><br>Child* next;<span class="hljs-comment">//指向下一个孩子的指针</span><br>&#125;;<br><span class="hljs-comment">//约瑟夫问题解决主函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Joseph</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span> </span>&#123;<br>Child* head = <span class="hljs-keyword">new</span> Child;<span class="hljs-comment">//创建第一个孩子的头结点</span><br>head-&gt;num = <span class="hljs-number">1</span>;<span class="hljs-comment">//头结点的编号</span><br>   head-&gt;next = <span class="hljs-literal">nullptr</span>;<span class="hljs-comment">//定义头结点的指针为空</span><br>Child* cur = head;<span class="hljs-comment">//当前指针指向头结点</span><br><span class="hljs-comment">//构建循环链表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;i++) &#123;<br>Child* node = <span class="hljs-keyword">new</span> Child;<span class="hljs-comment">//创建后续新的孩子结点</span><br>node-&gt;num = i;<span class="hljs-comment">//给后续孩子孩子结点编号</span><br>cur-&gt;next = node;<span class="hljs-comment">//指针指向新的结点</span><br>cur = cur-&gt;next;<span class="hljs-comment">//指针向后移动</span><br>&#125;<span class="hljs-comment">//链表构建完成</span><br>cur-&gt;next = head;<span class="hljs-comment">//将链表首尾相接形成循环</span><br><span class="hljs-keyword">while</span> (cur != cur-&gt;next) &#123;<span class="hljs-comment">//当剩下的孩子不止一个时</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; m;i++) &#123;<span class="hljs-comment">//数m-1个孩子</span><br>cur = cur-&gt;next;<br>&#125;<br>Child* victim = cur-&gt;next;<span class="hljs-comment">//用新的victim记录删除的节点</span><br>cout &lt;&lt; victim-&gt;num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cur-&gt;next = victim-&gt;next;<span class="hljs-comment">//跳过第m个结点，指针域进行连接</span><br><span class="hljs-keyword">delete</span> victim;<span class="hljs-comment">//释放内存</span><br>&#125;<br>cout &lt;&lt; cur-&gt;num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">delete</span> cur;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//执行主函数</span><br><span class="hljs-type">int</span> n, m;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-built_in">Joseph</span>(n, m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="F题：括号配对"><a href="#F题：括号配对" class="headerlink" title="F题：括号配对"></a>F题：括号配对</h3><h6 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h6><p>设计一个算法利用顺序栈检查用户输入的表达式中括号是否配对（假设表达式中可能含有圆括号()、中括号[]和大括号{}）。</p><h6 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h6><p>占一行为含有三种括号的表达式（最长100个符号）。</p><h6 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h6><p>匹配时输出YES，小括号不匹配输出NO1，中括号不匹配时输出NO2，大括号不匹配时输出NO3。</p><h6 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;([a])&#125;<br></code></pre></td></tr></table></figure><h6 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">YES</span><br></code></pre></td></tr></table></figure><h5 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h5><p>栈”后进先出”(LIFO)的特性正好匹配括号嵌套的顺序，<strong>解题思路</strong>如下：</p><ol><li>如果检测输入为左括号，压入栈中；如果检测输入为右括号：检测栈是否为空、如果相匹配则弹出栈，不匹配则输出错误。</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>执行有关栈的操作，如<code>.top()</code>、<code>.pop()</code>时，需要先检查栈非空，否则会导致未定义行为。输入遍历结束后也需要检查是否非空。</li><li>需要考虑输入的特殊情况，如只有左、右括号，左括号多余，无输入的情况。</li><li>根据左括号是否匹配进行输出NO，而不是根据右括号匹配判断。</li><li>注意处理当输入字符为非括号时的情况。</li></ol><h6 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> a;<br>    stack&lt;<span class="hljs-type">char</span>&gt; match;<span class="hljs-comment">//用于存储左括号的栈</span><br>    <span class="hljs-type">bool</span> hasInput = <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记是否有输入</span><br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a) &#123;<br>        hasInput = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;(&#x27;</span> || a == <span class="hljs-string">&#x27;[&#x27;</span> || a == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>            match.<span class="hljs-built_in">push</span>(a);<br>        &#125;<span class="hljs-comment">//处理左括号，输入后压进栈内</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;)&#x27;</span> || a == <span class="hljs-string">&#x27;]&#x27;</span> || a == <span class="hljs-string">&#x27;&#125;&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (match.<span class="hljs-built_in">empty</span>()) &#123;<br>                <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;)&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO1&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;]&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO2&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;&#125;&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO3&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-type">char</span> top = match.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//查看栈顶元素</span><br>            <span class="hljs-keyword">if</span> ((a == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; top == <span class="hljs-string">&#x27;(&#x27;</span>) ||<br>                (a == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; top == <span class="hljs-string">&#x27;[&#x27;</span>) ||<br>                (a == <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp; top == <span class="hljs-string">&#x27;&#123;&#x27;</span>)) &#123;<br>                match.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//匹配则弹出栈顶</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (top == <span class="hljs-string">&#x27;(&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO1&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">&#x27;[&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO2&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">&#x27;&#123;&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO3&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!hasInput) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (match.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">char</span> top = match.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-keyword">if</span> (top == <span class="hljs-string">&#x27;(&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO1&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">&#x27;[&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO2&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">&#x27;&#123;&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO3&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="G题：后缀表达式"><a href="#G题：后缀表达式" class="headerlink" title="G题：后缀表达式"></a>G题：后缀表达式</h3><h6 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h6><p>给出一个中缀表达式，输出该表达式的后缀表达式。</p><h6 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h6><p>占一行，一个中缀表达式（运算符只有+ - * &#x2F;，最多1000个字符），输出后缀表达式。</p><h6 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h6><p>输出后缀表达式。</p><h6 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-number">56</span><span class="hljs-number">-20</span>)/(<span class="hljs-number">4</span><span class="hljs-number">+2</span>)<br></code></pre></td></tr></table></figure><h6 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">56 </span><span class="hljs-number">20</span> - <span class="hljs-number">4</span> <span class="hljs-number">2</span> + /<br></code></pre></td></tr></table></figure><h5 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h5><p>本题也是栈的经典问题，<strong>解题思路</strong>如下：</p><ol><li>根据先乘除后加减的原则，数字划分优先级</li><li>当读入的输入时数字时，直接将其输出，若读入的是运算符，则先检查栈内：栈空，则压入栈内；栈非空，则与栈顶元素比较：将栈中优先级不低于当前运算符的运算符弹出并输出，然后将当前运算符入栈</li></ol><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ol><li>遇到左括号时直接入栈，遇到右括号时，不断弹出栈顶运算符并输出，直到遇到左括号（左括号弹出但不输出）</li><li>表达式扫描完毕后，将栈中剩余运算符全部弹出并输出</li></ol><h6 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//定义运算符优先级函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;+&#x27;</span> || ch == <span class="hljs-string">&#x27;-&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;*&#x27;</span> || ch == <span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    stack&lt;<span class="hljs-type">char</span>&gt; cal;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">bool</span> read = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; noskipws &gt;&gt; ch) &#123; <span class="hljs-comment">//不跳过空格读入</span><br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27; &#x27;</span> || ch == <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(ch)) &#123;<span class="hljs-comment">//如果是数字</span><br>            cout &lt;&lt; ch;<br>            read = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记读入的是数字</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (read) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                read = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<span class="hljs-comment">//左括号直接入栈</span><br>                cal.<span class="hljs-built_in">push</span>(ch);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<span class="hljs-comment">//处理读入的右括号</span><br>            <span class="hljs-comment">//弹出栈顶元素直至栈顶为左括号</span><br>                <span class="hljs-keyword">while</span> (!cal.<span class="hljs-built_in">empty</span>() &amp;&amp; cal.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                    cout &lt;&lt; cal.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                    cal.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!cal.<span class="hljs-built_in">empty</span>()) cal.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出左括号但不输出</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;+&#x27;</span> || ch == <span class="hljs-string">&#x27;-&#x27;</span> || ch == <span class="hljs-string">&#x27;*&#x27;</span> || ch == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                <span class="hljs-keyword">while</span> (!cal.<span class="hljs-built_in">empty</span>() &amp;&amp; cal.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; <span class="hljs-built_in">pre</span>(cal.<span class="hljs-built_in">top</span>()) &gt;= <span class="hljs-built_in">pre</span>(ch)) &#123;<br>                    cout &lt;&lt; cal.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                    cal.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>                cal.<span class="hljs-built_in">push</span>(ch);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//弹出栈内所有运算符</span><br>    <span class="hljs-keyword">while</span> (!cal.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; cal.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cal.<span class="hljs-built_in">pop</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><figure class="highlight plaintext"><figcaption><span>C++ 标准库中的头文件，提供了一系列用于字符分类和处理的函数（通常传入的参数类型为```char```）。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs <cctype>```是">字符分类函数     | 作用<br>-------- | -----<br>```isalpha()```| 检查是否是字母（a-z, A-Z）<br>```isdigit()```| 检查是否是数字（0-9）<br>```isalnum()```| 检查是否是字母或数字<br>```isspace()```| 检查是否是空白字符（空格、制表符、换行等）<br>```islower() ```| 检查是否是小写字母<br>```isupper() ```|  检查是否是大写字母<br><br>字符转换函数     | 作用<br>-------- | -----<br>```tolower()```| 将字符转换为小写<br>```toupper() ```| 将字符转换为大写<br><br>```noskipws```是定义在 ```&lt;iomanip&gt;```头文件中的一个 I/O 操纵符（manipulator），全称是 **&quot;no skip whitespace&quot;**。<br>```cpp<br>char ch;<br>cin &gt;&gt; ch;       // 自动跳过空白，读取第一个非空白字符<br>cin &gt;&gt; noskipws &gt;&gt; ch;  // 不跳过空白，读取下一个字符（可能是空白）<br></code></pre></td></tr></table></figure><p>如果需要恢复默认的跳过空白行为（作用相当于一个开关激活函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cin &gt;&gt; noskipws;  <span class="hljs-comment">// 关闭跳过空白</span><br><span class="hljs-comment">// ... 读取包含空格的输入 ...</span><br>cin &gt;&gt; skipws;    <span class="hljs-comment">// 恢复默认行为</span><br></code></pre></td></tr></table></figure><p>与<strong>cin.get</strong>相比更加灵活可控：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cin.<span class="hljs-built_in">get</span>(ch);  <span class="hljs-comment">// 总是读取下一个字符（包括空白），不需要 noskipws</span><br></code></pre></td></tr></table></figure><h3 id="H题：字符串反转"><a href="#H题：字符串反转" class="headerlink" title="H题：字符串反转"></a>H题：字符串反转</h3><h6 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h6><p>小C很喜欢倒着写单词，现在给你一行小C写的文本，你能把每个单词都反转并输出它们吗？</p><h6 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h6><p>输入包含多组测试样例。第一行为一个整数T，代表测试样例的数量，后面跟着T个测试样例。每个测试样例占一行，包含多个单词。一行最多有1000个字符。</p><h6 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h6><p>对于每一个测试样例，你应该输出转换后的文本。</p><h6 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br>olleh !dlrow<br><span class="hljs-selector-tag">I</span> ekil <span class="hljs-selector-class">.bulcmca</span><br><span class="hljs-selector-tag">I</span> evol <span class="hljs-selector-class">.mca</span><br></code></pre></td></tr></table></figure><h6 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hello world!<br><span class="hljs-selector-tag">I</span> like acmclub.<br><span class="hljs-selector-tag">I</span> love acm.<br></code></pre></td></tr></table></figure><h5 id="问题分析-3"><a href="#问题分析-3" class="headerlink" title="问题分析"></a>问题分析</h5><p>本题适合用栈“先进后出”的特性来进行字符串的反转，<strong>解题思路</strong>如下：</p><ol><li>逐个字符处理进行读入，压入栈内</li><li>当遇到空格时，将栈内的字符全部弹出</li><li>循环结束后单独处理栈内剩余元素</li></ol><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><ol><li>是逐个单词进行逆序，不是整段文本所有字母的逆序，因此需要根据输入的空格和回车来确定分段点。</li></ol><h6 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseWords</span><span class="hljs-params">()</span> </span>&#123;<br>    string line;<br>    <span class="hljs-built_in">getline</span>(cin, line);<span class="hljs-comment">//整行读入输入</span><br>    stack&lt;<span class="hljs-type">char</span>&gt; st;<span class="hljs-comment">//用于反转字符的栈</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : line) &#123;<span class="hljs-comment">//遍历每一个字符</span><br>    <span class="hljs-comment">//line可以是字符串也可以是字符数组</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<span class="hljs-comment">//遇到空格，开始输出字符</span><br>            <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) &#123;<br>                cout &lt;&lt; st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            st.<span class="hljs-built_in">push</span>(c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) &#123;<span class="hljs-comment">//循环结束，处理最后一个没有空格的单词</span><br>        cout &lt;&lt; st.<span class="hljs-built_in">top</span>();<br>        st.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cin.<span class="hljs-built_in">ignore</span>(); <span class="hljs-comment">//忽略换行符</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">reverseWords</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h5><table><thead><tr><th>特性</th><th><code>getline(cin, line) </code></th><th><code>cin.get()</code></th></tr></thead><tbody><tr><td>读取方式</td><td>读取整行直到’\n’</td><td>可读取单个字符或一行</td></tr><tr><td>存储类型</td><td><code>string</code></td><td><code>char</code>或<code>char[]</code></td></tr><tr><td>是否跳过空白字符</td><td>不会跳过（读取所有字符）</td><td>不会跳过（读取所有字符）</td></tr><tr><td>换行符处理</td><td>丢弃<code>&#39;\n&#39;</code>（不存储）</td><td>可以读取<code>&#39;\n&#39;</code></td></tr></tbody></table><p>封面来源：<a href="https://www.youtube.com/watch?v=DuDz6B4cqVc&t=92s">Data Structures: Crash Course Computer Science #14</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>About Me and My Blog</title>
    <link href="/2025/06/04/introduction/"/>
    <url>/2025/06/04/introduction/</url>
    
    <content type="html"><![CDATA[<h3 id="简单的自我介绍和部署自己博客的动机motivation"><a href="#简单的自我介绍和部署自己博客的动机motivation" class="headerlink" title="简单的自我介绍和部署自己博客的动机motivation!!!"></a>简单的自我介绍和部署自己博客的动机<code>motivation</code>!!!</h3> <span id="more"></span><h4 id="About-Myself"><a href="#About-Myself" class="headerlink" title="About Myself"></a>About Myself</h4><p> &emsp;&emsp;博主是江苏某中流211计算机科学与技术专业的一名在读本科生，对计算机各领域都有着浓厚的兴趣，目前在学校的实验室学习计算机视觉相关的内容，诸如OpenCV和yolo算法，也掌握了将视觉算法部署至树莓派等边缘设备实现全链路控制的技能。未来博客的更新可能主要围绕数据结构及算法，计算机视觉等相关内容，反正可能就是想到啥学了啥就写点啥吧。</p><p> <font size="10"><center><strong>KEEP CODING!!!</strong> </center></font></p><h4 id="My-email"><a href="#My-email" class="headerlink" title="My email"></a>My email</h4><ul><li><a href="mailto:&#x6c;&#113;&#120;&#x33;&#50;&#50;&#x32;&#52;&#x38;&#x32;&#53;&#x33;&#x37;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;">lqx3222482537@qq.com</a></li><li><a href="mailto:&#114;&#105;&#99;&#104;&#97;&#114;&#x64;&#108;&#x69;&#x2e;&#x31;&#49;&#46;&#48;&#50;&#46;&#48;&#54;&#x40;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">richardli.11.02.06@gmail.com</a></li><li><a href="mailto:&#48;&#56;&#x32;&#x34;&#x31;&#49;&#50;&#48;&#64;&#99;&#117;&#109;&#116;&#x2e;&#x65;&#100;&#117;&#46;&#99;&#110;">08241120@cumt.edu.cn</a>（哈哈本来还想要稍微藏一下，但校园邮箱已经把我出卖了）</li></ul><h4 id="My-blog-in-CSDN"><a href="#My-blog-in-CSDN" class="headerlink" title="My blog in CSDN"></a>My blog in CSDN</h4><p><a href="https://blog.csdn.net/2401_86849688?type=blog">不在了情绪的CSDN博客账号</a><br>(其实两边可能是同步更新的嘻嘻)</p><p>如果大家有任何疑问，欢迎提issue，也欢迎通过邮箱联系我，我们一起进步！</p>]]></content>
    
    
    
    <tags>
      
      <tag>motivation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown，Practical Guide to Writing Blogs！</title>
    <link href="/2025/05/29/Markdown%EF%BC%8CPractical%20Guide%20to%20Writing%20Blogs%EF%BC%81/"/>
    <url>/2025/05/29/Markdown%EF%BC%8CPractical%20Guide%20to%20Writing%20Blogs%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h4 id="个人博客搭建指南："><a href="#个人博客搭建指南：" class="headerlink" title="个人博客搭建指南："></a>个人博客搭建指南：</h4><p>介绍markdown从入门到进阶的语法进行博客撰写</p><span id="more"></span><p>正所谓“工欲善其事必先利其器”，博主之前在csdn上写过一些简单，了解也使用过一些简单的markdown语法，但是最近新部署了github博客网站，发现别人的博客网站颜色华丽，排版精美，而我的博客却只有简单的标题、正文、斜体、加粗等简单的界面，煞是寡淡，于是上网学习，发现在markdown中可以添加HTML标签和CSS样式，使得界面变得更加丰富，更加美观，下面是一些markdown的基础语法和进阶玩法，希望对大家有所帮助。</p><h4 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h4><p>markdown语法具有简单易学的特性，但这也带来了一定的局限性，或许对于初学者来说是个不错的选择，但对于一些需要更加丰富的界面和功能、有更高追求的用户来说，可能需要使用HTML标签和CSS样式来实现更加复杂的界面和功能。</p><h4 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h4><p>HTML标签是用来描述网页内容的标签，通过HTML标签可以实现更加丰富的界面和功能，例如添加图片、视频、表格、链接等。</p><h4 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h4><p>CSS样式是用来描述网页样式的样式，通过CSS样式可以实现更加丰富的界面和功能，例如添加背景色、字体颜色、边框、圆角等。</p><h4 id="markdown语法和HTML标签"><a href="#markdown语法和HTML标签" class="headerlink" title="markdown语法和HTML标签"></a>markdown语法和HTML标签</h4><p>Markdown 自带的标记和 HTML 标签之间具有一定的互换性。事实上，Github 在展示 Markdown 格式的文件的时候，就是将 Markdown 的标记替换为 HTML 标签，再通过一定的方式渲染得到最终效果的。<br>尽管 Markdown 脱胎于 HTML，但是它们之间依然存在显著的区别。HTML 侧重于渲染的效果，具有复杂且多样的标签和繁复的框架结构，而 Markdown 则更加关注文本内容，标记少而简单，内容以文本为主。显然，HTML 学习和编辑的难度更大，但是能获得更统一，更加标准化的渲染效果，适合表达复杂的多媒体内容；Markdown 学习和编辑的难度更小，源文件更简洁直观，但是能实现的功能也更加单一，难以处理复杂的层次结构。因此 Markdown 更加适合比较简单的富文本内容。</p><blockquote><p><strong>前言</strong>： 不知大家是否和博主有着相同的疑惑，为什么别的博主写出来的博客排版工整、优雅美观，而自己的博客却毫无出彩之处。原先博主更多的关注点在技术博客的内容上，markdown语法仅仅靠csdn上的“语法说明”自己瞎琢磨的，现在放暑假正好有时间，再温习一下基础语法和学习一下进阶语法，来丰富自己的博客排版！这篇是我的学习笔记，博采众长，希望也能帮到大家！</p></blockquote><p>&emsp;&emsp;下面分为两个板块进行阐述：<strong>基础语法</strong>和<strong>进阶语法</strong>，板块一可以帮助你简单入门，版块二则是语法的升级！下面我都在代码块中展示markdown的写法，下面是对应的博客展现形式，大家可以根据自己的需求进行选择和学习！</p><h3 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h3><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h4><p>输入<code>#</code>+<code>space（空格）</code>就是不同等级的标题（最多只有六个等级）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="2-文本样式"><a href="#2-文本样式" class="headerlink" title="2.文本样式"></a>2.文本样式</h4><p><strong>斜体</strong>：<code>*</code>+<code>文本内容</code>+<code>*</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mardown">*这是一个斜体*<br></code></pre></td></tr></table></figure><blockquote><p><em>这是一个斜体</em></p></blockquote><p><strong>加粗</strong>：<code>**</code>+<code>文本内容</code>+<code>**</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mardown">**这里进行了加粗**<br></code></pre></td></tr></table></figure><blockquote><p><strong>这里进行了加粗</strong></p></blockquote><p><strong>斜体加粗</strong>：<code>***</code>+<code>文本内容</code>+<code>***</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*这里是斜体加粗*</span>**</span><br></code></pre></td></tr></table></figure><blockquote><p><em><strong>这里是斜体加粗</strong></em></p></blockquote><p><strong>删除线</strong>：<code>~~</code>+<code>文本内容</code>+<code>~~</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">~~这里是删除线~~<br></code></pre></td></tr></table></figure><blockquote><p><del>这里是删除线</del></p></blockquote><p><strong>分割线</strong>：在一行中用三个以上的星号建立一个分隔线，行内不能有其他内容，也可以在星号中间插入空格。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> * <span class="hljs-emphasis">*</span><br></code></pre></td></tr></table></figure><blockquote><hr></blockquote><h5 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h5><p><strong>无序列表</strong>：<code>-</code>或<code>*</code>或<code>+</code>+<code>space（空格）</code>+<code>文本内容</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 无序列表1<br><span class="hljs-bullet">-</span> 无序列表2<br><span class="hljs-bullet">-</span> 无序列表3<br></code></pre></td></tr></table></figure><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><p><strong>有序列表</strong>：<code>数字序号</code>+<code>.</code>+<code>space（空格）</code>+<code>文本内容</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 有序列表1<br><span class="hljs-bullet">2.</span> 有序列表2<br><span class="hljs-bullet">3.</span> 有序列表3<br></code></pre></td></tr></table></figure><blockquote><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol></blockquote><p><strong>嵌套列表</strong>：<br><code>-</code>+<code>space</code>+<code>第一级无序列表1</code><br><code>space*2</code>+<code>-</code>+<code>第二级无序列表2</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 嵌套列表1<br><span class="hljs-bullet">  -</span> 嵌套列表2<br><span class="hljs-bullet">    -</span> 嵌套列表3<br></code></pre></td></tr></table></figure><blockquote><ul><li>嵌套列表1<ul><li>嵌套列表2<ul><li>嵌套列表3</li></ul></li></ul></li></ul></blockquote><h5 id="4-板块"><a href="#4-板块" class="headerlink" title="4.板块"></a>4.板块</h5><p><strong>表格</strong>：<br><code>|</code>+ <code>每列的标题</code>+<code>|</code>+<code>每列的标题</code>+<code>|</code><br><code>|</code>+ <code>----| ----</code>+<code>|</code><br><code>|</code>+ <code>每列内容</code>+<code>|</code>+<code>每列内容</code>+<code>|</code><br><code>|</code>+ <code>每列内容</code>+<code>|</code>+<code>每列内容</code>+<code>|</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|语言类型 |输出函数|<br>| --- | ----------- |<br>|c语言|printf|<br>|c++|cout|<br>|python|print|<br></code></pre></td></tr></table></figure><table><thead><tr><th>语言类型</th><th>输出函数</th></tr></thead><tbody><tr><td>c语言</td><td>printf</td></tr><tr><td>c++</td><td>cout</td></tr><tr><td>python</td><td>print</td></tr></tbody></table><p>可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。</p><blockquote><p>:— 设置内容和标题栏居左对齐。<br>:—-: 设置内容和标题栏居中对齐。<br>—: 设置内容和标题栏居右对齐。</p></blockquote><p><strong>代码块</strong>：前后三个&#96;&#96;&#96;即可，可自定义选择编程语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是一个代码块&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是使用的python语言&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;这是一个c++的代码块！&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p><strong>链接</strong>：<code>[</code>+<code>超链接显示名</code>+<code>]</code>+<code>(</code>+<code>超链接地址</code>+<code>)</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">不在了情绪的博客主页：[<span class="hljs-string">不在了情绪</span>](<span class="hljs-link">https://blog.csdn.net/2401_86849688?type=blog</span>)<br></code></pre></td></tr></table></figure><blockquote><p>不在了情绪的博客主页：<a href="https://blog.csdn.net/2401_86849688?type=blog">不在了情绪</a></p></blockquote><p>我们还可以给这个链接添加title，当鼠标悬停在链接上会出现提示。<br><code>[</code>+<code>超链接显示名</code>+<code>]</code>+<code>(</code>+<code>超链接地址</code>+<code>space</code>+<code>&quot;链接title&quot;</code>+<code>)</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">不在了情绪的博客主页：[<span class="hljs-string">不在了情绪</span>](<span class="hljs-link">https://blog.csdn.net/2401_86849688?type=blog &quot;欢迎来到我的博客！&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>不在了情绪的博客主页：<a href="https://blog.csdn.net/2401_86849688?type=blog" title="欢迎来到我的博客！">不在了情绪</a></p></blockquote><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml">&lt;https://blog.csdn.net/2401_86849688?type=blog&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/2401_86849688?type=blog">https://blog.csdn.net/2401_86849688?type=blog</a></p></blockquote><p>要显示原本用于格式化 Markdown 文档的字符，需要在字符前面添加反斜杠字符 \ </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\<span class="hljs-emphasis">*我想要输出的是两个星号*</span><br></code></pre></td></tr></table></figure><blockquote><p>*我想要输出的是两个星号*</p></blockquote><h3 id="二、进阶用法"><a href="#二、进阶用法" class="headerlink" title="二、进阶用法"></a>二、进阶用法</h3><h5 id="1-字体与背景"><a href="#1-字体与背景" class="headerlink" title="1.字体与背景"></a>1.字体与背景</h5><p><code>&lt;font face=&quot;字体&quot;&gt;</code>+<code>文本内容</code>+<code>&lt;/font&gt;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span>&gt;</span></span>这是黑体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;微软雅黑&quot;</span>&gt;</span></span>这是微软雅黑<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;STCAIYUN&quot;</span>&gt;</span></span>这是华文彩云<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p><font face="黑体">这是黑体</font><br> <font face="微软雅黑">这是微软雅黑</font><br> <font face="STCAIYUN">这是华文彩云</font></p></blockquote><p><code>&lt;font size=字体大小&gt;</code>+<code>文本内容</code>+<code>&lt;/font&gt;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">4</span>&gt;</span></span>字体大小为4的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">3</span>&gt;</span></span>字体大小为3的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">2</span>&gt;</span></span>字体大小为2的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">1</span>&gt;</span></span>字体大小为1的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p><font size=4>字体大小为4的文字</font><br><font size=3>字体大小为3的文字</font><br><font size=2>字体大小为2的文字</font><br><font size=1>字体大小为1的文字</font></p></blockquote><p><code>&lt;font color=“color”&gt;</code>+<code>文本内容</code>+<code>&lt;/font&gt;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span>红色的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span></span>绿色的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span></span>蓝色的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p><font color="red">红色的文本内容</font><br><font color="green">绿色的文本内容</font><br><font color="blue">蓝色的文本内容</font></p></blockquote><p><code>&lt;mark&gt;</code>+<code>文本内容</code>+<code>&lt;/mark&gt;</code>或者<code>==</code>+<code>文本内容</code>+<code>==</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span>高亮显示的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><br>==高亮显示的文本内容==<br></code></pre></td></tr></table></figure><blockquote><p><mark>高亮显示的文本内容</mark><br>&#x3D;&#x3D;高亮显示的文本内容&#x3D;&#x3D;</p></blockquote><p><code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=“color”&gt;&lt;mark&gt;</code>+<code>文本内容</code>+<code>&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span>有背景颜色的高亮文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span>有背景颜色的高亮文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><table><tr><td bgcolor="green"><mark>有背景颜色的高亮文本内容</mark></td></tr></table><table><tr><td bgcolor="red"><mark>有背景颜色的高亮文本内容</td></tr></table></blockquote><p><code>&lt;u&gt;</code>+<code>文本内容</code>+<code>&lt;/u&gt;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线的文本内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p><u>下划线的文本内容</u></p></blockquote><p><code>&gt;</code>+<code>文本内容</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&gt;引用的文本内容<br></code></pre></td></tr></table></figure><blockquote><p>引用的文本内容</p></blockquote><h5 id="2-段落缩进"><a href="#2-段落缩进" class="headerlink" title="2.段落缩进"></a>2.段落缩进</h5><p><strong>首行缩进</strong>：</p><ul><li>全角：<code>&amp;emsp;</code>或<code>&amp;#8195;</code></li><li>半角：<code>&amp;ensp;</code>或<code>&amp;#8194;</code></li><li>半角之半角：<code>&amp;nbsp;</code>或<code>&amp;#160;</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-literal">&amp;emsp;</span><span class="hljs-literal">&amp;emsp;</span>磨刀不误砍柴工，好好学习、反复练习markdown语法，才能在日后的博客撰写中手到擒来，手拿把掐！<br></code></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;磨刀不误砍柴工，好好学习、反复练习markdown语法，才能在日后的博客撰写中手到擒来，手拿把掐！</p></blockquote><h5 id="3-公式"><a href="#3-公式" class="headerlink" title="3.公式"></a>3.公式</h5><p>&emsp;&emsp;在markdown中可以使用<code>$$</code>来作为公式块，在其中进行Latex类型公式的输入！</p><p><code>$</code>+<code>公式</code>+<code>$</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs $$```+```公式```+```$$```（单独成行的公式，居中显示）">```markdown<br>$x^2-y^2=(x+y)(x-y)$<br>$$(x-y)^2=x^2-2xy+y^2$$<br></code></pre></td></tr></table></figure><blockquote><p>$x^2-y^2&#x3D;(x+y)(x-y)$</p></blockquote><blockquote><p>$$(x-y)^2&#x3D;x^2-2xy+y^2$$</p></blockquote><h5 id="5-表情"><a href="#5-表情" class="headerlink" title="5.表情"></a>5.表情</h5><p>我们可以通过键入<code>emoji shortcodes</code>来输出表情包：<br><code>man</code>:</p><table><thead><tr><th>😄 <code>:smile:</code></th><th>😊 <code>:blush:</code></th><th>😍 <code>:heart_eyes:</code></th></tr></thead><tbody><tr><td>😘 <code>:kissing_heart:</code></td><td>😳 <code>:flushed:</code></td><td>😁 <code>:grin:</code></td></tr><tr><td>😉 <code>:wink:</code></td><td>😜 <code>:tongue_wink:</code></td><td>😀 <code>:grinning:</code></td></tr><tr><td>😴 <code>:sleeping:</code></td><td>😟 <code>:worried:</code></td><td>😮 <code>:open_mouth:</code></td></tr><tr><td>😕 <code>:confused:</code></td><td>😑 <code>:expressionless:</code></td><td>😅 <code>:sweat_smile:</code></td></tr><tr><td>😥 <code>:sad_relieved:</code></td><td>😢 <code>:cry:</code></td><td>😭 <code>:sob:</code></td></tr><tr><td>😂 <code>:joy:</code></td><td>😱 <code>:scream:</code></td><td>😠 <code>:angry:</code></td></tr><tr><td>😡 <code>:rage:</code></td><td>😷 <code>:mask:</code></td><td>😎 <code>:sunglasses:</code></td></tr><tr><td>😇 <code>:innocent:</code></td><td>❤️ <code>:heart:</code></td><td>💔 <code>:broken_heart:</code></td></tr><tr><td>✨ <code>:sparkles:</code></td><td>👍 <code>:thumbsup:</code></td><td>👎 <code>:thumbsdown:</code></td></tr><tr><td>👌 <code>:ok_hand:</code></td><td>✊ <code>:fist:</code></td><td>✌️ <code>:v:</code></td></tr><tr><td>👋 <code>:wave:</code></td><td>🙌 <code>:raised_hands:</code></td><td>🙏 <code>:pray:</code></td></tr><tr><td>👏 <code>:clap:</code></td><td>💪 <code>:muscle:</code></td><td>🏃 <code>:running:</code></td></tr><tr><td>👫 <code>:couple:</code></td><td>👪 <code>:family:</code></td><td>💃 <code>:dancer:</code></td></tr><tr><td>🙅 <code>:no_good:</code></td><td>💁 <code>:info_desk:</code></td><td>👶 <code>:baby:</code></td></tr><tr><td>👩 <code>:woman:</code></td><td>👨 <code>:man:</code></td><td>👵 <code>:grandma:</code></td></tr><tr><td>👴 <code>:grandpa:</code></td><td>👮 <code>:police:</code></td><td>😺 <code>:smile_cat:</code></td></tr><tr><td>🙈 <code>:see_no_evil:</code></td><td>💀 <code>:skull:</code></td><td>💋 <code>:kiss:</code></td></tr><tr><td>👀 <code>:eyes:</code></td><td>👄 <code>:mouth:</code></td><td>💬 <code>:speech_bubble:</code></td></tr></tbody></table><p><code>nature</code>:</p><table><thead><tr><th>☀️ <code>:sunny:</code></th><th>☔ <code>:umbrella:</code></th><th>☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td>❄️ <code>:snowflake:</code></td><td>⛄ <code>:snowman:</code></td><td>⚡ <code>:zap:</code></td></tr><tr><td>🌊 <code>:ocean:</code></td><td>🐱 <code>:cat:</code></td><td>🐶 <code>:dog:</code></td></tr><tr><td>🐭 <code>:mouse:</code></td><td>🐰 <code>:rabbit:</code></td><td>🐯 <code>:tiger:</code></td></tr><tr><td>🐨 <code>:koala:</code></td><td>🐻 <code>:bear:</code></td><td>🐷 <code>:pig:</code></td></tr><tr><td>🐮 <code>:cow:</code></td><td>🐵 <code>:monkey:</code></td><td>🐴 <code>:horse:</code></td></tr><tr><td>🐘 <code>:elephant:</code></td><td>🐼 <code>:panda:</code></td><td>🐍 <code>:snake:</code></td></tr><tr><td>🐦 <code>:bird:</code></td><td>🐤 <code>:chick:</code></td><td>🐧 <code>:penguin:</code></td></tr><tr><td>🐢 <code>:turtle:</code></td><td>🐝 <code>:bee:</code></td><td>🐙 <code>:octopus:</code></td></tr><tr><td>🐠 <code>:fish:</code></td><td>🐳 <code>:whale:</code></td><td>🐬 <code>:dolphin:</code></td></tr><tr><td>🌸 <code>:cherry_blossom:</code></td><td>🌹 <code>:rose:</code></td><td>🌻 <code>:sunflower:</code></td></tr><tr><td>🍁 <code>:maple_leaf:</code></td><td>🍄 <code>:mushroom:</code></td><td>🌵 <code>:cactus:</code></td></tr><tr><td>🌴 <code>:palm_tree:</code></td><td>🌲 <code>:tree:</code></td><td>🌞 <code>:sun_with_face:</code></td></tr><tr><td>🌙 <code>:moon:</code></td><td>🌎 <code>:earth:</code></td><td>🌋 <code>:volcano:</code></td></tr></tbody></table><p><code>objects</code>:</p><table><thead><tr><th>🎍 <code>:bamboo:</code></th><th>💝 <code>:gift_heart:</code></th><th>🎒 <code>:school_satchel:</code></th></tr></thead><tbody><tr><td>🎓 <code>:mortar_board:</code></td><td>🎏 <code>:flags:</code></td><td>🎆 <code>:fireworks:</code></td></tr><tr><td>🎇 <code>:sparkler:</code></td><td>🎃 <code>:jack_o_lantern:</code></td><td>👻 <code>:ghost:</code></td></tr><tr><td>🎅 <code>:santa:</code></td><td>🎄 <code>:christmas_tree:</code></td><td>🎁 <code>:gift:</code></td></tr><tr><td>🔔 <code>:bell:</code></td><td>🎉 <code>:tada:</code></td><td>🎊 <code>:confetti_ball:</code></td></tr><tr><td>🎈 <code>:balloon:</code></td><td>📷 <code>:camera:</code></td><td>🎥 <code>:movie_camera:</code></td></tr><tr><td>💻 <code>:computer:</code></td><td>📺 <code>:tv:</code></td><td>📱 <code>:iphone:</code></td></tr><tr><td>☎️ <code>:phone:</code></td><td>📞 <code>:telephone_receiver:</code></td><td>💡 <code>:bulb:</code></td></tr><tr><td>🔋 <code>:battery:</code></td><td>📧 <code>:email:</code></td><td>✉️ <code>:envelope:</code></td></tr><tr><td>🛀 <code>:bath:</code></td><td>🚿 <code>:shower:</code></td><td>🚽 <code>:toilet:</code></td></tr><tr><td>🔧 <code>:wrench:</code></td><td>🔨 <code>:hammer:</code></td><td>💰 <code>:moneybag:</code></td></tr><tr><td>💵 <code>:dollar:</code></td><td>💳 <code>:credit_card:</code></td><td>✂️ <code>:scissors:</code></td></tr><tr><td>📌 <code>:pushpin:</code></td><td>📎 <code>:paperclip:</code></td><td>✏️ <code>:pencil2:</code></td></tr><tr><td>📕 <code>:closed_book:</code></td><td>📚 <code>:books:</code></td><td>🔖 <code>:bookmark:</code></td></tr><tr><td>⚽ <code>:soccer:</code></td><td>🏀 <code>:basketball:</code></td><td>🎾 <code>:tennis:</code></td></tr><tr><td>🏊 <code>:swimmer:</code></td><td>🎮 <code>:video_game:</code></td><td>🎬 <code>:clapper:</code></td></tr><tr><td>📝 <code>:memo:</code></td><td>🎤 <code>:microphone:</code></td><td>🎧 <code>:headphones:</code></td></tr><tr><td>👞 <code>:shoe:</code></td><td>👠 <code>:high_heel:</code></td><td>💄 <code>:lipstick:</code></td></tr><tr><td>👕 <code>:tshirt:</code></td><td>👖 <code>:jeans:</code></td><td>👙 <code>:bikini:</code></td></tr><tr><td>👑 <code>:crown:</code></td><td>👓 <code>:eyeglasses:</code></td><td>☕ <code>:coffee:</code></td></tr><tr><td>🍵 <code>:tea:</code></td><td>🍺 <code>:beer:</code></td><td>🍕 <code>:pizza:</code></td></tr><tr><td>🍔 <code>:hamburger:</code></td><td>🍟 <code>:fries:</code></td><td>🍣 <code>:sushi:</code></td></tr><tr><td>🍚 <code>:rice:</code></td><td>🍰 <code>:cake:</code></td><td>🍫 <code>:chocolate_bar:</code></td></tr><tr><td>🍎 <code>:apple:</code></td><td>🍌 <code>:banana:</code></td><td>🍅 <code>:tomato:</code></td></tr></tbody></table><p><code>place</code>:</p><table><thead><tr><th>🏠 <code>:house:</code></th><th>🏡 <code>:house_with_garden:</code></th><th>🏫 <code>:school:</code></th></tr></thead><tbody><tr><td>🏢 <code>:office:</code></td><td>🏣 <code>:post_office:</code></td><td>🏥 <code>:hospital:</code></td></tr><tr><td>🏦 <code>:bank:</code></td><td>🏪 <code>:convenience_store:</code></td><td>🏨 <code>:hotel:</code></td></tr><tr><td>💒 <code>:wedding:</code></td><td>⛪ <code>:church:</code></td><td>🌇 <code>:city_sunrise:</code></td></tr><tr><td>🏯 <code>:japanese_castle:</code></td><td>🏰 <code>:european_castle:</code></td><td>⛺ <code>:tent:</code></td></tr><tr><td>🏭 <code>:factory:</code></td><td>🗼 <code>:tokyo_tower:</code></td><td>🗻 <code>:mount_fuji:</code></td></tr><tr><td>🌄 <code>:sunrise_over_mountains:</code></td><td>🌅 <code>:sunrise:</code></td><td>🌈 <code>:rainbow:</code></td></tr><tr><td>🎡 <code>:ferris_wheel:</code></td><td>⛲ <code>:fountain:</code></td><td>🎢 <code>:roller_coaster:</code></td></tr><tr><td>🚢 <code>:ship:</code></td><td>🚤 <code>:speedboat:</code></td><td>⛵ <code>:sailboat:</code></td></tr><tr><td>🚀 <code>:rocket:</code></td><td>✈️ <code>:airplane:</code></td><td>🚁 <code>:helicopter:</code></td></tr><tr><td>🚂 <code>:train:</code></td><td>🚊 <code>:tram:</code></td><td>🚲 <code>:bike:</code></td></tr><tr><td>🚗 <code>:car:</code></td><td>🚕 <code>:taxi:</code></td><td>🚌 <code>:bus:</code></td></tr><tr><td>🚓 <code>:police_car:</code></td><td>🚑 <code>:ambulance:</code></td><td>🚚 <code>:truck:</code></td></tr><tr><td>🚦 <code>:traffic_light:</code></td><td>⚠️ <code>:warning:</code></td><td>🚧 <code>:construction:</code></td></tr><tr><td>🏧 <code>:atm:</code></td><td>🎫 <code>:ticket:</code></td><td>♨️ <code>:hotsprings:</code></td></tr></tbody></table><p><code>number</code>&amp;&amp; <code>directions</code>:</p><table><thead><tr><th>1️⃣ <code>:one:</code></th><th>2️⃣ <code>:two:</code></th><th>3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td>4️⃣ <code>:four:</code></td><td>5️⃣ <code>:five:</code></td><td>6️⃣ <code>:six:</code></td></tr><tr><td>7️⃣ <code>:seven:</code></td><td>8️⃣ <code>:eight:</code></td><td>9️⃣ <code>:nine:</code></td></tr><tr><td>🔟 <code>:keycap_ten:</code></td><td>0️⃣ <code>:zero:</code></td><td>#️⃣ <code>:hash:</code></td></tr><tr><td>◀️ <code>:arrow_backward:</code></td><td>⬇️ <code>:arrow_down:</code></td><td>▶️ <code>:arrow_forward:</code></td></tr><tr><td>⬅️ <code>:arrow_left:</code></td><td>➡️ <code>:arrow_right:</code></td><td>⬆️ <code>:arrow_up:</code></td></tr><tr><td>🔄 <code>:arrows_counterclockwise:</code></td><td>ℹ️ <code>:information_source:</code></td><td>🆗 <code>:ok:</code></td></tr><tr><td>🆕 <code>:new:</code></td><td>🆙 <code>:up:</code></td><td>🆒 <code>:cool:</code></td></tr><tr><td>🚻 <code>:restroom:</code></td><td>🚹 <code>:mens:</code></td><td>🚺 <code>:womens:</code></td></tr><tr><td>♿ <code>:wheelchair:</code></td><td>🚇 <code>:metro:</code></td><td>🚫 <code>:no_entry_sign:</code></td></tr><tr><td>⛔ <code>:no_entry:</code></td><td>♻️ <code>:recycle:</code></td><td>🕐 <code>:clock1:</code></td></tr><tr><td>❌ <code>:x:</code></td><td>❗ <code>:exclamation:</code></td><td>⭕ <code>:o:</code></td></tr><tr><td>➕ <code>:plus:</code></td><td>➖ <code>:minus:</code></td><td>✔️ <code>:check_mark:</code></td></tr><tr><td>🔘 <code>:radio_button:</code></td><td>🔗 <code>:link:</code></td><td>✅ <code>:white_check_mark:</code></td></tr><tr><td>⚫ <code>:black_circle:</code></td><td>⚪ <code>:white_circle:</code></td><td>🔴 <code>:red_circle:</code></td></tr><tr><td>🔵 <code>:blue_circle:</code></td><td>©️ <code>:copyright:</code></td><td>®️ <code>:registered:</code></td></tr><tr><td>™️ <code>:tm:</code></td><td>🔶 <code>:orange_diamond:</code></td><td>🔷 <code>:blue_diamond:</code></td></tr></tbody></table><hr><p> 恭喜！ 看到这里你已经掌握了 Markdown 的核心语法和进阶技巧！</p><p>✨ 小建议：</p><p>精致排版 + 优质内容 &#x3D; 王炸组合 💥 清晰的结构和美观的格式会让你的博客更专业、更吸睛！</p><p>立刻动手写一篇吧！ 从今天开始，用 Markdown 打造你的技术分享博客，下一个顶尖技术博主就是你！ 🚀</p><p>参考文献：<br><a href="https://blog.csdn.net/weixin_69553582/article/details/142665344">Markdown 语法详解大全(超级版)（一）——标题、字体文本式样、颜色、列表、版块区块、缩进、列表项</a><br><a href="https://blog.csdn.net/weixin_69553582/article/details/142711165">Markdown 语法详解大全(超级版)（二）——图片、表格、段落、转义字符、内嵌、注释、缩进、公式</a><br><a href="https://blog.csdn.net/weixin_69553582/article/details/142719257">Markdown 语法详解大全(超级版)（三）——甘特图语法详解</a><br><a href="https://blog.csdn.net/weixin_69553582/article/details/140277283">Markdown 语法详解大全(超级版)（四）——Markdown 使用 Emoji 表情 （附：表情符号简码列表）</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>blogger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World！</title>
    <link href="/2025/05/29/hello-world/"/>
    <url>/2025/05/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-创建新文章"><a href="#Create-a-new-post-创建新文章" class="headerlink" title="Create a new post(创建新文章)"></a>Create a new post(创建新文章)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-启动本地服务器"><a href="#Run-server-启动本地服务器" class="headerlink" title="Run server(启动本地服务器)"></a>Run server(启动本地服务器)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>会出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop<br></code></pre></td></tr></table></figure><p>这样就可以在本地服务器上进行测试了！</p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Wipe-cache-partition-清理缓存"><a href="#Wipe-cache-partition-清理缓存" class="headerlink" title="Wipe cache partition(清理缓存)"></a>Wipe cache partition(清理缓存)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure><h3 id="Generate-static-files-生成静态文件"><a href="#Generate-static-files-生成静态文件" class="headerlink" title="Generate static files(生成静态文件)"></a>Generate static files(生成静态文件)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites-部署到github远程站点"><a href="#Deploy-to-remote-sites-部署到github远程站点" class="headerlink" title="Deploy to remote sites(部署到github远程站点)"></a>Deploy to remote sites(部署到github远程站点)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Integrate-将上述步骤简化为一个命令行操作"><a href="#Integrate-将上述步骤简化为一个命令行操作" class="headerlink" title="Integrate (将上述步骤简化为一个命令行操作)"></a>Integrate (将上述步骤简化为一个命令行操作)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
